package sintactico;

import backend.BackTables;
import c3a.GeneratorC3A;
import c3a.InstructionC3A.Code;
import errores.CompilerError;
import errores.SymTabError;
import generatorAssembler.GeneratorAssembler;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import lexico.Lexico;
import core.*;
import symbolsTable.SymbolsTable;
import symbolsTable.Type;
import symbolsTable.Type.Tipo;
import symbolsTable.Type.TipoSubyacente;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

class Parser;

parser code
{:
  private SymbolsTable symbolsTable;
  private BackTables backTables;
  private Lexico lexico;
  private GeneratorC3A codi3a;
  private GeneratorAssembler assembler;
  private String filename;
  private String filenamePath;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(Lexico lexico, ComplexSymbolFactory sf){
    super(lexico, sf);
    this.lexico = lexico;
    this.symbolsTable = new SymbolsTable();
    this.backTables = new BackTables(symbolsTable);
    this.codi3a = new GeneratorC3A();
    this.assembler = new GeneratorAssembler(symbolsTable, backTables, codi3a, "Example");
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  public Parser(Lexico lexico, ComplexSymbolFactory sf, String filename){
      super(lexico, sf);
      this.lexico = lexico;
      this.filename = filename;
      this.symbolsTable = new SymbolsTable(filename);
      this.backTables = new BackTables(symbolsTable, filename);
      this.codi3a = new GeneratorC3A(filename);
      this.assembler = new GeneratorAssembler(symbolsTable, backTables, codi3a, filename);
      this.labelTrueStack = new Stack<String>();
      this.labelFalseStack = new Stack<String>();
      filenamePath = filename;
      int pos = filenamePath.lastIndexOf(".");
      if (pos > 0) {
          filenamePath = filenamePath.substring(0, pos);
      }
    }


  public void syntax_error(Symbol s) {
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      Lexico.closeFile((s.left + 1), (s.right + 1));

      ComplexSymbol complexSymbol = (ComplexSymbol) s;

      throw new CompilerError(complexSymbol, expected_names, true, filenamePath);
    } catch (Exception e) {
		};
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      Lexico.closeFile((s.left + 1), (s.right + 1));

      ComplexSymbol complexSymbol = (ComplexSymbol) s;

      throw new CompilerError(complexSymbol, expected_names, false, filenamePath);
    } catch (Exception e) {
      SymTabError.closeFile();
      CompilerError.closeFiles();
		};
  }

  private void inicioTipos() {
    try{
      //init TUPLE type
      Type tuple_type = new Type(Tipo.dtype, TipoSubyacente.TS_TUPLE, 0);
      symbolsTable.add("tuple", tuple_type);

      //init NUMBER type
      Type number_type = new Type(Tipo.dtype, TipoSubyacente.TS_NUMBER, 16);
      symbolsTable.add("number", number_type);

      // init String type
      Type str_type = new Type(Tipo.dtype, TipoSubyacente.TS_STRING, 16);
      symbolsTable.add("string", str_type);

      //init BOOLEAN type
      Type bool_type = new Type(Tipo.dtype,TipoSubyacente.TS_BOOLEAN, 16);
      symbolsTable.add("boolean",bool_type);

      //init VOID type
      Type void_type = new Type(Tipo.dtype, TipoSubyacente.TS_NULL, 0);
      symbolsTable.add("void", void_type);
    }catch (SymTabError e){
      SymTabError.closeFile();
      CompilerError.closeFiles();
    }
  }

:};

// Terminal Symbols

terminal String ID, NUMBER, STRING, BOOL, STRUCT, OP_RELATIONAL, OP_LOGICAL, OP_LOGICAL_NOT, OP_ARITHMETICAL_C, OP_ARITHMETICAL_B;

terminal        OP_ASSIG, IF, ELIF, ELSE,
                WHILE, FUNC, RETURN, CONSTANT, FOR,
                READ, PRINT, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET,
                SEMICOLON, COMMA, TWO_POINTS, MAIN;


// Non-terminal Symbols

non terminal  Start                 STARTS;
non terminal  Init                  INIT;

non terminal  MainLabel             m_main;
non terminal  MainS                 main_s;
non terminal  MainInstructions      main_instructions;

non terminal  Instructions          instructions;
non terminal  Instruction           instruction;

non terminal  BlockIn               block_in;
non terminal  BlockOut              block_out;

non terminal  Declarations          declarations, declaration;

non terminal  Const                 constant;

non terminal  NumericValue          number_value;
non terminal  Identifier            id_value;
non terminal  StringValue           string_value;
non terminal  BooleanValue          boolean_value;

non terminal  Value                 value;

non terminal  Assignation           operator_assig;
non terminal  InstructionOut        instruction_out;

non terminal  ArithmeticOperator    arith_op;
non terminal  ArithmeticOperation   arithmetical_operation;
non terminal  ArithmeticValue       arithmetical_value;

non terminal  BooleanOperator       boolean_operation;
non terminal  BooleanOperationValue boolean_op_value;
non terminal  ValuesComparison      value_comparison;
non terminal  End                   m_end;
non terminal  Condition             cond;
non terminal  CondFalse             cond_f;
non terminal  CondTrue              cond_t;
non terminal  InstructionIf         instruction_if;
non terminal  ElseIf                instruction_elif;
non terminal  Else                  instruction_else;
non terminal  WhileLabel            m_while;
non terminal  ForBody               for_body;
non terminal  ForLabel              label_for;
non terminal  LabelPostFor          label_post_for;
non terminal  InstructionWhile      instruction_while;
non terminal  InstructionFor        instruction_for;
non terminal  DeclareFunctions      declare_functions;
non terminal  DefineFunction        define_function;
non terminal  FunctionInit          function_init;
non terminal  FunctionParams        function_params;
non terminal  FunctionWithParams    function_w_params;
non terminal  FunctionInstructions  function_instructions;
non terminal  FunctionReturn        function_return;

non terminal  CallFunction          call_function;
non terminal  CallBody              call_body;

non terminal  TupleDeclaration      tuple_declaration;
non terminal  FieldList             field_list;
non terminal  TupleField            tuple_field;
non terminal  TupleValues           tuple_value;
non terminal  TupleValues           tuple_values;

non terminal  Empty                 EMPTY;

// precedences
precedence left OP_ARITHMETICAL_B;
precedence left OP_ARITHMETICAL_C;
precedence left OP_LOGICAL;
precedence left OP_LOGICAL_NOT;

start with STARTS;

STARTS                      ::=  INIT declare_functions
                            {:
                              symbolsTable.closeSymbolsTableFiles();
                              backTables.guardarTablasBack();
                              codi3a.guardarC3Dir();
                              assembler.generateAssembler();
                              SymTabError.closeFile();
                              CompilerError.closeFiles();
                            :};

INIT                        ::= {:
                              inicioTipos();
                              RESULT = new Init();
                            :};

declare_functions           ::= define_function declare_functions
                            {:
                              RESULT = new DeclareFunctions();
                            :}
                            | main_s
                            {:
                              RESULT = new DeclareFunctions();
                            :};
                            

define_function             ::= function_init:init_func LBRACE block_in function_instructions function_return:ret_func block_out RBRACE
                            {:
                              //Check function type and return type
                              if (init_func.getTipoSubyacente() != ret_func.getTipoSubyacente()) {
                                  String msg = "Mismatched return type. Expected: " + init_func.getTipoSubyacente() + 
                                                  ", but received: " + ret_func.getTipoSubyacente() + 
                                                  " from " + ret_funcxleft.getLine() + ":" + ret_funcxleft.getColumn() + 
                                                  " to " + ret_funcxright.getLine() + ":" + ret_funcxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              // NO RETURN
                              if (TipoSubyacente.TS_NULL == init_func.getTipoSubyacente()){
                                codi3a.generarC3A(Code.rtn,null,null,init_func.getFunId()); 
                              // RETURN
                              } else {
                                codi3a.generarC3A(Code.rtn,ret_func.getVarId(),null,init_func.getFunId());
                              }

                              RESULT = new DefineFunction();
                            :};

function_init               ::= FUNC ID:fun_id function_params:params_fun RPAREN TWO_POINTS ID:type_id
                            {:
                              try {
                                
                                // Return type
                                Type return_tp = symbolsTable.get(type_id);
                                if (Tipo.dtype != return_tp.getTipo()) {
                                  String msg = "Invalid function declaration: incorrect type from " + 
                                  type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                // Comprobar que es boolean o number
                                if (TipoSubyacente.TS_STRING==return_tp.getTipoSubyacente()) {
                                  String msg = "Invalid return type: " + type_id + 
                                  ". Expected boolean or number from " + 
                                  type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                ArrayList<Parameter> parameters = params_fun.getParams();
                                TipoSubyacente subtipo = return_tp.getTipoSubyacente();
                                String bid = backTables.addProcedure(fun_id, parameters.size(), 0, subtipo);
                                Type fun_type = new Type(bid, Tipo.dfun, type_id);
                                symbolsTable.add(fun_id, fun_type);

                                // Add parameters
                                for (Parameter param : parameters) {
                                  Type param_tipo = param.getType();
                                  TipoSubyacente param_subtipo = symbolsTable.get(param.getType().getTypeName()).getTipoSubyacente();
                                  String p_backid = backTables.addVariable(param.getVarId(), param_subtipo, param.getSize(), true);
                                  param_tipo.setIdBack(p_backid);
                                  symbolsTable.addParam(fun_id, p_backid, param.getVarId(), param_tipo);
                                }

                                codi3a.generarC3A(Code.skip,null,null,bid);
                                codi3a.generarC3A(Code.pmb,null,null,bid);

                                RESULT = new FunctionInit(bid, subtipo);

                              } catch (SymTabError e) {
                                  String msg = e.getMessage() + " from " + 
                                  type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

function_params             ::= function_w_params:parameters
                            {:
                              RESULT = new FunctionParams(parameters.getParams());
                            :}
                            | LPAREN
                            {:
                              RESULT = new FunctionParams();
                            :};

function_w_params           ::= function_w_params:prev COMMA ID:id TWO_POINTS ID:type_id
                            {:
                              try {
                                
                                // Parameter type
                                Type tipus = symbolsTable.get(type_id);
                                if (Tipo.dtype != tipus.getTipo()) {
                                  String msg = "Invalid parameter type from " + 
                                  idxleft.getLine() + ":" + idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();
                                }
                                
                                if (TipoSubyacente.TS_STRING == tipus.getTipoSubyacente()) {
                                  String msg = "Invalid parameter type: " + type_id + ". Expected boolean or number, found from " + 
                                  idxleft.getLine() + ":" + idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type p_tipo = new Type(Tipo.darg, type_id);
                                Parameter parameter = new Parameter(id, p_tipo, tipus.getSize());
                                RESULT = new FunctionWithParams(parameter, prev);

                              } catch (SymTabError e) {
                                String msg = e.getMessage() + " from " + 
                                type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | LPAREN ID:id TWO_POINTS ID:type_id
                            {:
                              try {
                                
                                // Parameter type
                                Type tipus = symbolsTable.get(type_id);
                                if (Tipo.dtype != tipus.getTipo()) {
                                  String msg = "Invalid parameter type from " + 
                                  idxleft.getLine() + ":" + idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }
                                if (TipoSubyacente.TS_STRING == tipus.getTipoSubyacente()) {
                                  String msg = "Invalid parameter type: " + type_id + ". Expected boolean or number, found from " + 
                                  idxleft.getLine() + ":" + idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type p_tipo = new Type(Tipo.darg, type_id);
                                Parameter parameter = new Parameter(id, p_tipo, tipus.getSize());
                                RESULT = new FunctionWithParams(parameter);

                              } catch (SymTabError e) {
                                String msg = e.getMessage() + " from " + 
                                type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

function_instructions       ::= instructions
                            {:
                              RESULT = new FunctionInstructions();
                            :}
                            |
                            {:
                              RESULT = new FunctionInstructions();
                            :};

function_return             ::= RETURN value:val SEMICOLON
                            {:
                              try {
                                // Literal
                                TipoSubyacente subtipo = null;
                                if (Tipo.dnull == val.getTipo()) {
                                  subtipo = val.getTipoSubyacente();
                                }

                                // Var
                                if (Tipo.dnull != val.getTipo()) {
                                  Type tipo = symbolsTable.get(val.getTypeName());
                                  subtipo = tipo.getTipoSubyacente();
                                }

                                RESULT = new FunctionReturn(val.getVarId(), subtipo);

                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | EMPTY
                            {:
                              RESULT = new FunctionReturn();
                            :};

main_s                        ::= FUNC MAIN m_main LPAREN RPAREN LBRACE block_in main_instructions block_out RBRACE {:
                              codi3a.generarC3A(Code.rtn,null,null,"PROC_main");
                              RESULT = new MainS();
                            :};

m_main                      ::=
                            {:
                              String bid = backTables.addMain();
                              Type tipofunc = new Type(bid, Tipo.dfun, null);
                              symbolsTable.add("main", tipofunc);
                              codi3a.generarC3A(Code.skip,null,null,"main");
                              codi3a.generarC3A(Code.pmb,null,null,bid);

                              RESULT = new MainLabel();
                            :};

main_instructions           ::= instructions
                            {:
                              RESULT = new MainInstructions();
                            :}
                            | EMPTY
                            {:
                              RESULT = new MainInstructions();
                            :};

instructions                ::= instructions instruction
                            {:
                              RESULT = new Instructions();
                            :}
                            | instruction
                            {:
                              RESULT = new Instructions();
                            :};

instruction                 ::=  declarations SEMICOLON
                            {:
                              RESULT = new Instruction();
                            :}
                            | tuple_declaration SEMICOLON
                            {:
                              RESULT = new Instruction();
                            :}
                            | instruction_if
                            {:
                              RESULT = new Instruction();
                            :}
                            | instruction_while
                            {:
                              RESULT = new Instruction();
                            :}
                            | instruction_for
                            {:
                              RESULT = new Instruction();
                            :}
                            | operator_assig SEMICOLON
                            {:
                              RESULT = new Instruction();
                            :}
                            | instruction_out SEMICOLON
                            {:
                              RESULT = new Instruction();
                            :}
                            | call_function SEMICOLON
                            {:
                              RESULT = new Instruction();
                            :};

block_in                    ::=
                            {:
                              symbolsTable.enterBlock();
                              RESULT = new BlockIn();
                            :};

block_out                   ::=
                            {:
                              try {
                                symbolsTable.leaveBlock();
                                RESULT = new BlockOut();
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

declarations                ::=  ID:id_var COMMA declarations:declarations
                            {:
                              try {
                                Type tipo = declarations.getType();
                                String bid;
                                if (TipoSubyacente.TS_STRING == tipo.getTipoSubyacente()) {
                                  String val = declarations.getValue();
                                  bid = backTables.addStringVariable(id_var, tipo.getSize(), val);
                                } else {
                                  bid = backTables.addVariable(id_var, tipo.getTipoSubyacente(), tipo.getSize(), false);
                                }

                                tipo.setIdBack(bid);
                                symbolsTable.add(id_var, tipo);
                                codi3a.generarC3A(Code.copy, declarations.getVarId(), null, bid);

                                RESULT = declarations;

                              } catch (SymTabError e) {
                                String msg = e.getMessage() + " from " + 
                                id_varxleft.getLine() + ":" + id_varxleft.getColumn() + 
                                " to " + id_varxright.getLine() + ":" + id_varxright.getColumn();

                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | declaration:declaration
                            {:
                              RESULT = declaration;
                            :}
                            ;

tuple_declaration           ::= STRUCT LBRACE field_list:field_list RBRACE ID:var_id
                            {:
                            Type type = symbolsTable.get("tuple");
                            type.setSize(field_list.getSize());
                            type.setTupleTypes(field_list.getTypes());
                            symbolsTable.add(var_id, type);
                            RESULT = new TupleDeclaration(var_id, field_list, field_list.getSize());
                            :}
                            ;

field_list                  ::= field_list:field_list SEMICOLON tuple_field:field
                            {:
                            field_list.addField(field);
                            RESULT = field_list;
                            :}
                            | tuple_field:field
                            {:
                            ArrayList<TupleField> tupleFields = new ArrayList<>();
                            tupleFields.add(field);
                            RESULT = new FieldList(tupleFields);
                            :}
                            ;

tuple_field                 ::= ID:id_var TWO_POINTS ID:type_id
                            {:
                            Type type = symbolsTable.get(type_id);
                            if (type == null || type.getTipo() != Tipo.dtype) {
                              String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                              String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                              String msg = "Invalid type" + " from "+from+" to "+to;
                              throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            String backId = backTables.addVariable(id_var, type.getTipoSubyacente(), type.getSize(), false);
                            type.setIdBack(backId);
                            symbolsTable.add(id_var, type);

                            RESULT = new TupleField(id_var, type);
                            :}
                            ;

declaration                 ::=  ID:id_var constant:constant TWO_POINTS ID:type_id OP_ASSIG value:value
                            {:
                              try {

                                boolean isConst = constant != null ? constant.getIsConst() : false;

                                Type type = symbolsTable.get(type_id);

                                if (type == null || type.getTipo() != Tipo.dtype) {
                                  String msg = "Invalid type from " + 
                                  type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                if (type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_STRING) {
                                    String msg = "Declaration: Invalid subjacent type from " + 
                                    type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                    " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                if (value.getTipo() == Tipo.dnull && type.getTipoSubyacente() != value.getTipoSubyacente()) {
                                  String msg = "Value and type must match the same subjacent type from " + 
                                                  type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                if (value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)) {
                                  String msg = "Value and type must match the same subjacent type, from " + 
                                  type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                  " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type var_type;

                                if (isConst) {
                                  var_type = new Type(Tipo.dconst, type_id, value.getValue());
                                } else {
                                  var_type = new Type(Tipo.dvar, type_id);
                                }

                                int size = type.getSize();
                                if (value.getIsString()) {
                                  size = value.getStringSize();
                                }

                                String var_id;
                                if (type.getTipoSubyacente() == TipoSubyacente.TS_STRING) {
                                  String str_value = (String) value.getValue();
                                  var_id = backTables.addStringVariable(id_var, type.getSize(), str_value);
                                } else {
                                  var_id = backTables.addVariable(id_var, type.getTipoSubyacente(), type.getSize(), false);
                                }

                                var_type.setIdBack(var_id);

                                String val_id = value.getVarId();
                                symbolsTable.add(id_var, var_type);

                                Declarations symDcls;
                                if (value.getIsString()) {
                                  symDcls = new Declarations(val_id, var_type, (String) value.getValue());
                                } else {
                                  symDcls = new Declarations(val_id, var_type);
                                }

                                if (type.getTipoSubyacente() != TipoSubyacente.TS_STRING) {
                                  codi3a.generarC3A(Code.copy,val_id,null,var_id);
                                }

                                RESULT = symDcls;

                              } catch(SymTabError e) {
                                String msg = e.getMessage() + " from " + 
                                id_varxleft.getLine() + ":" + id_varxleft.getColumn() + 
                                " to " + id_varxright.getLine() + ":" + id_varxright.getColumn();

                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | ID:id_var constant TWO_POINTS ID:type_id OP_ASSIG tuple_value:tuple_value
                            {:
                            Type type = symbolsTable.get(type_id);

                            if (type == null || type.getTipo() != Tipo.dtype) {
                              String msg = "Invalid type from " + 
                              type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                              " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                              throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            if (type.getTipoSubyacente() != TipoSubyacente.TS_TUPLE) {
                                String msg = "Declaration: Invalid subjacent type from " + 
                                type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            if (type.getTupleTypes().size() != tuple_value.getValues().size()) {
                                String msg = "Tuple Declaration: Invalid number of values from " + 
                                type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            for (int i = 0; i < tuple_value.getValues().size(); i++) {
                                if (type.getTupleTypes().get(i).getTipoSubyacente() != tuple_value.getValues().get(i).getTipoSubyacente()) {
                                    String msg = "TUPLE_DECLARATION: Invalid subjacent type of value from " + 
                                    type_idxleft.getLine() + ":" + type_idxleft.getColumn() + 
                                    " to " + type_idxright.getLine() + ":" + type_idxright.getColumn();

                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }
                            }

                            for (int i = 0; i < tuple_value.getValues().size(); i++) {
                                var value = tuple_value.getValues().get(i);
                                var tipo = type.getTupleTypes().get(i);
                                codi3a.generarC3A(Code.copy,value.getVarId(),null,tipo.getBackendId());
                            }

                            backTables.addVariable(id_var, type.getTipoSubyacente(), type.getSize(), false);

                            RESULT = new Declarations();

                            :}
                            ;

constant                    ::=  CONSTANT
                            {:
                              RESULT = new Const(true);
                            :}
                            |  EMPTY
                            {:
                              RESULT = new Const(false);
                            :};

operator_assig              ::= ID:var_id OP_ASSIG value:value
                            {:
                              try {
                                   Type tipo = symbolsTable.get(var_id);
                                   String idtipo = tipo.getTypeName();

                                   if (Tipo.dconst == tipo.getTipo()) {
                                      String msg = "Can't assign a value to a constant, from " + 
                                      var_idxleft.getLine() + ":" + var_idxleft.getColumn() + 
                                      " to " + valuexright.getLine() + ":" + valuexright.getColumn();

                                       throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                   }

                                   //If literal (type = null) check subjacent
                                   if (Tipo.dnull == value.getTipo() && tipo.getTipoSubyacente() == value.getTipoSubyacente()) {
                                      String msg = "Value and type must match the same subjacent type from " + 
                                      var_idxleft.getLine() + ":" + var_idxleft.getColumn() + 
                                      " to " + valuexright.getLine() + ":" + valuexright.getColumn();

                                       throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                   }

                                   if (Tipo.dnull != value.getTipo() && !value.getTypeName().equals(idtipo)) {
                                      String msg = "Value type and type_id must be the same type" + 
                                                      " from " + var_idxleft.getLine() + ":" + var_idxleft.getColumn() + 
                                                      " to " + valuexright.getLine() + ":" + valuexright.getColumn();
                                       throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                   }

                                   codi3a.generarC3A(Code.copy,value.getVarId(),null,tipo.getBackendId());

                                   RESULT = new Assignation();
                              } catch (SymTabError e) {
                                  String msg = e.getMessage() + 
                                  " from " + var_idxleft.getLine() + ":" + var_idxleft.getColumn() + 
                                  " to " + var_idxright.getLine() + ":" + var_idxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

arith_op                    ::= OP_ARITHMETICAL_B:op
                            {: RESULT = new ArithmeticOperator(op); :}
                            | OP_ARITHMETICAL_C:op
                            {: RESULT = new ArithmeticOperator(op); :};

arithmetical_operation      ::= arithmetical_value:ath_val1 arith_op:op arithmetical_value:ath_val2
                            {:
                              try {
                                ArithmeticOperation sym;
                                boolean allConst = ath_val1.getIsConst() && ath_val2.getIsConst();

                                Code op_code;

                                switch (op.getOperator()) {
                                  case "+" :
                                    op_code = Code.add;
                                    break;
                                  case "-" :
                                    op_code = Code.sub;
                                    break;
                                  case "*" :
                                    op_code = Code.prod;
                                    break;
                                  case "/" :
                                    op_code = Code.div;
                                    break;
                                  case "%" :
                                    op_code = Code.mod;
                                    break;
                                  default :
                                    String msg = "Invalid arithmetic operator from " + 
                                    opxleft.getLine() + ":" + opxleft.getColumn() + 
                                    " to " + opxright.getLine() + ":" + opxright.getColumn();
                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Integer value = null;
                                if (allConst) {
                                  Integer val1 = (Integer) ath_val1.getValue();
                                  Integer val2 = (Integer) ath_val2.getValue();

                                  switch (op.getOperator()) {
                                    case "+" :
                                      value = val1 + val2;
                                      break;
                                    case "-" :
                                      value = val1 - val2;
                                      break;
                                    case "*" :
                                      value = val1 * val2;
                                      break;
                                    case "/" :
                                      if (val2 == 0) {
                                        String msg = "Can not divide by zero (0)" + 
                                        " from " + ath_val2xleft.getLine() + ":" + ath_val2xleft.getColumn() + 
                                        " to " + ath_val2xright.getLine() + ":" + ath_val2xright.getColumn();
                                        throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                      }
                                      value = val1 / val2;
                                      break;
                                    case "%" :
                                      value = val1 % val2;
                                      break;
                                  }
                                }

                                Type tiponumero = symbolsTable.get("number");
                                String id_Var = backTables.addTempVar(tiponumero.getSize(), tiponumero.getTipoSubyacente());
                                codi3a.generarC3A(op_code, ath_val1.getVarId(), ath_val2.getVarId(), id_Var);

                                if(allConst){
                                  sym = new ArithmeticOperation(id_Var, value);
                                }
                                else{
                                  sym = new ArithmeticOperation(id_Var);
                                }

                                RESULT = sym;
                              } catch(SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | OP_ARITHMETICAL_B:op LPAREN arithmetical_operation:arith_op RPAREN
                            {:
                              try {
                                ArithmeticOperation sym = arith_op;
                                if (op.equals("-")) {
                                  Type tiponumero = symbolsTable.get("number");
                                  String id_Var = backTables.addTempVar(tiponumero.getSize(),  tiponumero.getTipoSubyacente());
 
                                  if (arith_op.getIsConst()) {
                                    Integer value = - arith_op.getValue().intValue();
                                    sym = new ArithmeticOperation(arith_op.getVarId(), value);
                                  } else {
                                    sym = new ArithmeticOperation(id_Var);
                                  }

                                  codi3a.generarC3A(Code.neg,arith_op.getVarId(),null,id_Var);
                                }

                                RESULT = sym;
                              } catch(SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | LPAREN arithmetical_operation:arith_op RPAREN
                            {:
                              RESULT = arith_op;
                            :};

number_value                ::= NUMBER:n_val
                            {:
                              Integer val = Integer.valueOf(n_val);
                              RESULT = new NumericValue(val);
                            :}
                            | LPAREN number_value:n_val RPAREN
                            {:
                              RESULT = n_val;
                            :}
                            | OP_ARITHMETICAL_B:op number_value:n_val
                            {:
                              NumericValue sym = n_val;
                              if (op.equals("-")) {
                                Integer value = - n_val.getValue().intValue();
                                sym = new NumericValue(value);
                              }

                              RESULT = sym;
                            :};

arithmetical_value         ::= number_value:n_val
                          {:
                            try {
                              Integer val = n_val.getValue();
                              Type tiponumero = symbolsTable.get("number");
                              String idVar = backTables.addTempVar(tiponumero.getSize(),  tiponumero.getTipoSubyacente());
                              codi3a.generarC3A(Code.copy, Integer.toString(val), null, idVar);

                              RESULT = new ArithmeticValue(idVar, val);
                            } catch(SymTabError e) {
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          :}
                          | id_value:id_val
                          {:
                            try {

                              Tipo m_v_tipo = id_val.getTipo();
                              if (Tipo.darg != m_v_tipo && Tipo.dconst != m_v_tipo && Tipo.dvar != m_v_tipo) {
                                String msg = "Invalid arithmetic value type" + 
                                " from " + id_valxleft.getLine() + ":" + id_valxleft.getColumn() + 
                                " to " + id_valxright.getLine() + ":" + id_valxright.getColumn();
                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              Type var_dtype = symbolsTable.get(id_val.getTypeName());

                              if (TipoSubyacente.TS_NUMBER != var_dtype.getTipoSubyacente()) {
                                String msg = "Arithmetic Value: Invalid subjacent type" + 
                                                " from " + id_valxleft.getLine() + ":" + id_valxleft.getColumn() + 
                                                " to " + id_valxright.getLine() + ":" + id_valxright.getColumn();
                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              ArithmeticValue sym;
                              String idVar = id_val.getId();
                              if (Tipo.dconst == m_v_tipo) {
                                Integer val = (Integer) id_val.getValue();
                                sym = new ArithmeticValue(idVar, val);
                              } else {
                                sym = new ArithmeticValue(idVar);
                              }

                              RESULT = sym;
                            } catch(SymTabError e) {
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          :}
                          | arithmetical_operation:arith_op
                          {:
                            ArithmeticValue sym;
                            if (arith_op.getIsConst()) {
                              sym = new ArithmeticValue(arith_op.getVarId(), arith_op.getValue());
                            } else {
                              sym = new ArithmeticValue(arith_op.getVarId());
                            }

                            RESULT = sym;
                          :}
                          | call_function:call_fn
                          {:
                            try {
                              Type tipofunc = symbolsTable.get(call_fn.getFunctionId());
                              Type tipodef = symbolsTable.get(tipofunc.getTypeName());

                              if (tipodef.getTipoSubyacente() != TipoSubyacente.TS_NUMBER) {
                                String msg = "Invalid function call " + call_fn.getFunctionId() + 
                                                " with return type " + tipodef.getTipoSubyacente() + 
                                                ". Expected :" + TipoSubyacente.TS_NUMBER + 
                                                " from " + call_fnxleft.getLine() + ":" + call_fnxleft.getColumn() + 
                                                " to " + call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              String var_id = backTables.addTempVar(tipodef.getSize(), tipodef.getTipoSubyacente());

                              codi3a.generarC3A(Code.copy,"return",call_fn.getBackendId(),var_id);

                              RESULT = new ArithmeticValue(var_id);
                            } catch (SymTabError e) {
                              String msg = e.getMessage() + 
                              " from " + call_fnxleft.getLine() + ":" + call_fnxleft.getColumn() + 
                              " to " + call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          :}
                          | OP_ARITHMETICAL_B:op call_function:call_fn
                          {:
                            try {
                              Type tipofunc = symbolsTable.get(call_fn.getFunctionId());
                              Type tipodef = symbolsTable.get(tipofunc.getTypeName());

                              if (tipodef.getTipoSubyacente() != TipoSubyacente.TS_NUMBER) {
                                String msg = "Invalid function call " + call_fn.getFunctionId() + 
                                                " with return type " + tipodef.getTipoSubyacente() + 
                                                ". Expected :" + TipoSubyacente.TS_NUMBER + 
                                                " from " + call_fnxleft.getLine() + ":" + call_fnxleft.getColumn() + 
                                                " to " + call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              String idVar = backTables.addTempVar(tipodef.getSize(), tipodef.getTipoSubyacente());

                              codi3a.generarC3A(Code.copy,"return",call_fn.getBackendId(),idVar);

                              if (op.equals("-")) {
                                codi3a.generarC3A(Code.neg,idVar,null,idVar);
                              }

                              RESULT = new ArithmeticValue(idVar);
                            } catch (SymTabError e) {
                              String msg = e.getMessage() + 
                              " from " + call_fnxleft.getLine() + ":" + call_fnxleft.getColumn() + 
                              " to " + call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          :};

id_value                    ::= ID:id_val
                            {:
                              try {
                                Type tipo = symbolsTable.get(id_val);
                                String idVar = tipo.getBackendId();
                                Identifier sym = new Identifier(idVar, tipo.getTipo(), tipo.getTypeName());
                                if (Tipo.dconst == tipo.getTipo()) {
                                  sym = new Identifier(idVar, tipo.getTipo(), tipo.getTypeName(), tipo.getValue());
                                }
                                RESULT = sym;
                              } catch (SymTabError e) {
                                String msg = e.getMessage() + 
                                " from " + id_valxleft.getLine() + ":" + id_valxleft.getColumn() + 
                                " to " + id_valxright.getLine() + ":" + id_valxright.getColumn();
                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | LPAREN id_value:id_val RPAREN
                            {:
                              RESULT = id_val;
                            :}
                            | OP_LOGICAL_NOT:op id_value:id_val
                            {:
                              try {

                                Identifier sym;
                                TipoSubyacente subtipo = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if (TipoSubyacente.TS_BOOLEAN != subtipo) {
                                  String msg = "Invalid unary operator " + op + 
                                                  " for type " + subtipo + 
                                                  " from " + opxleft.getLine() + ":" + opxleft.getColumn() + 
                                                  " to " + opxright.getLine() + ":" + opxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type booleantipo = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(booleantipo.getSize(),  booleantipo.getTipoSubyacente());

                                codi3a.generarC3A(Code.not,id_val.getId(),null,idVar);

                                if (Tipo.dconst == id_val.getTipo()) {
                                  Boolean val = !((Boolean) id_val.getValue()).booleanValue();
                                  sym = new Identifier(idVar, id_val.getTipo(), id_val.getTypeName(), val);
                                } else {
                                  sym = new Identifier(idVar, id_val.getTipo(), id_val.getTypeName());
                                }
                                RESULT = sym;
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | OP_ARITHMETICAL_B:op id_value:id_val
                            {:
                              try {
                                Identifier sym = id_val;
                                TipoSubyacente subtipo = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if (TipoSubyacente.TS_BOOLEAN != subtipo) {
                                  String msg = "Invalid unary operator " + op + 
                                                  " for type " + subtipo + 
                                                  " from " + opxleft.getLine() + ":" + opxleft.getColumn() + 
                                                  " to " + opxright.getLine() + ":" + opxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                if (op.equals("-")) {
                                  Type type_number = symbolsTable.get("number");
                                  String idVar = backTables.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  codi3a.generarC3A(Code.neg,id_val.getId(),null,idVar);

                                  if (Tipo.dconst == id_val.getTipo()) {
                                    Integer val = -((Integer) id_val.getValue()).intValue();
                                    sym = new Identifier(idVar, id_val.getTipo(), id_val.getTypeName(), val);
                                  } else {
                                    sym = new Identifier(idVar, id_val.getTipo(), id_val.getTypeName());
                                  }
                                }
                                RESULT = sym;
                              } catch(SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

string_value                ::= STRING:string_val
                            {:
                              RESULT = new StringValue(string_val);
                            :}
                            | LPAREN string_value:string_val RPAREN
                            {:
                              RESULT = string_val;
                            :};

value                       ::= id_value:id_val
                            {:
                              Value sym;
                              String idVar = id_val.getId();

                              if (id_val.getTipo() == Tipo.dconst) {
                                sym = new Value(idVar, id_val.getTipo(), id_val.getTypeName(), id_val.getValue());
                              } else {
                                sym = new Value(idVar, id_val.getTipo(), id_val.getTypeName());
                              }
                              RESULT = sym;
                            :}
                            | string_value:str_value
                            {:
                              try {
                                Value sym;
                                String val = str_value.getString().replace("\"", "");
                                Type tipostring = symbolsTable.get("string");

                                if (val.length() > 1000) {
                                  String msg = "String must be shorter than 1000 characters " + 
                                                  " from " + str_valuexleft.getLine() + ":" + str_valuexleft.getColumn() + 
                                                  " to " + str_valuexright.getLine() + ":" + str_valuexright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                // String size
                                int stringSize = val.length() * tipostring.getSize();
                                sym = new Value(val, stringSize);
                                RESULT = sym;
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | boolean_value:bool_val
                            {:
                              try {
                                Boolean val = bool_val.getValue();
                                Type type_bool = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());
                                codi3a.generarC3A(Code.copy,val.toString(),null,idVar);
                                RESULT = new Value(idVar, TipoSubyacente.TS_BOOLEAN, val);
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | number_value:n_val
                            {:
                              try{
                                Integer val = n_val.getValue();
                                Type tiponumero = symbolsTable.get("number");
                                String idVar = backTables.addTempVar(tiponumero.getSize(), tiponumero.getTipoSubyacente());
                                codi3a.generarC3A(Code.copy,Integer.toString(val),null,idVar);
                                RESULT = new Value(idVar, TipoSubyacente.TS_NUMBER, val);
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | value_comparison:comp_val
                            {:
                              Value sym;
                              String id = comp_val.getVarId();
                              if (comp_val.getIsConst()) {
                                Boolean val = comp_val.getValue();
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN, val);
                              } else {
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN);
                              }
                              RESULT = sym;
                            :}
                            | OP_LOGICAL_NOT value_comparison:comp_val
                            {:
                              try {
                                Value sym;
                                Type tipobool = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(tipobool.getSize(), tipobool.getTipoSubyacente());

                                codi3a.generarC3A(Code.not,comp_val.getVarId(),null,idVar);

                                if (comp_val.getIsConst()) {
                                  Boolean val = ! comp_val.getValue().booleanValue();
                                  sym = new Value(idVar, TipoSubyacente.TS_BOOLEAN, val);
                                } else {
                                  sym = new Value(idVar, TipoSubyacente.TS_BOOLEAN);
                                }
                                RESULT = sym;
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | arithmetical_operation:arith_op
                            {:
                              Value sym;
                              String idVar = arith_op.getVarId();
                              if (arith_op.getIsConst()) {
                                sym = new Value(idVar, TipoSubyacente.TS_NUMBER, arith_op.getValue());
                              } else {
                                sym = new Value(idVar, TipoSubyacente.TS_NUMBER);
                              }
                              RESULT = sym;
                            :}
                            | boolean_operation:bool_op
                            {:
                              Value sym;
                              String idVar = new String(bool_op.getVarId());
                              if (bool_op.getIsConst()) {
                                sym = new Value(idVar, TipoSubyacente.TS_BOOLEAN, bool_op.getValue());
                              } else {
                                sym = new Value(idVar, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            :}
                            | call_function:call_fn
                            {:
                              try {
                                Type tipofunc = symbolsTable.get(call_fn.getFunctionId());
                                Type tipodef = symbolsTable.get(tipofunc.getTypeName());

                                if (TipoSubyacente.TS_NULL == tipodef.getTipoSubyacente()) {
                                  String msg = "Function call : " + call_fn.getFunctionId() + 
                                  " does not return any value" + 
                                  " from " + call_fnxleft.getLine() + ":" + call_fnxleft.getColumn() + 
                                  " to " + call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String idVar = backTables.addTempVar(tipodef.getSize(), tipodef.getTipoSubyacente());
                                codi3a.generarC3A(Code.copy,"return",call_fn.getBackendId(),idVar);
                                RESULT = new Value(idVar, Tipo.dfun, tipofunc.getTypeName());
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | READ LPAREN RPAREN
                            {:
                              try {
                                Type tiponumero = symbolsTable.get("number");
                                String idVar = backTables.addTempVar(tiponumero.getSize(), tiponumero.getTipoSubyacente());
                                codi3a.generarC3A(Code.read,null,null,idVar);
                                RESULT = new Value(idVar, tiponumero.getTipoSubyacente());
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            ;

tuple_value                 ::= LBRACKET tuple_values:tuple_values RBRACKET
                            {:
                            RESULT = tuple_values;
                            :}
                            ;

tuple_values                ::=  tuple_values:values COMMA value:value
                            {:
                            values.addValue(value);
                            RESULT = values;
                            :}
                            |   value:value
                            {:
                            RESULT = new TupleValues(new ArrayList<>(List.of(value)));
                            :}
                            ;



boolean_operation           ::= boolean_op_value:bool_val1 OP_LOGICAL:op boolean_op_value:bool_val2
                            {:
                              try {
                                BooleanOperator sym;
                                Code op_code;

                                switch (op) {
                                  case "&&":
                                    op_code = Code.and;
                                    break;
                                  case "||":
                                    op_code = Code.or;
                                    break;
                                  default :
                                    String msg = "Invalid boolean operator" + 
                                                    " from " + opxleft.getLine() + ":" + opxleft.getColumn() + 
                                                    " to " + opxright.getLine() + ":" + opxright.getColumn();
                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                boolean allConst = bool_val1.getIsConst() && bool_val2.getIsConst();
                                Boolean value = null;

                                if (allConst) {
                                  Boolean val1 = (Boolean) bool_val1.getValue();
                                  Boolean val2 = (Boolean) bool_val2.getValue();
                                  switch(op){
                                  case "&&":
                                    value = val1 && val2;
                                    break;
                                  case "||":
                                    value = val1 || val2;
                                    break;
                                  }
                                }

                                Type tipobool = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(tipobool.getSize(), tipobool.getTipoSubyacente());
                                String val1id = bool_val1.getVarId();
                                String val2id = bool_val2.getVarId();
                                codi3a.generarC3A(op_code,val1id,val2id,idVar);

                                if (allConst) {
                                  sym = new BooleanOperator(idVar, value);
                                } else {
                                  sym = new BooleanOperator(idVar);
                                }

                                RESULT = sym;
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | LPAREN boolean_operation:bool_op RPAREN
                            {:
                              RESULT = bool_op;
                            :}
                            | OP_LOGICAL_NOT LPAREN boolean_operation:bool_op RPAREN
                            {:
                              try {
                                BooleanOperator sym;
                                Type tipobool = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(tipobool.getSize(),  tipobool.getTipoSubyacente());
                                codi3a.generarC3A(Code.neg,bool_op.getVarId(),null,idVar);

                                if (bool_op.getIsConst()) {
                                  Boolean val = ! bool_op.getValue().booleanValue();
                                  sym = new BooleanOperator(bool_op.getVarId(), val);
                                } else {
                                  sym = new BooleanOperator(idVar);
                                }
                                RESULT = sym;
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

boolean_op_value            ::= boolean_value:bool_val
                            {:
                              try{
                                Boolean val = bool_val.getValue();
                                Type tipobool = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(tipobool.getSize(),  tipobool.getTipoSubyacente());
                                codi3a.generarC3A(Code.copy,val.toString(),null,idVar);
                                RESULT = new BooleanOperationValue(idVar, val);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | id_value:id_val
                            {:
                              try {
                                
                                BooleanOperationValue sym;
                                String idVar = id_val.getId();
                                Tipo m_v_tipo = id_val.getTipo();
                                if (m_v_tipo != Tipo.darg && m_v_tipo != Tipo.dconst && m_v_tipo != Tipo.dvar) {
                                  String msg = "Invalid arithmetic value type" + 
                                                  " from " + id_valxleft.getLine() + ":" + id_valxleft.getColumn() + 
                                                  " to " + id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type tipoVar = symbolsTable.get(id_val.getTypeName());

                                if (TipoSubyacente.TS_BOOLEAN != tipoVar.getTipoSubyacente()) {
                                  String msg = "Boolean Value: Invalid subjacent type" + 
                                                  " from " + id_valxleft.getLine() + ":" + id_valxleft.getColumn() + 
                                                  " to " + id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                if (Tipo.dconst == m_v_tipo) {
                                  Boolean val = (Boolean) id_val.getValue();
                                  sym = new BooleanOperationValue(idVar, val);
                                } else {
                                  sym = new BooleanOperationValue(idVar);
                                }

                                RESULT = sym;
                              } catch (SymTabError e) { 
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | boolean_operation:bool_op
                            {:
                              BooleanOperationValue sym;
                              if (bool_op.getIsConst()) {
                                sym = new BooleanOperationValue(bool_op.getVarId(), bool_op.getValue());
                              } else {
                                sym = new BooleanOperationValue(bool_op.getVarId());
                              }
                              RESULT = sym;
                            :}
                            | value_comparison:comp_val
                            {:
                              BooleanOperationValue sym;
                              String id = new String(comp_val.getVarId());
                              if (comp_val.getIsConst()) {
                                sym = new BooleanOperationValue(id, comp_val.getValue());
                              } else {
                                sym = new BooleanOperationValue(id);
                              }

                              RESULT = sym;
                            :}
                            | OP_LOGICAL_NOT value_comparison:comp_val
                            {:
                              try {
                                BooleanOperationValue sym;
                                Type tipobool = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(tipobool.getSize(), tipobool.getTipoSubyacente());
                                codi3a.generarC3A(Code.not,comp_val.getVarId(),null,idVar);

                                if (comp_val.getIsConst()) {
                                  Boolean val = ! comp_val.getValue().booleanValue();
                                  sym = new BooleanOperationValue(idVar, val);
                                } else {
                                  sym = new BooleanOperationValue(idVar);
                                }

                                RESULT = sym;
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | call_function:call_fn
                            {:
                              try {
                                Type tipofunc = symbolsTable.get(call_fn.getFunctionId());
                                Type tipodef = symbolsTable.get(tipofunc.getTypeName());

                                if (TipoSubyacente.TS_BOOLEAN != tipodef.getTipoSubyacente()){
                                  String msg = "Invalid function call " + call_fn.getFunctionId() + 
                                                  " with return type " + tipodef.getTipoSubyacente() + 
                                                  ". Expected :" + TipoSubyacente.TS_BOOLEAN + 
                                                  " from " + call_fnxleft.getLine() + ":" + call_fnxleft.getColumn() + 
                                                  " to " + call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String idVar = backTables.addTempVar(tipodef.getSize(), tipodef.getTipoSubyacente());
                                codi3a.generarC3A(Code.copy,"return",call_fn.getBackendId(),idVar);

                                RESULT = new BooleanOperationValue(idVar);
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | OP_LOGICAL_NOT:op call_function:call_fn
                            {:
                              try {
                                Type tipofunc = symbolsTable.get(call_fn.getFunctionId());
                                Type tipodef = symbolsTable.get(tipofunc.getTypeName());

                                if (TipoSubyacente.TS_NUMBER != tipodef.getTipoSubyacente()) {
                                  String msg = "Invalid function call " + call_fn.getFunctionId() + 
                                                  " with return type " + tipodef.getTipoSubyacente() + 
                                                  ". Expected :" + TipoSubyacente.TS_NUMBER + 
                                                  " from " + call_fnxleft.getLine() + ":" + call_fnxleft.getColumn() + 
                                                  " to " + call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String idVar = backTables.addTempVar(tipodef.getSize(), tipodef.getTipoSubyacente());
                                codi3a.generarC3A(Code.copy,"return",call_fn.getBackendId(),idVar);
                                codi3a.generarC3A(Code.neg,idVar,null,idVar);

                                RESULT = new BooleanOperationValue(idVar);
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            ;

boolean_value               ::= BOOL:bool_val
                            {:
                              Boolean val = Boolean.valueOf(bool_val);
                              RESULT = new BooleanValue(val);
                            :}
                            | OP_LOGICAL_NOT boolean_value:bool_val
                            {:
                              Boolean val = ! bool_val.getValue().booleanValue();
                              RESULT = new BooleanValue(val);
                            :}
                            | LPAREN boolean_value:bool_val RPAREN
                            {:
                              RESULT = bool_val;
                            :}
                            ;

value_comparison            ::= LPAREN value:val1 OP_RELATIONAL:op value:val2 RPAREN
                            {:
                              try{
                                ValuesComparison sym;

                                Tipo type1 = val1.getTipo();
                                TipoSubyacente subType1;

                                if(val1.getTipo() == Tipo.dnull){
                                  subType1 = val1.getTipoSubyacente();
                                }else{
                                  if(type1 != Tipo.dvar && type1 != Tipo.dconst && type1 != Tipo.darg && type1 != Tipo.dfun) {
                                    String msg = "Value 1 of comparison wrong type" + 
                                    " from " + val1xleft.getLine() + ":" + val1xleft.getColumn() + 
                                    " to " + val1xright.getLine() + ":" + val1xright.getColumn();
                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type dtype_type = symbolsTable.get(val1.getTypeName());
                                  subType1 = dtype_type.getTipoSubyacente();
                                }
                                // SAME FOR VALUE2
                                Tipo type2 = val2.getTipo();
                                TipoSubyacente subType2;

                                if(val2.getTipo() == Tipo.dnull){
                                  subType2 = val2.getTipoSubyacente();
                                }else{
                                  if(type2 != Tipo.dvar && type2 != Tipo.dconst && type2 != Tipo.darg && type2 != Tipo.dfun) {
                                    String msg = "Value 2 of comparison wrong type" + 
                                    " from " + val2xleft.getLine() + ":" + val2xleft.getColumn() + 
                                    " to " + val2xright.getLine() + ":" + val2xright.getColumn();
                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type dtype_type = symbolsTable.get(val2.getTypeName());
                                  subType2 = dtype_type.getTipoSubyacente();
                                }

                                //Check same subtype
                                if(subType1 != subType2) {
                                  String msg = "Value 1 subtype is different from value 2" + 
                                  " from " + val2xleft.getLine() + ":" + val2xleft.getColumn() + 
                                  " to " + val2xright.getLine() + ":" + val2xright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Code op_code = Code.EQ;
                                switch(op){
                                  case "==":
                                    op_code = Code.EQ;
                                    break;
                                  case "!=":
                                    op_code = Code.NE;
                                    break;
                                  case "<":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String msg = "The operator (" + op + ") only works with integer subtypes" + 
                                      " from " + opxleft.getLine() + ":" + opxleft.getColumn() + 
                                      " to " + opxright.getLine() + ":" + opxright.getColumn();
                                      throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.LT;
                                    break;
                                  case "<=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String msg = "The operator (" + op + ") only works with integer subtypes" + 
                                      " from " + opxleft.getLine() + ":" + opxleft.getColumn() + 
                                      " to " + opxright.getLine() + ":" + opxright.getColumn();
                                      throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.LE;
                                    break;
                                  case ">":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String msg = "The operator (" + op + ") only works with integer subtypes" + 
                                      " from " + opxleft.getLine() + ":" + opxleft.getColumn() + 
                                      " to " + opxright.getLine() + ":" + opxright.getColumn();
                                      throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.GT;
                                    break;
                                  case ">=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String msg = "The operator (" + op + ") only works with integer subtypes" + 
                                      " from " + opxleft.getLine() + ":" + opxleft.getColumn() + 
                                      " to " + opxright.getLine() + ":" + opxright.getColumn();
                                      throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.GE;
                                    break;
                                }

                                boolean allConst = val1.getIsConst() && val2.getIsConst();

                                Boolean val = null;
                                if(allConst){
                                  switch (op) {

                                    case "==":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = ((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                      }
                                      break;

                                    case "!=":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = !((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                      }
                                      break;

                                    // Integer operators
                                    case "<":
                                      val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                      break;
                                    case "<=":
                                      val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                      break;
                                    case ">":
                                      val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                      break;
                                    case ">=":
                                      val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                      break;
                                  }
                                }

                                Type booltipo = symbolsTable.get("boolean");
                                String idVar = backTables.addTempVar(booltipo.getSize(), booltipo.getTipoSubyacente());

                                if (allConst) {
                                  sym = new ValuesComparison(idVar, val);
                                } else {
                                  sym = new ValuesComparison(idVar);
                                }

                                codi3a.generarC3A(op_code,val1.getVarId(),val2.getVarId(),idVar);

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | LPAREN value_comparison:cmp_val RPAREN
                            {:
                              RESULT = cmp_val;
                            :};

cond                        ::= boolean_op_value:bool_val
                              {:
                                String idvar = bool_val.getVarId();
                                String t_label = backTables.addEtiq();
                                String f_label = backTables.addEtiq();

                                labelTrueStack.push(t_label);
                                labelFalseStack.push(f_label);

                                codi3a.generarC3A(Code.jump_cond,idvar,"true",t_label);
                                codi3a.generarC3A(Code.go_to,null,null,f_label);

                                RESULT = new Condition();
                              :};

cond_t                      ::=
                              {:
                                String label = labelTrueStack.pop();
                                codi3a.generarC3A(Code.skip,null,null,label);
                                RESULT = new CondTrue();
                              :};

cond_f                      ::=
                              {:
                                String label = labelFalseStack.pop();
                                codi3a.generarC3A(Code.skip,null,null,label);
                                RESULT = new CondFalse();
                              :};

instruction_if              ::= IF cond LBRACE block_in cond_t instructions block_out RBRACE instruction_elif instruction_else
                            {:
                              RESULT = new InstructionIf();
                            :};

m_end                       ::= EMPTY
                            {:
                              String label = backTables.addEtiq();
                              codi3a.generarC3A(Code.go_to,null,null,label);
                              RESULT = new End(label);
                            :};

instruction_elif                ::= m_end:mend ELIF cond_f cond LBRACE block_in cond_t instructions block_out RBRACE instruction_elif
                            {:
                              String label = mend.getLabel();
                              codi3a.generarC3A(Code.skip,null,null,label);

                              RESULT = new ElseIf();
                            :}
                            |
                            {:
                              RESULT = new ElseIf();
                            :};

instruction_else                        ::= m_end:mend ELSE LBRACE block_in cond_f instructions block_out RBRACE
                            {:
                              String label = mend.getLabel();
                              codi3a.generarC3A(Code.skip,null,null,label);
                              RESULT = new Else();
                            :}
                            | cond_f
                            {:
                              RESULT = new Else();
                            :};

m_while                     ::= EMPTY
                            {:
                              String label = backTables.addEtiq();
                              codi3a.generarC3A(Code.skip,null,null,label);
                              RESULT = new WhileLabel(label);
                            :};

instruction_while           ::= WHILE m_while:mwhile cond LBRACE block_in cond_t instructions block_out RBRACE
                            {:
                              String loop = mwhile.getLabel();
                              codi3a.generarC3A(Code.go_to,null,null,loop);
                              String end = labelFalseStack.pop();
                              codi3a.generarC3A(Code.skip,null,null,end);
                              RESULT = new InstructionWhile();
                            :};

instruction_for             ::= FOR LPAREN for_body:forBody RPAREN LBRACE block_in cond_t instructions block_out RBRACE
                            {:
                              String intro = forBody.getLabel();
                              codi3a.generarC3A(Code.go_to,null,null,intro);
                              String end = labelFalseStack.pop();
                              codi3a.generarC3A(Code.skip,null,null,end);
                              RESULT = new InstructionFor();
                            :};

label_for                   ::= EMPTY
                            {:
                              String label = backTables.addEtiq();
                              codi3a.generarC3A(Code.skip,null,null,label);
                              RESULT = new ForLabel(label);
                            :};

for_body                    ::= declaration SEMICOLON label_for:labelFor cond SEMICOLON label_post_for:labelPostFor operator_assig
                                {:
                                    String label = labelFor.getLabel();
                                    codi3a.generarC3A(Code.go_to,null,null,label);
                                    RESULT = new ForBody(labelPostFor.getLabel());
                                :};

label_post_for              ::= EMPTY
                            {:
                              String label = backTables.addEtiq();
                              codi3a.generarC3A(Code.skip,null,null,label);
                              RESULT = new LabelPostFor(label);
                            :};

call_function               ::= ID:fun_id LPAREN:lp RPAREN:rp
                            {:
                              try {
                                // Check if function and has params
                                int nparams = symbolsTable.getNumParams(fun_id);
                                if (nparams > 0 ) {
                                  String msg = "Missing parameters. Function " + fun_id + 
                                                  " has " + nparams + " parameters" + 
                                                  " from " + lpxleft.getLine() + ":" + lpxleft.getColumn() + 
                                                  " to " + rpxright.getLine() + ":" + rpxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String backId = fun_type.getBackendId();
                                codi3a.generarC3A( Code.call, 0 + "", null, backId );

                                RESULT = new CallFunction(fun_id, backId);
                              } catch (SymTabError e) {
                                String msg = e.getMessage() + 
                                " from " + fun_idxleft.getLine() + ":" + fun_idxleft.getColumn() + 
                                " to " + fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | call_body:body RPAREN:rp
                            {:
                              try {
                                int params_body = body.getNumParams();
                                String idfunc = body.getFunId();
                                int params_fun = symbolsTable.getNumParams(idfunc);

                                if (params_fun != params_body) {
                                  String msg = "Missing some parameters. Function " + idfunc + 
                                  " has " + params_fun + " parameters" + 
                                  " from " + bodyxleft.getLine() + ":" + bodyxleft.getColumn() + 
                                  " to " + rpxright.getLine() + ":" + rpxright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String fun_backId = body.getFunBackId();
                                codi3a.generarC3A( Code.call, params_fun + "", null, fun_backId );

                                RESULT = new CallFunction(idfunc, fun_backId);
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

call_body                   ::= call_body:body COMMA value:value
                            {:
                              try {
                                String fun_id = body.getFunId();
                                int nparams = body.getNumParams();
                                TipoSubyacente subtipo;

                                if (value.getTipo() == Tipo.dnull){
                                  subtipo = value.getTipoSubyacente();
                                } else {
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String msg = fun_id + ". Incorrect type for param " + nparams + 
                                    " from " + valuexleft.getLine() + ":" + valuexleft.getColumn() + 
                                    " to " + valuexright.getLine() + ":" + valuexright.getColumn();
                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type tipo_val = symbolsTable.get(value.getTypeName());
                                  subtipo = tipo_val.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type tipoparam = symbolsTable.getParam(fun_id, nparams);
                                TipoSubyacente subtipoparam = symbolsTable.get(tipoparam.getTypeName()).getTipoSubyacente();

                                if (subtipoparam != subtipo){
                                  String msg = fun_id + ". Incorrect type for param " + nparams + 
                                  ". Expected " + subtipo + " but got " + subtipoparam + 
                                  " from " + valuexleft.getLine() + ":" + valuexleft.getColumn() + 
                                  " to " + valuexright.getLine() + ":" + valuexright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String bid_func = body.getFunBackId();
                                codi3a.generarC3A(Code.param,value.getVarId(),null,bid_func);

                                RESULT = new CallBody(fun_id, bid_func, nparams+1);
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :}
                            | ID:fun_id LPAREN value:value
                            {:
                              try {
                                TipoSubyacente subtipo;
                                if (value.getTipo() == Tipo.dnull) {
                                  subtipo = value.getTipoSubyacente();
                                } else {
                                  if (Tipo.dvar != value.getTipo() && Tipo.dconst != value.getTipo() && Tipo.darg != value.getTipo()){
                                    String msg = fun_id + ". Incorrect type for param 0" + 
                                  " from " + valuexleft.getLine() + ":" + valuexleft.getColumn() + 
                                  " to " + valuexright.getLine() + ":" + valuexright.getColumn();
                                    throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subtipo = value_type.getTipoSubyacente();
                                }

                                //Check parameter type with function parameter type
                                Type tipoparam = symbolsTable.getParam(fun_id, 0);
                                TipoSubyacente subtipoparam = symbolsTable.get(tipoparam.getTypeName()).getTipoSubyacente();

                                if (subtipoparam != subtipo) {
                                  String msg = fun_id + ". Incorrect type for param 0. Expected " + subtipo + 
                                  " but got " + subtipoparam + 
                                  " from " + valuexleft.getLine() + ":" + valuexleft.getColumn() + 
                                  " to " + valuexright.getLine() + ":" + valuexright.getColumn();
                                  throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type tipofunc = symbolsTable.get(fun_id);
                                String bid_func = tipofunc.getBackendId();
                                codi3a.generarC3A(Code.param,value.getVarId(),null,bid_func);
                                RESULT = new CallBody(fun_id, bid_func, 0 + 1);
                              } catch (SymTabError e) {
                                String msg = e.getMessage() + 
                                " from " + fun_idxleft.getLine() + ":" + fun_idxleft.getColumn() + 
                                " to " + fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                throw new CompilerError(msg, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

instruction_out             ::= PRINT LPAREN value:value RPAREN
                            {:
                              try {
                                String IdVar = value.getVarId();
                                TipoSubyacente subtype;

                                if (Tipo.dnull == value.getTipo()) {
                                  subtype = value.getTipoSubyacente();
                                } else {
                                  Type tipovar = symbolsTable.get(value.getTypeName());
                                  subtype = tipovar.getTipoSubyacente();
                                }
                                if (Tipo.dnull == value.getTipo() && TipoSubyacente.TS_STRING == value.getTipoSubyacente()) {
                                  IdVar = backTables.addTemporalStringVariable(value.getStringSize(), (String) value.getValue());
                                  codi3a.generarC3A( Code.print, subtype.toString(), (String) value.getValue(), IdVar );
                                } else {
                                  codi3a.generarC3A(Code.print,subtype.toString(),null,IdVar);
                                }
                                RESULT = new InstructionOut();
                              } catch (SymTabError e) {
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            :};

EMPTY                       ::= {: RESULT = new Empty(); :};