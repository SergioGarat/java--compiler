
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import backend.Backend;
import c3a.GeneratorC3A;
import c3a.InstructionC3A.Code;
import errores.LexicalError;
import errores.SemanticError;
import errores.SymbolsTableError;
import errores.SyntaxError;
import generatorAssembler.GeneratorAssembler;
import lexico.Lexico;
import symbols.*;
import symbolsTable.SymbolsTable;
import symbolsTable.Type;
import symbolsTable.Type.Tipo;
import symbolsTable.Type.TipoSubyacente;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\045\004\000\002\045\003\000\002\005\014" +
    "\000\002\004\002\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\011\002\000\002\012\002" +
    "\000\002\013\005\000\002\013\003\000\002\014\010\000" +
    "\002\015\003\000\002\015\003\000\002\023\005\000\002" +
    "\025\003\000\002\025\003\000\002\026\005\000\002\026" +
    "\006\000\002\026\005\000\002\016\003\000\002\016\005" +
    "\000\002\016\004\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\004\000\002" +
    "\017\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\020\003\000\002\020\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\006\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\004\000\002\031\003\000\002\031\004\000\002" +
    "\021\003\000\002\021\004\000\002\021\005\000\002\032" +
    "\007\000\002\032\005\000\002\034\005\000\002\036\002" +
    "\000\002\035\002\000\002\037\014\000\002\033\003\000" +
    "\002\040\015\000\002\040\002\000\002\041\012\000\002" +
    "\041\003\000\002\042\003\000\002\043\013\000\002\054" +
    "\005\000\002\054\004\000\002\055\005\000\002\055\005" +
    "\000\002\024\006\000\002\046\011\000\002\047\010\000" +
    "\002\050\003\000\002\050\003\000\002\051\007\000\002" +
    "\051\006\000\002\052\003\000\002\052\002\000\002\053" +
    "\005\000\002\053\003\000\002\056\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\022\uffff\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\004\276\037\275\001\002\000\004\022\007\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\032\014\001\002\000\016\004\ufff0\016\ufff0\021" +
    "\ufff0\023\ufff0\027\ufff0\033\ufff0\001\002\000\016\004\020" +
    "\016\017\021\024\023\uffa5\027\023\033\uffa5\001\002\000" +
    "\004\034\273\001\002\000\004\030\202\001\002\000\014" +
    "\015\225\024\223\030\130\035\221\036\uffa2\001\002\000" +
    "\004\034\220\001\002\000\004\034\217\001\002\000\004" +
    "\030\214\001\002\000\004\030\uffa2\001\002\000\006\023" +
    "\173\033\uffa2\001\002\000\016\004\020\016\017\021\024" +
    "\023\uffa6\027\023\033\uffa6\001\002\000\016\004\ufff7\016" +
    "\ufff7\021\ufff7\023\ufff7\027\ufff7\033\ufff7\001\002\000\004" +
    "\034\167\001\002\000\004\034\uffed\001\002\000\016\004" +
    "\ufff4\016\ufff4\021\ufff4\023\ufff4\027\ufff4\033\ufff4\001\002" +
    "\000\016\004\ufff5\016\ufff5\021\ufff5\023\ufff5\027\ufff5\033" +
    "\ufff5\001\002\000\006\031\036\035\035\001\002\000\022" +
    "\004\054\005\041\006\040\007\051\012\050\014\056\026" +
    "\042\030\057\001\002\000\020\010\uffb0\011\uffb0\013\uffb0" +
    "\014\uffb0\031\uffb0\034\uffb0\035\uffb0\001\002\000\012\011" +
    "\uffc6\031\uffce\034\uffce\035\uffce\001\002\000\012\010\uffd7" +
    "\031\uffd7\034\uffd7\035\uffd7\001\002\000\016\010\uffe3\013" +
    "\uffe3\014\uffe3\031\uffe3\034\uffe3\035\uffe3\001\002\000\004" +
    "\030\165\001\002\000\012\011\uffc5\031\uffd1\034\uffd1\035" +
    "\uffd1\001\002\000\006\031\uffaf\035\uffaf\001\002\000\020" +
    "\010\uffcd\011\uffc3\013\uffdd\014\uffdd\031\uffcd\034\uffcd\035" +
    "\uffcd\001\002\000\016\010\uffd2\013\uffe0\014\uffe0\031\uffd2" +
    "\034\uffd2\035\uffd2\001\002\000\004\011\153\001\002\000" +
    "\014\004\054\007\051\012\142\014\122\030\145\001\002" +
    "\000\014\010\uffc1\011\uffc1\031\uffc1\034\uffc1\035\uffc1\001" +
    "\002\000\006\013\133\014\134\001\002\000\012\010\uffd4" +
    "\031\uffd4\034\uffd4\035\uffd4\001\002\000\022\010\uffdb\011" +
    "\uffdb\013\uffdb\014\uffdb\030\130\031\uffdb\034\uffdb\035\uffdb" +
    "\001\002\000\016\010\uffcf\013\uffde\014\uffde\031\uffcf\034" +
    "\uffcf\035\uffcf\001\002\000\014\004\054\005\041\012\105" +
    "\014\104\030\111\001\002\000\022\004\054\005\041\006" +
    "\040\007\051\012\050\014\056\026\042\030\057\001\002" +
    "\000\012\011\uffc8\031\uffd3\034\uffd3\035\uffd3\001\002\000" +
    "\016\011\uffc7\013\uffdf\014\uffdf\031\uffd5\034\uffd5\035\uffd5" +
    "\001\002\000\010\010\uffce\011\uffc6\031\103\001\002\000" +
    "\010\010\uffd1\011\uffc5\031\102\001\002\000\004\010\077" +
    "\001\002\000\012\010\uffd2\013\uffe0\014\uffe0\031\076\001" +
    "\002\000\006\010\uffd4\031\075\001\002\000\012\010\uffcf" +
    "\013\uffde\014\uffde\031\074\001\002\000\010\010\uffd3\011" +
    "\uffc8\031\073\001\002\000\014\010\uffd5\011\uffc7\013\uffdf" +
    "\014\uffdf\031\072\001\002\000\020\010\uffda\011\uffda\013" +
    "\uffda\014\uffda\031\uffda\034\uffda\035\uffda\001\002\000\014" +
    "\010\uffbf\011\uffbf\031\uffbf\034\uffbf\035\uffbf\001\002\000" +
    "\016\010\uffe4\013\uffe4\014\uffe4\031\uffe4\034\uffe4\035\uffe4" +
    "\001\002\000\012\010\uffd6\031\uffd6\034\uffd6\035\uffd6\001" +
    "\002\000\016\010\uffe2\013\uffe2\014\uffe2\031\uffe2\034\uffe2" +
    "\035\uffe2\001\002\000\022\004\054\005\041\006\040\007" +
    "\051\012\050\014\056\026\042\030\057\001\002\000\004" +
    "\031\101\001\002\000\014\010\uffbe\011\uffbe\031\uffbe\034" +
    "\uffbe\035\uffbe\001\002\000\014\010\uffbd\011\uffbd\031\uffbd" +
    "\034\uffbd\035\uffbd\001\002\000\014\010\uffca\011\uffca\031" +
    "\uffca\034\uffca\035\uffca\001\002\000\014\004\124\005\041" +
    "\012\105\014\104\030\126\001\002\000\012\004\124\012" +
    "\105\014\122\030\123\001\002\000\016\010\uffdc\013\uffdc" +
    "\014\uffdc\031\uffdc\034\uffdc\035\uffdc\001\002\000\020\010" +
    "\uffd8\011\uffd8\013\uffd8\014\uffd8\031\uffd8\034\uffd8\035\uffd8" +
    "\001\002\000\016\010\uffe1\013\uffe1\014\uffe1\031\uffe1\034" +
    "\uffe1\035\uffe1\001\002\000\014\004\054\005\041\012\105" +
    "\014\056\030\116\001\002\000\010\013\uffdf\014\uffdf\031" +
    "\072\001\002\000\016\010\uffdd\013\uffdd\014\uffdd\031\uffdd" +
    "\034\uffdd\035\uffdd\001\002\000\010\013\uffde\014\uffde\031" +
    "\120\001\002\000\010\013\uffe0\014\uffe0\031\076\001\002" +
    "\000\014\004\054\005\041\012\105\014\056\030\116\001" +
    "\002\000\010\013\uffde\014\uffde\031\074\001\002\000\016" +
    "\010\uffe5\013\uffe5\014\uffe5\031\uffe5\034\uffe5\035\uffe5\001" +
    "\002\000\020\010\uffd9\011\uffd9\013\uffd9\014\uffd9\031\uffd9" +
    "\034\uffd9\035\uffd9\001\002\000\012\004\124\012\105\014" +
    "\122\030\123\001\002\000\012\004\124\012\105\014\122" +
    "\030\123\001\002\000\020\010\uffdb\011\uffdb\013\uffdb\014" +
    "\uffdb\031\uffdb\034\uffdb\035\uffdb\001\002\000\004\031\072" +
    "\001\002\000\014\004\124\005\041\012\105\014\104\030" +
    "\126\001\002\000\004\031\076\001\002\000\024\004\054" +
    "\005\041\006\040\007\051\012\050\014\056\026\042\030" +
    "\057\031\132\001\002\000\006\031\uffae\035\uffae\001\002" +
    "\000\020\010\uffb1\011\uffb1\013\uffb1\014\uffb1\031\uffb1\034" +
    "\uffb1\035\uffb1\001\002\000\014\004\uffe7\005\uffe7\012\uffe7" +
    "\014\uffe7\030\uffe7\001\002\000\014\004\uffe8\005\uffe8\012" +
    "\uffe8\014\uffe8\030\uffe8\001\002\000\014\004\054\005\041" +
    "\012\105\014\056\030\116\001\002\000\016\010\uffdf\013" +
    "\uffdf\014\uffdf\031\uffdf\034\uffdf\035\uffdf\001\002\000\016" +
    "\010\uffde\013\uffde\014\uffde\031\uffde\034\uffde\035\uffde\001" +
    "\002\000\016\010\uffe6\013\133\014\134\031\uffe6\034\uffe6" +
    "\035\uffe6\001\002\000\016\010\uffe0\013\uffe0\014\uffe0\031" +
    "\uffe0\034\uffe0\035\uffe0\001\002\000\014\004\124\007\051" +
    "\012\142\014\122\030\151\001\002\000\014\010\uffc2\011" +
    "\uffc2\031\uffc2\034\uffc2\035\uffc2\001\002\000\014\010\uffc0" +
    "\011\uffc0\031\uffc0\034\uffc0\035\uffc0\001\002\000\022\004" +
    "\054\005\041\006\040\007\051\012\050\014\056\026\042" +
    "\030\057\001\002\000\014\010\uffd0\011\uffc4\031\uffd0\034" +
    "\uffd0\035\uffd0\001\002\000\010\010\uffce\011\uffc6\031\150" +
    "\001\002\000\014\010\uffc9\011\uffc9\031\uffc9\034\uffc9\035" +
    "\uffc9\001\002\000\014\004\124\007\051\012\142\014\122" +
    "\030\151\001\002\000\004\031\073\001\002\000\014\004" +
    "\054\007\051\012\155\014\122\030\162\001\002\000\014" +
    "\010\uffcb\011\uffcb\031\uffcb\034\uffcb\035\uffcb\001\002\000" +
    "\014\004\054\007\051\012\142\014\122\030\145\001\002" +
    "\000\014\010\uffc3\011\uffc3\031\uffc3\034\uffc3\035\uffc3\001" +
    "\002\000\014\010\uffc7\011\uffc7\031\uffc7\034\uffc7\035\uffc7" +
    "\001\002\000\014\010\uffc8\011\uffc8\031\uffc8\034\uffc8\035" +
    "\uffc8\001\002\000\014\010\uffc6\011\uffc6\031\uffc6\034\uffc6" +
    "\035\uffc6\001\002\000\022\004\054\005\041\006\040\007" +
    "\051\012\050\014\056\026\042\030\057\001\002\000\014" +
    "\010\uffc5\011\uffc5\031\uffc5\034\uffc5\035\uffc5\001\002\000" +
    "\014\010\uffc4\011\uffc4\031\uffc4\034\uffc4\035\uffc4\001\002" +
    "\000\004\031\166\001\002\000\012\010\uffcc\031\uffcc\034" +
    "\uffcc\035\uffcc\001\002\000\016\004\ufff3\016\ufff3\021\ufff3" +
    "\023\ufff3\027\ufff3\033\ufff3\001\002\000\016\004\ufff8\016" +
    "\ufff8\021\ufff8\023\ufff8\027\ufff8\033\ufff8\001\002\000\004" +
    "\033\uffef\001\002\000\004\033\uffa3\001\002\000\022\004" +
    "\054\005\041\006\040\007\051\012\050\014\056\026\042" +
    "\030\057\001\002\000\004\034\175\001\002\000\004\033" +
    "\uffa4\001\002\000\004\033\177\001\002\000\004\022\uffac" +
    "\001\002\000\004\030\202\001\002\000\004\030\uffb3\001" +
    "\002\000\014\004\054\007\051\012\155\014\122\030\162" +
    "\001\002\000\004\032\204\001\002\000\012\004\ufff0\016" +
    "\ufff0\021\ufff0\027\ufff0\001\002\000\012\004\uffbb\016\uffbb" +
    "\021\uffbb\027\uffbb\001\002\000\012\004\020\016\017\021" +
    "\024\027\023\001\002\000\014\004\020\016\017\021\024" +
    "\027\023\033\uffef\001\002\000\004\033\211\001\002\000" +
    "\016\004\uffb2\016\uffb2\021\uffb2\023\uffb2\027\uffb2\033\uffb2" +
    "\001\002\000\006\011\153\031\213\001\002\000\004\032" +
    "\uffbc\001\002\000\022\004\054\005\041\006\040\007\051" +
    "\012\050\014\056\026\042\030\057\001\002\000\004\031" +
    "\216\001\002\000\004\034\uffad\001\002\000\016\004\ufff1" +
    "\016\ufff1\021\ufff1\023\ufff1\027\ufff1\033\ufff1\001\002\000" +
    "\016\004\ufff6\016\ufff6\021\ufff6\023\ufff6\027\ufff6\033\ufff6" +
    "\001\002\000\004\004\234\001\002\000\004\036\227\001" +
    "\002\000\004\036\uffeb\001\002\000\004\036\uffea\001\002" +
    "\000\022\004\054\005\041\006\040\007\051\012\050\014" +
    "\056\026\042\030\057\001\002\000\004\034\uffe9\001\002" +
    "\000\004\004\230\001\002\000\004\015\231\001\002\000" +
    "\022\004\054\005\041\006\040\007\051\012\050\014\056" +
    "\026\042\030\057\001\002\000\004\034\uffec\001\002\000" +
    "\004\034\uffee\001\002\000\010\024\223\035\221\036\uffa2" +
    "\001\002\000\004\032\236\001\002\000\012\004\ufff0\016" +
    "\ufff0\021\ufff0\027\ufff0\001\002\000\012\004\uffbb\016\uffbb" +
    "\021\uffbb\027\uffbb\001\002\000\012\004\020\016\017\021" +
    "\024\027\023\001\002\000\014\004\020\016\017\021\024" +
    "\027\023\033\uffef\001\002\000\004\033\243\001\002\000" +
    "\022\004\uffb6\016\uffb6\017\uffa2\020\uffb6\021\uffb6\023\uffb6" +
    "\027\uffb6\033\uffb6\001\002\000\020\004\uffba\016\uffba\020" +
    "\uffa2\021\uffba\023\uffba\027\uffba\033\uffba\001\002\000\006" +
    "\017\uffb8\020\uffb8\001\002\000\004\017\247\001\002\000" +
    "\004\030\uffba\001\002\000\004\030\202\001\002\000\004" +
    "\032\252\001\002\000\012\004\ufff0\016\ufff0\021\ufff0\027" +
    "\ufff0\001\002\000\012\004\uffbb\016\uffbb\021\uffbb\027\uffbb" +
    "\001\002\000\012\004\020\016\017\021\024\027\023\001" +
    "\002\000\014\004\020\016\017\021\024\027\023\033\uffef" +
    "\001\002\000\004\033\257\001\002\000\022\004\uffb6\016" +
    "\uffb6\017\uffa2\020\uffb6\021\uffb6\023\uffb6\027\uffb6\033\uffb6" +
    "\001\002\000\020\004\uffb7\016\uffb7\020\uffb7\021\uffb7\023" +
    "\uffb7\027\uffb7\033\uffb7\001\002\000\016\004\uffb9\016\uffb9" +
    "\021\uffb9\023\uffb9\027\uffb9\033\uffb9\001\002\000\016\004" +
    "\uffb4\016\uffb4\021\uffb4\023\uffb4\027\uffb4\033\uffb4\001\002" +
    "\000\004\020\264\001\002\000\004\032\265\001\002\000" +
    "\012\004\ufff0\016\ufff0\021\ufff0\027\ufff0\001\002\000\012" +
    "\004\uffba\016\uffba\021\uffba\027\uffba\001\002\000\012\004" +
    "\020\016\017\021\024\027\023\001\002\000\014\004\020" +
    "\016\017\021\024\027\023\033\uffef\001\002\000\004\033" +
    "\272\001\002\000\016\004\uffb5\016\uffb5\021\uffb5\023\uffb5" +
    "\027\uffb5\033\uffb5\001\002\000\016\004\ufff2\016\ufff2\021" +
    "\ufff2\023\ufff2\027\ufff2\033\ufff2\001\002\000\004\002\ufffe" +
    "\001\002\000\004\030\ufffb\001\002\000\004\030\301\001" +
    "\002\000\004\031\311\001\002\000\006\031\uffaa\035\305" +
    "\001\002\000\006\004\302\031\uffa9\001\002\000\004\036" +
    "\303\001\002\000\004\004\304\001\002\000\006\031\uffa7" +
    "\035\uffa7\001\002\000\004\004\306\001\002\000\004\036" +
    "\307\001\002\000\004\004\310\001\002\000\006\031\uffa8" +
    "\035\uffa8\001\002\000\004\036\312\001\002\000\004\004" +
    "\313\001\002\000\004\032\uffab\001\002\000\004\030\315" +
    "\001\002\000\004\031\316\001\002\000\004\032\317\001" +
    "\002\000\014\004\ufff0\016\ufff0\021\ufff0\027\ufff0\033\ufff0" +
    "\001\002\000\014\004\020\016\017\021\024\027\023\033" +
    "\uffa2\001\002\000\004\033\ufff9\001\002\000\014\004\020" +
    "\016\017\021\024\027\023\033\ufffa\001\002\000\004\033" +
    "\uffef\001\002\000\004\033\325\001\002\000\004\002\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\004\003\003\001\001\000\012\005" +
    "\010\045\011\046\007\047\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\010\045" +
    "\273\046\007\047\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\014\001\001\000" +
    "\030\007\025\010\026\013\020\014\030\023\027\024\015" +
    "\037\032\043\031\052\024\054\021\055\033\001\001\000" +
    "\002\001\001\000\004\034\234\001\001\000\006\015\221" +
    "\056\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\177\056\200\001\001\000\006" +
    "\053\170\056\171\001\001\000\024\010\167\013\020\014" +
    "\030\023\027\024\015\037\032\043\031\054\021\055\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\016\045\017\060\020\052\021\057\022\043\026" +
    "\054\027\051\030\036\031\046\032\042\054\044\055\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\120\021\143\032\145\054\142" +
    "\055\033\001\001\000\002\001\001\000\004\025\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\107\017\106\054\105\055\033\001\001\000" +
    "\032\016\064\017\070\020\065\021\067\022\063\026\066" +
    "\027\051\030\061\031\046\032\062\054\044\055\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\016\045" +
    "\017\060\020\052\021\057\022\077\026\054\027\051\030" +
    "\036\031\046\032\042\054\044\055\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\107\017\106\001\001\000\004\017\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\114\017\111\026\113\027\051\054\112" +
    "\055\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\114\017\111" +
    "\026\116\027\051\054\112\055\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\106" +
    "\001\001\000\004\017\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\126\017\124\001\001\000\002" +
    "\001\001\000\032\016\045\017\060\020\052\021\057\022" +
    "\130\026\054\027\051\030\036\031\046\032\042\054\044" +
    "\055\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\140\017\135" +
    "\026\136\027\137\054\112\055\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\134\001\001\000\002" +
    "\001\001\000\006\017\120\021\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\045\017\070\020\052" +
    "\021\067\022\063\026\054\027\051\030\146\031\046\032" +
    "\062\054\044\055\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\124\021\151\001" +
    "\001\000\002\001\001\000\020\017\156\021\157\030\160" +
    "\031\153\032\162\054\155\055\033\001\001\000\002\001" +
    "\001\000\014\017\120\021\143\032\163\054\142\055\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\045\017\070\020\052" +
    "\021\067\022\063\026\054\027\051\030\061\031\046\032" +
    "\062\054\044\055\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\175\001\001\000\002" +
    "\001\001\000\032\016\045\017\060\020\052\021\057\022" +
    "\173\026\054\027\051\030\036\031\046\032\042\054\044" +
    "\055\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\202\001\001" +
    "\000\002\001\001\000\020\017\156\021\157\030\160\031" +
    "\211\032\162\054\155\055\033\001\001\000\002\001\001" +
    "\000\004\011\204\001\001\000\004\036\205\001\001\000" +
    "\026\007\206\010\026\013\020\014\030\023\027\024\015" +
    "\037\032\043\031\054\021\055\033\001\001\000\026\010" +
    "\167\012\207\013\020\014\030\023\027\024\015\037\032" +
    "\043\031\054\021\055\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\045\017\060\020\052\021\057\022\214\026\054\027" +
    "\051\030\036\031\046\032\042\054\044\055\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\232\014\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\045\017\060\020\052\021\057\022\225\026\054\027\051" +
    "\030\036\031\046\032\042\054\044\055\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\016\045\017\060\020\052\021\057\022\231\026\054\027" +
    "\051\030\036\031\046\032\042\054\044\055\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\221\056" +
    "\223\001\001\000\002\001\001\000\004\011\236\001\001" +
    "\000\004\036\237\001\001\000\026\007\240\010\026\013" +
    "\020\014\030\023\027\024\015\037\032\043\031\054\021" +
    "\055\033\001\001\000\026\010\167\012\241\013\020\014" +
    "\030\023\027\024\015\037\032\043\031\054\021\055\033" +
    "\001\001\000\002\001\001\000\010\033\245\040\243\056" +
    "\244\001\001\000\012\033\262\035\261\041\260\056\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\247\001\001\000\004\034\250\001\001\000\002\001\001" +
    "\000\004\011\252\001\001\000\004\036\253\001\001\000" +
    "\026\007\254\010\026\013\020\014\030\023\027\024\015" +
    "\037\032\043\031\054\021\055\033\001\001\000\026\010" +
    "\167\012\255\013\020\014\030\023\027\024\015\037\032" +
    "\043\031\054\021\055\033\001\001\000\002\001\001\000" +
    "\010\033\245\040\257\056\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\265\001\001\000\004\035\266" +
    "\001\001\000\026\007\267\010\026\013\020\014\030\023" +
    "\027\024\015\037\032\043\031\054\021\055\033\001\001" +
    "\000\026\010\167\012\270\013\020\014\030\023\027\024" +
    "\015\037\032\043\031\054\021\055\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\313\001\001\000\006\050\276\051\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\317\001\001\000\032\006\322\007\321" +
    "\010\026\013\020\014\030\023\027\024\015\037\032\043" +
    "\031\054\021\055\033\056\320\001\001\000\002\001\001" +
    "\000\024\010\167\013\020\014\030\023\027\024\015\037" +
    "\032\043\031\054\021\055\033\001\001\000\004\012\323" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private Backend backend;
  private Lexico lexico;
  private GeneratorC3A c3a_g;
  private GeneratorAssembler assembler;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(Lexico lexico, ComplexSymbolFactory sf){
    super(lexico, sf);
    this.lexico = lexico;
    this.symbolsTable = new SymbolsTable();
    this.backend = new Backend(symbolsTable);
    this.c3a_g = new GeneratorC3A(backend);
    this.assembler = new GeneratorAssembler(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  private void closeErrorFiles(){
    SymbolsTableError.closeFile();
    SyntaxError.closeFile();
    SemanticError.closeFile();
    LexicalError.closeFile();
  }

  public void syntax_error(Symbol s) {
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      throw new SyntaxError((ComplexSymbol) s, expected_names, true);
    } catch (Exception e) {
		};
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      lexico.closeTokensFile((s.left+1), (s.right+1));

      throw new SyntaxError((ComplexSymbol) s, expected_names, false);
    } catch (Exception e) {
      closeErrorFiles();
		};
  }

  private void initTypes() {
    try{
      //init NUMBER type
      Type number_type = new Type(Tipo.dtype, TipoSubyacente.TS_NUMBER, 4, Integer.MIN_VALUE, Integer.MIN_VALUE);
      symbolsTable.add("number", number_type);

      // init String type
      Type str_type = new Type(Tipo.dtype, TipoSubyacente.TS_STRING, 2, 0, 0);
      symbolsTable.add("string", str_type);

      //init BOOLEAN type
      Type bool_type = new Type(Tipo.dtype,TipoSubyacente.TS_BOOLEAN,2,0,1);
      symbolsTable.add("boolean",bool_type);

      //init VOID type
      Type void_type = new Type(Tipo.dtype, TipoSubyacente.TS_NULL, 0, 0, 0);
      symbolsTable.add("void", void_type);
    }catch (SymbolsTableError e){
      closeErrorFiles();
    }
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolStarts start_val = (SymbolStarts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DECLARE_FUNCTIONS 
            {
              SymbolStarts RESULT =null;
		
                            // close symbolsTable.txt file
                              symbolsTable.closeSymbolsTableFiles();
                              backend.storeTables();

                              //NOT OPTIMIZED CODE
                              c3a_g.savec3aInFile(false);
                              assembler.generateAssembler(false);

                              /*
                               OPTIMIZED CODE, NOT IMPLEMENTED
                              c3a_g.optimize();
                              c3a_g.savec3aInFile(true);
                              assembler.generateAssembler(true);
                              */

                              closeErrorFiles();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              SymbolInit RESULT =null;
		
                              initTypes();
                              RESULT = new SymbolInit();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_FUNCTIONS ::= DEFINE_FUNCTION DECLARE_FUNCTIONS 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_FUNCTIONS ::= MAIN 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= inst_function inst_main M_MAIN lparen rparen lbracket BLOCK_IN MAIN_INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolMain RESULT =null;
		
                              c3a_g.generateC3aInstr(
                                Code.rtn,
                                null,
                                null,
                                "PROC_main"
                              );

                              RESULT = new SymbolMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // M_MAIN ::= 
            {
              SymbolMMain RESULT =null;
		

                              String backId = backend.addMain();
                              Type fun_type = new Type(backId, Tipo.dfun, null);
                              symbolsTable.add("main", fun_type);

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                "main"
                              );

                              c3a_g.generateC3aInstr(
                                Code.pmb,
                                null,
                                null,
                                backId
                              );

                              RESULT = new SymbolMMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              SymbolMainInstr RESULT =null;
		
                              RESULT = new SymbolMainInstr();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN_INSTRUCTIONS ::= EMPTY 
            {
              SymbolMainInstr RESULT =null;
		
                              RESULT = new SymbolMainInstr();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= DECLARATIONS semicolon 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= OPERATOR_ASSIG semicolon 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= INSTRUCTION_OUT semicolon 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= CALL_FUNCTION semicolon 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK_IN ::= 
            {
              SymbolBlockIn RESULT =null;
		
                              symbolsTable.enterBlock();
                              RESULT = new SymbolBlockIn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IN",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK_OUT ::= 
            {
              SymbolBlockOut RESULT =null;
		
                              try{
                                symbolsTable.leaveBlock();
                                RESULT = new SymbolBlockOut();
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_OUT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS ::= id comma DECLARATIONS 
            {
              SymbolDeclarations RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location declarationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDeclarations declarations = (SymbolDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type = declarations.getType();
                                String backId;

                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String value = declarations.getValue();
                                  backId = backend.addStrVar(var_id, type.getSize(), value);
                                }else{
                                  backId = backend.addVar(var_id, type.getSize(), type.getTipoSubyacente(), false);
                                }

                                type.setBackendId(backId);

                                symbolsTable.add(var_id, type);

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  declarations.getVarId(),
                                  null,
                                  backId
                                );

                                  RESULT = declarations;

                              }catch(SymbolsTableError e){
                                String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATIONS ::= DECLARATION 
            {
              SymbolDeclarations RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDeclarations declaration = (SymbolDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = declaration;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATION ::= id CONSTANT two_points id op_assig VALUE 
            {
              SymbolDeclarations RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolConstant constant = (SymbolConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {

                                boolean isConst = constant != null ? constant.getIsConst() : false;

                                Type type = symbolsTable.get(type_id);

                                if(type == null || type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_STRING ){
                                    String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                    String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                    String message = "Invalid subjacent type" + " from "+from+" to "+to;
                                    throw new SemanticError(message);
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                if(value.getTipo() == Tipo.dnull && type.getTipoSubyacente() != value.getTipoSubyacente()){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                if(value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Type var_type;

                                if(isConst){
                                  var_type = new Type(Tipo.dconst, type_id, value.getValue());
                                }
                                else{
                                  var_type = new Type(Tipo.dvar, type_id);
                                }

                                int size = type.getSize();
                                if(value.getIsString()){
                                  size = value.getStringSize();
                                }

                                String var_id;
                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String str_value = (String) value.getValue();
                                  var_id = backend.addStrVar(id_var, type.getSize(), str_value);
                                }else{
                                  var_id = backend.addVar(id_var, type.getSize(), type.getTipoSubyacente(), false);
                                }

                                var_type.setBackendId(var_id);

                                String val_id = value.getVarId();
                                symbolsTable.add(id_var, var_type);

                                SymbolDeclarations symDcls;
                                if(value.getIsString()){
                                  symDcls = new SymbolDeclarations(val_id, var_type, (String) value.getValue());
                                }else{
                                  symDcls = new SymbolDeclarations(val_id, var_type);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_STRING){
                                  c3a_g.generateC3aInstr(
                                    Code.copy,
                                    val_id,
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = symDcls;
                              }catch(SymbolsTableError e){
                                String from = id_varxleft.getLine() + ":" + id_varxleft.getColumn();
                                String to = id_varxright.getLine() + ":" + id_varxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTANT ::= constant 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONSTANT ::= EMPTY 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERATOR_ASSIG ::= id op_assig VALUE 
            {
              SymbolOperatorAssignation RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type varType = symbolsTable.get(var_id);
                                String type_id = varType.getTypeName();

                                if(varType.getTipo() == Tipo.dconst){
                                  String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = "Cant assign value to constant" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                if(value.getTipo() == Tipo.dnull && varType.getTipoSubyacente() == value.getTipoSubyacente()){
                                  String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                if(value.getTipo() != Tipo.dnull && value.getTypeName() != type_id){
                                  String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.getVarId(),
                                  null,
                                  varType.getBackendId()
                                );

                                RESULT = new SymbolOperatorAssignation();
                              }catch(SymbolsTableError e){
                                String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARITH_OP ::= op_arithmetical_b 
            {
              SymbolArithOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArithOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARITH_OP ::= op_arithmetical_c 
            {
              SymbolArithOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArithOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARITHMETICAL_OPERATION ::= ARITHMETICAL_VALUE ARITH_OP ARITHMETICAL_VALUE 
            {
              SymbolArithOperation RESULT =null;
		Location arith_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location arith_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolArithValue arith_val1 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArithOperator op = (SymbolArithOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location arith_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArithValue arith_val2 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                SymbolArithOperation sym;
                                boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                                Code op_code;

                                switch(op.getOperator()){
                                  case "+" :
                                    op_code = Code.add;
                                    break;
                                  case "-" :
                                    op_code = Code.sub;
                                    break;
                                  case "*" :
                                    op_code = Code.prod;
                                    break;
                                  case "/" :
                                    op_code = Code.div;
                                    break;
                                  case "%" :
                                    op_code = Code.mod;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid arithmetic operator from "+from+" to "+to;
                                    throw new SemanticError(message);
                                }

                                Integer value = null;
                                if(allConst) {
                                  Integer val1 = (Integer) arith_val1.getValue();
                                  Integer val2 = (Integer) arith_val2.getValue();

                                  switch(op.getOperator()){
                                    case "+" :
                                      value = val1 + val2;
                                      break;
                                    case "-" :
                                      value = val1 - val2;
                                      break;
                                    case "*" :
                                      value = val1 * val2;
                                      break;
                                    case "/" :
                                      if(val2 == 0){
                                        String from = arith_val2xleft.getLine() + ":" + arith_val2xleft.getColumn();
                                        String to = arith_val2xright.getLine() + ":" + arith_val2xright.getColumn();
                                        String message = "Can not divide by zero (0)" + " from "+from+" to "+to;
                                        throw new SemanticError(message);
                                      }
                                      value = val1 / val2;
                                      break;
                                    case "%" :
                                      value = val1 % val2;
                                      break;
                                  }
                                }

                                Type type_number = symbolsTable.get("number");

                                String var_id = backend.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  arith_val1.getVarId(),
                                  arith_val2.getVarId(),
                                  var_id
                                );

                                if(allConst){
                                  sym = new SymbolArithOperation(var_id, value);
                                }
                                else{
                                  sym = new SymbolArithOperation(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARITHMETICAL_OPERATION ::= op_arithmetical_b lparen ARITHMETICAL_OPERATION rparen 
            {
              SymbolArithOperation RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                SymbolArithOperation sym = arith_op;
                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  if(arith_op.getIsConst()){
                                    Integer value = - arith_op.getValue().intValue();
                                    sym = new SymbolArithOperation(arith_op.getVarId(), value);
                                  }else{
                                    sym = new SymbolArithOperation(var_id);
                                  }

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    arith_op.getVarId(),
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARITHMETICAL_OPERATION ::= lparen ARITHMETICAL_OPERATION rparen 
            {
              SymbolArithOperation RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = arith_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NUMBER_VALUE ::= number 
            {
              SymbolNumberVal RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value = Integer.valueOf(n_val);
                              RESULT = new SymbolNumberVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NUMBER_VALUE ::= lparen NUMBER_VALUE rparen 
            {
              SymbolNumberVal RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = n_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NUMBER_VALUE ::= op_arithmetical_b NUMBER_VALUE 
            {
              SymbolNumberVal RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolNumberVal sym = n_val;
                              if(op.equals("-")){
                                Integer value = - n_val.getValue().intValue();
                                sym = new SymbolNumberVal(value);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARITHMETICAL_VALUE ::= NUMBER_VALUE 
            {
              SymbolArithValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Integer value = n_val.getValue();

                              Type type_number = symbolsTable.get("number");

                              String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolArithValue(var_id, value);
                            }catch(SymbolsTableError e){
                              throw new SemanticError(e.getMessage());
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARITHMETICAL_VALUE ::= ID_VALUE 
            {
              SymbolArithValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Tipo main_var_type = id_val.getTipo();

                              if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }

                              Type var_dtype = symbolsTable.get(id_val.getTypeName());

                              if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "Invalid subjacent type" + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }

                              SymbolArithValue sym;
                              String var_id = id_val.getId();

                              if(main_var_type == Tipo.dconst){
                                Integer value = (Integer) id_val.getValue();
                                sym = new SymbolArithValue(var_id, value);
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;
                            }catch(SymbolsTableError e){
                              throw new SemanticError(e.getMessage());
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARITHMETICAL_VALUE ::= ARITHMETICAL_OPERATION 
            {
              SymbolArithValue RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            SymbolArithValue sym;
                            if(arith_op.getIsConst()){
                              sym = new SymbolArithValue(arith_op.getVarId(), arith_op.getValue());
                            }else{
                              sym = new SymbolArithValue(arith_op.getVarId());
                            }

                            RESULT = sym;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARITHMETICAL_VALUE ::= CALL_FUNCTION 
            {
              SymbolArithValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }

                              String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              RESULT = new SymbolArithValue(var_id);
                            }catch(SymbolsTableError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new SemanticError(message);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARITHMETICAL_VALUE ::= op_arithmetical_b CALL_FUNCTION 
            {
              SymbolArithValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }

                              String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              if(op.equals("-")){
                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = new SymbolArithValue(var_id);
                            }catch(SymbolsTableError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new SemanticError(message);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID_VALUE ::= id 
            {
              SymbolIdVal RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type id_type = symbolsTable.get(id_val);
                                String var_id = id_type.getBackendId();
                                SymbolIdVal sym = new SymbolIdVal(var_id, id_type.getTipo(), id_type.getTypeName());
                                if(id_type.getTipo() == Tipo.dconst){
                                  sym = new SymbolIdVal(var_id, id_type.getTipo(), id_type.getTypeName(), id_type.getValue());
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID_VALUE ::= lparen ID_VALUE rparen 
            {
              SymbolIdVal RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = id_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID_VALUE ::= op_logical_not ID_VALUE 
            {
              SymbolIdVal RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{

                                SymbolIdVal sym;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  id_val.getId(),
                                  null,
                                  var_id
                                );

                                if(id_val.getTipo() == Tipo.dconst){
                                  Boolean value = !((Boolean) id_val.getValue()).booleanValue();
                                  sym = new SymbolIdVal(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                }else{
                                  sym = new SymbolIdVal(var_id, id_val.getTipo(), id_val.getTypeName());
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID_VALUE ::= op_arithmetical_b ID_VALUE 
            {
              SymbolIdVal RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                SymbolIdVal sym = id_val;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    id_val.getId(),
                                    null,
                                    var_id
                                  );

                                  if(id_val.getTipo() == Tipo.dconst){
                                    Integer value = -((Integer) id_val.getValue()).intValue();
                                    sym = new SymbolIdVal(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                  }else{
                                    sym = new SymbolIdVal(var_id, id_val.getTipo(), id_val.getTypeName());
                                  }
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRING_VALUE ::= string 
            {
              SymbolStringVal RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String string_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new SymbolStringVal(string_val);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRING_VALUE ::= lparen STRING_VALUE rparen 
            {
              SymbolStringVal RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolStringVal string_val = (SymbolStringVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = string_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALUE ::= ID_VALUE 
            {
              SymbolValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;

                              String var_id = id_val.getId();

                              if(id_val.getTipo() == Tipo.dconst){
                                sym = new SymbolValue(var_id, id_val.getTipo(), id_val.getTypeName(), id_val.getValue());
                              }
                              else {
                                sym = new SymbolValue(var_id, id_val.getTipo(), id_val.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALUE ::= STRING_VALUE 
            {
              SymbolValue RESULT =null;
		Location str_valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location str_valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolStringVal str_value = (SymbolStringVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String value = str_value.getString().replace("\"", "");
                                Type type_string = symbolsTable.get("string");

                                if (value.length() > 1000){
                                  String from = str_valuexleft.getLine() + ":" + str_valuexleft.getColumn();
                                  String to = str_valuexright.getLine() + ":" + str_valuexright.getColumn();
                                  String message = "String must be shorter than 1000 characters " + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                // string size in bytes
                                int stringSize = value.length() * type_string.getSize();

                                SymbolValue sym = new SymbolValue(value, stringSize);

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALUE ::= BOOLEAN_VALUE 
            {
              SymbolValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_bool = symbolsTable.get("boolean");

                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolValue(var_id, TipoSubyacente.TS_BOOLEAN, value);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALUE ::= NUMBER_VALUE 
            {
              SymbolValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Integer value = n_val.getValue();

                                Type type_number = symbolsTable.get("number");

                                String var_id = backend.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  Integer.toString(value),
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolValue(var_id, TipoSubyacente.TS_NUMBER, value);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALUE ::= VALUE_COMPARISON 
            {
              SymbolValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String id = comp_val.getVarId();

                              if(comp_val.getIsConst()){
                                Boolean value = comp_val.getValue();
                                sym = new SymbolValue(id, TipoSubyacente.TS_BOOLEAN, value);
                              }else{
                                sym = new SymbolValue(id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              SymbolValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                SymbolValue sym;

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new SymbolValue(var_id, TipoSubyacente.TS_BOOLEAN, value);
                                }else{
                                  sym = new SymbolValue(var_id, TipoSubyacente.TS_BOOLEAN);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALUE ::= ARITHMETICAL_OPERATION 
            {
              SymbolValue RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new SymbolValue(var_id, TipoSubyacente.TS_NUMBER, arith_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, TipoSubyacente.TS_NUMBER);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= BOOLEAN_OPERATION 
            {
              SymbolValue RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new SymbolValue(var_id, TipoSubyacente.TS_BOOLEAN, bool_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE ::= CALL_FUNCTION 
            {
              SymbolValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                  String from = call_fnxleft.getLine() + ":" +call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Function call : "+call_fn.getFunctionId() + " does not return any value" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new SymbolValue(var_id, Tipo.dfun, fn_type.getTypeName());
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUE ::= instr_read lparen rparen 
            {
              SymbolValue RESULT =null;
		
                              try{
                                Type number_type = symbolsTable.get("number");
                                String var_id = backend.addTempVar(number_type.getSize(), number_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.input,
                                  null,
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolValue(var_id, number_type.getTipoSubyacente());
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOOLEAN_OPERATION ::= BOOLEAN_OP_VALUE op_logical BOOLEAN_OP_VALUE 
            {
              SymbolBoolOp RESULT =null;
		Location bool_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bool_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolBoolOpValue bool_val1 = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bool_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolOpValue bool_val2 = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                SymbolBoolOp sym;
                                Code op_code;

                                switch(op){
                                  case "&&":
                                    op_code = Code.and;
                                    break;
                                  case "||":
                                    op_code = Code.or;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid boolean operator" + " from "+from+" to "+to;
                                    throw new SemanticError(message);
                                }

                                boolean allConst = bool_val1.getIsConst() && bool_val2.getIsConst();
                                Boolean value = null;

                                if(allConst){
                                  Boolean val1 = (Boolean) bool_val1.getValue();
                                  Boolean val2 = (Boolean) bool_val2.getValue();
                                  switch(op){
                                  case "&&":
                                    value = val1 && val2;
                                    break;
                                  case "||":
                                    value = val1 || val2;
                                    break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                String val1_id = bool_val1.getVarId();
                                String val2_id = bool_val2.getVarId();
                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1_id,
                                  val2_id,
                                  var_id
                                );

                                if(allConst){
                                  sym = new SymbolBoolOp(var_id, value);
                                }else{
                                  sym = new SymbolBoolOp(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOOLEAN_OPERATION ::= lparen BOOLEAN_OPERATION rparen 
            {
              SymbolBoolOp RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOOLEAN_OPERATION ::= op_logical_not lparen BOOLEAN_OPERATION rparen 
            {
              SymbolBoolOp RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                SymbolBoolOp sym;
                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  bool_op.getVarId(),
                                  null,
                                  var_id
                                );

                                if(bool_op.getIsConst()){
                                  Boolean value = ! bool_op.getValue().booleanValue();
                                  sym = new SymbolBoolOp(bool_op.getVarId(), value);
                                }else{
                                  sym = new SymbolBoolOp(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOOLEAN_OP_VALUE ::= BOOLEAN_VALUE 
            {
              SymbolBoolOpValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_boolean = symbolsTable.get("boolean");

                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolBoolOpValue(var_id, value);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOOLEAN_OP_VALUE ::= ID_VALUE 
            {
              SymbolBoolOpValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Tipo main_var_type = id_val.getTipo();
                                if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Type var_dtype = symbolsTable.get(id_val.getTypeName());

                                if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "Invalid subjacent type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                SymbolBoolOpValue sym;
                                String var_id = id_val.getId();

                                if(main_var_type == Tipo.dconst){
                                  Boolean value = (Boolean) id_val.getValue();
                                  sym = new SymbolBoolOpValue(var_id, value);
                                }else{
                                  sym = new SymbolBoolOpValue(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOOLEAN_OP_VALUE ::= BOOLEAN_OPERATION 
            {
              SymbolBoolOpValue RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOpValue sym;
                              if(bool_op.getIsConst()){
                                sym = new SymbolBoolOpValue(bool_op.getVarId(), bool_op.getValue());
                              }else{
                                sym = new SymbolBoolOpValue(bool_op.getVarId());
                              }
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOOLEAN_OP_VALUE ::= VALUE_COMPARISON 
            {
              SymbolBoolOpValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOpValue sym;
                              String id = new String(comp_val.getVarId());
                              if(comp_val.getIsConst()){
                                sym = new SymbolBoolOpValue(id, comp_val.getValue());
                              }else{
                                sym = new SymbolBoolOpValue(id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BOOLEAN_OP_VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              SymbolBoolOpValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                SymbolBoolOpValue sym;
                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new SymbolBoolOpValue(var_id, value);
                                }else{
                                  sym = new SymbolBoolOpValue(var_id);
                                }
                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BOOLEAN_OP_VALUE ::= CALL_FUNCTION 
            {
              SymbolBoolOpValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_BOOLEAN + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new SymbolBoolOpValue(var_id);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOOLEAN_OP_VALUE ::= op_logical_not CALL_FUNCTION 
            {
              SymbolBoolOpValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolBoolOpValue(var_id);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BOOLEAN_VALUE ::= bool 
            {
              SymbolBoolVal RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              RESULT = new SymbolBoolVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BOOLEAN_VALUE ::= op_logical_not BOOLEAN_VALUE 
            {
              SymbolBoolVal RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = ! bool_val.getValue().booleanValue();
                              RESULT = new SymbolBoolVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOOLEAN_VALUE ::= lparen BOOLEAN_VALUE rparen 
            {
              SymbolBoolVal RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              SymbolValueComparison RESULT =null;
		Location val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolValue val1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValue val2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                SymbolValueComparison sym;

                                Tipo type1 = val1.getTipo();
                                TipoSubyacente subType1;

                                if(val1.getTipo() == Tipo.dnull){
                                  subType1 = val1.getTipoSubyacente();
                                }else{
                                  if(type1 != Tipo.dvar && type1 != Tipo.dconst && type1 != Tipo.darg && type1 != Tipo.dfun) {
                                    String from = val1xleft.getLine() + ":" + val1xleft.getColumn();
                                    String to = val1xright.getLine() + ":" + val1xright.getColumn();
                                    String message = "Value 1 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new SemanticError(message);
                                  }
                                  Type dtype_type = symbolsTable.get(val1.getTypeName());
                                  subType1 = dtype_type.getTipoSubyacente();
                                }
                                // SAME FOR VALUE2
                                Tipo type2 = val2.getTipo();
                                TipoSubyacente subType2;

                                if(val2.getTipo() == Tipo.dnull){
                                  subType2 = val2.getTipoSubyacente();
                                }else{
                                  if(type2 != Tipo.dvar && type2 != Tipo.dconst && type2 != Tipo.darg && type2 != Tipo.dfun) {
                                    String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                    String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                    String message = "Value 2 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new SemanticError(message);
                                  }
                                  Type dtype_type = symbolsTable.get(val2.getTypeName());
                                  subType2 = dtype_type.getTipoSubyacente();
                                }

                                //Check same subtype
                                if(subType1 != subType2) {
                                  String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                  String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                  String message = "Value 1 subtype is different from value 2" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Code op_code = Code.EQ;
                                switch(op){
                                  case "==":
                                    op_code = Code.EQ;
                                    break;
                                  case "!=":
                                    op_code = Code.NE;
                                    break;
                                  case "<":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new SemanticError(message);
                                    }
                                    op_code = Code.LT;
                                    break;
                                  case "<=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new SemanticError(message);
                                    }
                                    op_code = Code.LE;
                                    break;
                                  case ">":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new SemanticError(message);
                                    }
                                    op_code = Code.GT;
                                    break;
                                  case ">=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new SemanticError(message);
                                    }
                                    op_code = Code.GE;
                                    break;
                                }

                                boolean allConst = val1.getIsConst() && val2.getIsConst();

                                Boolean val = null;
                                if(allConst){
                                  switch(op){
                                    case "==":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = ((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                      }
                                      break;
                                    case "!=":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = !((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                      }
                                      break;

                                    // only integer operators
                                    case "<":
                                      val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                      break;
                                    case "<=":
                                      val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                      break;
                                    case ">":
                                      val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                      break;
                                    case ">=":
                                      val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                      break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                if(allConst){
                                  sym = new SymbolValueComparison(var_id, val);
                                }else{
                                  sym = new SymbolValueComparison(var_id);
                                }

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1.getVarId(),
                                  val2.getVarId(),
                                  var_id
                                );

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALUE_COMPARISON ::= lparen VALUE_COMPARISON rparen 
            {
              SymbolValueComparison RESULT =null;
		Location cmp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cmp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValueComparison cmp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = cmp_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND ::= lparen BOOLEAN_OP_VALUE rparen 
            {
              SymbolCondition RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolOpValue bool_val = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                String var_id = bool_val.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);


                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new SymbolCondition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND_T ::= 
            {
              SymbolConditionTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionTrue();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND_F ::= 
            {
              SymbolConditionFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionFalse();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCTION_IF ::= inst_if COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF ELSE 
            {
              SymbolInstructionIf RESULT =null;
		
                              RESULT = new SymbolInstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // M_END ::= EMPTY 
            {
              SymbolMEnd RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMEnd(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELIF ::= M_END inst_elif COND_F COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF 
            {
              SymbolElif RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELIF ::= 
            {
              SymbolElif RESULT =null;
		
                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELSE ::= M_END inst_else lbracket BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolElse RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELSE ::= COND_F 
            {
              SymbolElse RESULT =null;
		
                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // M_WHILE ::= EMPTY 
            {
              SymbolMWhile RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMWhile(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCTION_WHILE ::= inst_while M_WHILE COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolInstructionWhile RESULT =null;
		Location mwhilexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mwhilexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolMWhile mwhile = (SymbolMWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new SymbolInstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CALL_FUNCTION ::= id lparen rparen 
            {
              SymbolCallFunction RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // Check if function and has params
                                int num_params = symbolsTable.getNumParams(fun_id);
                                if(num_params > 0 ){
                                  String from = lpxleft.getLine() + ":" + lpxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + num_params + " parameters" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String backId = fun_type.getBackendId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  0 + "",
                                  null,
                                  backId
                                );

                                RESULT = new SymbolCallFunction(fun_id, backId);
                              }catch(SymbolsTableError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CALL_FUNCTION ::= CALL_BODY rparen 
            {
              SymbolCallFunction RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                int body_params = body.getNumParams();
                                String fun_id = body.getFunId();
                                int fun_params = symbolsTable.getNumParams(fun_id);

                                if(fun_params != body_params){
                                  String from = bodyxleft.getLine() + ":" + bodyxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + fun_params + " parameters" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                String fun_backId = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  fun_params + "",
                                  null,
                                  fun_backId
                                );



                                RESULT = new SymbolCallFunction(fun_id, fun_backId);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CALL_BODY ::= CALL_BODY comma VALUE 
            {
              SymbolCallBody RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String fun_id = body.getFunId();
                                int num_params = body.getNumParams();
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param "+ num_params + " from "+from+" to "+to;
                                    throw new SemanticError(message);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, num_params);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if(paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                String fun_back_id = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new SymbolCallBody(fun_id, fun_back_id, num_params+1);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CALL_BODY ::= id lparen VALUE 
            {
              SymbolCallBody RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param 0" + " from "+from+" to "+to;
                                    throw new SemanticError(message);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, 0);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if(paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String fun_back_id = fun_type.getBackendId();

                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new SymbolCallBody(fun_id, fun_back_id, 0+1);
                              }catch(SymbolsTableError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCTION_OUT ::= instr_print lparen VALUE rparen 
            {
              SymbolInstructionOut RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                String var_id = value.getVarId();
                                TipoSubyacente subtype;

                                if(value.getTipo() == Tipo.dnull){
                                  subtype = value.getTipoSubyacente();
                                }else{
                                  Type var_type = symbolsTable.get(value.getTypeName());
                                  subtype = var_type.getTipoSubyacente();
                                }

                                if(value.getTipo() == Tipo.dnull && value.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  var_id = backend.addTempStrVar(value.getStringSize(), (String) value.getValue());
                                  c3a_g.generateC3aInstr(
                                    Code.output,
                                    subtype.toString(),
                                    (String) value.getValue(),
                                    var_id
                                  );
                                }else{
                                  c3a_g.generateC3aInstr(
                                    Code.output,
                                    subtype.toString(),
                                    null,
                                    var_id
                                  );
                                }
                                RESULT = new SymbolInstructionOut();
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFINE_FUNCTION ::= FUNCTION_INIT lbracket BLOCK_IN FUNCTION_INSTRUCTIONS FUNCTION_RETURN BLOCK_OUT rbracket 
            {
              SymbolDefFunction RESULT =null;
		Location fun_initxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location fun_initxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		SymbolFunInit fun_init = (SymbolFunInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location fun_retxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_retxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolFunReturn fun_ret = (SymbolFunReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              //check if fun type and return type are the same
                              if(fun_init.getTipoSubyacente() != fun_ret.getTipoSubyacente()) {
                                String from = fun_retxleft.getLine() + ":" + fun_retxleft.getColumn();
                                String to = fun_retxright.getLine() + ":" + fun_retxright.getColumn();
                                String message = "Invalid return type. Expected : "+fun_init.getTipoSubyacente()+", but got: "+fun_ret.getTipoSubyacente() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }

                              // no return value
                              if(fun_init.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  null,
                                  null,
                                  fun_init.getFunId()
                                );
                              }
                              // return value
                              else{

                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  fun_ret.getVarId(),
                                  null,
                                  fun_init.getFunId()
                                );
                              }

                              RESULT = new SymbolDefFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCTION_INIT ::= inst_function id FUNCTION_PARAMS rparen two_points id 
            {
              SymbolFunInit RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location fun_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fun_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolFunParams fun_params = (SymbolFunParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // check return type
                                Type return_fun_type = symbolsTable.get(type_id);
                                if(return_fun_type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Function declaration : invalid type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }
                                if(return_fun_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid return type : "+type_id+". Valid return types are : boolean or number" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                TipoSubyacente subType = return_fun_type.getTipoSubyacente();
                                ArrayList<Param> params = fun_params.getParams();
                                String backId = backend.addProc(fun_id, params.size(), 0, 0, subType);

                                Type fun_type = new Type(backId, Tipo.dfun, type_id);

                                symbolsTable.add(fun_id, fun_type);

                                // add params if it has
                                for(Param param : params){
                                  Type param_type = param.getType();
                                  TipoSubyacente param_subType = symbolsTable.get(param.getType().getTypeName()).getTipoSubyacente();
                                  String param_backId = backend.addVar(param.getVarId(), param.getSize(), param_subType, true);
                                  param_type.setBackendId(param_backId);
                                  symbolsTable.addParam(fun_id, param_backId, param.getVarId(), param_type);
                                }

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  backId
                                );

                                c3a_g.generateC3aInstr(
                                  Code.pmb,
                                  null,
                                  null,
                                  backId
                                );

                                RESULT = new SymbolFunInit(backId, subType);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INIT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCTION_PARAMS ::= FUNCTION_W_PARAMS 
            {
              SymbolFunParams RESULT =null;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFunWParams params = (SymbolFunWParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new SymbolFunParams(params.getParams());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCTION_PARAMS ::= lparen 
            {
              SymbolFunParams RESULT =null;
		
                              RESULT = new SymbolFunParams();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCTION_W_PARAMS ::= FUNCTION_W_PARAMS comma id two_points id 
            {
              SymbolFunWParams RESULT =null;
		Location prev_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location prev_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolFunWParams prev_params = (SymbolFunWParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Param param = new Param(id, param_type, type_type.getSize());

                                RESULT = new SymbolFunWParams(param, prev_params);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCTION_W_PARAMS ::= lparen id two_points id 
            {
              SymbolFunWParams RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new SemanticError(message);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Param param = new Param(id, param_type, type_type.getSize());

                                RESULT = new SymbolFunWParams(param);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new SemanticError(message);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCTION_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              SymbolFunInstructions RESULT =null;
		
                              RESULT = new SymbolFunInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCTION_INSTRUCTIONS ::= 
            {
              SymbolFunInstructions RESULT =null;
		
                              RESULT = new SymbolFunInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCTION_RETURN ::= inst_return VALUE semicolon 
            {
              SymbolFunReturn RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                // is literall
                                TipoSubyacente subType = null;
                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }

                                // is variable
                                if(value.getTipo() != Tipo.dnull){
                                  Type type_type = symbolsTable.get(value.getTypeName());
                                  subType = type_type.getTipoSubyacente();
                                }

                                RESULT = new SymbolFunReturn(value.getVarId(), subType);
                              }catch(SymbolsTableError e){
                                throw new SemanticError(e.getMessage());
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCTION_RETURN ::= EMPTY 
            {
              SymbolFunReturn RESULT =null;
		
                              RESULT = new SymbolFunReturn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EMPTY ::= 
            {
              SymbolEmpty RESULT =null;
		 RESULT = new SymbolEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
