
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import backend.BackTables;
import c3a.GeneratorC3A;
import c3a.InstructionC3A.Code;
import errores.CompilerError;
import errores.SymTabError;
import generatorAssembler.GeneratorAssembler;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import lexico.Lexico;
import core.*;
import symbolsTable.SymbolsTable;
import symbolsTable.Type;
import symbolsTable.Type.Tipo;
import symbolsTable.Type.TipoSubyacente;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\050\004\000\002\050\003\000\002\005\014" +
    "\000\002\004\002\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\011\002\000\002\012\002\000\002\013\005\000" +
    "\002\013\003\000\002\061\007\000\002\062\005\000\002" +
    "\062\003\000\002\063\005\000\002\014\010\000\002\014" +
    "\010\000\002\015\003\000\002\015\003\000\002\023\005" +
    "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
    "\002\026\006\000\002\026\005\000\002\016\003\000\002" +
    "\016\005\000\002\016\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\004" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\020\003\000\002\020\005\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\064\005\000\002\065\005\000\002\065\003\000\002" +
    "\030\005\000\002\030\005\000\002\030\006\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\004\000\002\031\003\000\002\031\004\000" +
    "\002\021\003\000\002\021\004\000\002\021\005\000\002" +
    "\032\007\000\002\032\005\000\002\034\003\000\002\036" +
    "\002\000\002\035\002\000\002\037\014\000\002\033\003" +
    "\000\002\040\015\000\002\040\002\000\002\041\012\000" +
    "\002\041\003\000\002\042\003\000\002\046\013\000\002" +
    "\047\014\000\002\044\003\000\002\043\011\000\002\045" +
    "\003\000\002\057\005\000\002\057\004\000\002\060\005" +
    "\000\002\060\005\000\002\024\006\000\002\051\011\000" +
    "\002\052\010\000\002\053\003\000\002\053\003\000\002" +
    "\054\007\000\002\054\006\000\002\055\003\000\002\055" +
    "\002\000\002\056\005\000\002\056\003\000\002\066\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\023\uffff\001\002\000\004\023\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufffd\001\002\000\006\004\346\043\345\001" +
    "\002\000\004\023\010\001\002\000\004\002\000\001\002" +
    "\000\004\033\014\001\002\000\022\004\uffee\010\uffee\017" +
    "\uffee\022\uffee\024\uffee\026\uffee\030\uffee\034\uffee\001\002" +
    "\000\022\004\032\010\033\017\026\022\022\024\uff97\026" +
    "\040\030\034\034\uff97\001\002\000\004\037\343\001\002" +
    "\000\022\004\ufff3\010\ufff3\017\ufff3\022\ufff3\024\ufff3\026" +
    "\ufff3\030\ufff3\034\ufff3\001\002\000\022\004\ufff2\010\ufff2" +
    "\017\ufff2\022\ufff2\024\ufff2\026\ufff2\030\ufff2\034\ufff2\001" +
    "\002\000\004\037\342\001\002\000\014\004\uff94\007\uff94" +
    "\013\uff94\015\uff94\031\uff94\001\002\000\004\037\330\001" +
    "\002\000\022\004\ufff4\010\ufff4\017\ufff4\022\ufff4\024\ufff4" +
    "\026\ufff4\030\ufff4\034\ufff4\001\002\000\004\037\327\001" +
    "\002\000\014\004\072\007\067\013\173\015\140\031\200" +
    "\001\002\000\006\024\263\034\uff94\001\002\000\022\004" +
    "\032\010\033\017\026\022\022\024\uff98\026\040\030\034" +
    "\034\uff98\001\002\000\022\004\ufff7\010\ufff7\017\ufff7\022" +
    "\ufff7\024\ufff7\026\ufff7\030\ufff7\034\ufff7\001\002\000\014" +
    "\016\234\025\046\031\146\040\257\041\uff94\001\002\000" +
    "\004\033\245\001\002\000\004\031\242\001\002\000\004" +
    "\037\uffeb\001\002\000\004\037\241\001\002\000\006\032" +
    "\237\040\236\001\002\000\004\031\041\001\002\000\004" +
    "\004\044\001\002\000\004\037\222\001\002\000\004\032" +
    "\212\001\002\000\006\025\046\041\uff94\001\002\000\004" +
    "\041\050\001\002\000\004\041\uffe4\001\002\000\004\041" +
    "\uffe3\001\002\000\004\004\051\001\002\000\004\016\052" +
    "\001\002\000\024\004\072\005\056\006\053\007\067\013" +
    "\066\015\073\027\055\031\075\035\063\001\002\000\014" +
    "\011\uffd0\032\uffd0\036\uffd0\037\uffd0\040\uffd0\001\002\000" +
    "\014\012\uffbc\032\uffc7\036\uffc7\037\uffc7\040\uffc7\001\002" +
    "\000\004\031\210\001\002\000\020\011\uffdc\014\uffdc\015" +
    "\uffdc\032\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000\014" +
    "\012\uffbb\032\uffca\036\uffca\037\uffca\040\uffca\001\002\000" +
    "\004\037\uffe6\001\002\000\022\011\uffc6\012\uffb9\014\uffd6" +
    "\015\uffd6\032\uffc6\036\uffc6\037\uffc6\040\uffc6\001\002\000" +
    "\020\011\uffcb\014\uffd9\015\uffd9\032\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\001\002\000\022\004\072\005\056\006\053\007" +
    "\067\013\066\015\073\027\055\031\075\001\002\000\004" +
    "\012\171\001\002\000\004\037\uffe5\001\002\000\014\004" +
    "\072\007\067\013\160\015\140\031\163\001\002\000\020" +
    "\011\uffb7\012\uffb7\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\001\002\000\014\011\uffcd\032\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\001\002\000\006\014\151\015\152\001\002\000" +
    "\026\011\uffd4\012\uffd4\014\uffd4\015\uffd4\031\146\032\uffd4" +
    "\033\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002\000\014\004" +
    "\072\005\056\013\123\015\122\031\127\001\002\000\020" +
    "\011\uffc8\014\uffd7\015\uffd7\032\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\001\002\000\022\004\072\005\056\006\053\007\067" +
    "\013\066\015\073\027\055\031\075\001\002\000\014\012" +
    "\uffbe\032\uffcc\036\uffcc\037\uffcc\040\uffcc\001\002\000\020" +
    "\012\uffbd\014\uffd8\015\uffd8\032\uffce\036\uffce\037\uffce\040" +
    "\uffce\001\002\000\010\011\uffc7\012\uffbc\032\121\001\002" +
    "\000\010\011\uffca\012\uffbb\032\120\001\002\000\004\011" +
    "\115\001\002\000\012\011\uffcb\014\uffd9\015\uffd9\032\114" +
    "\001\002\000\006\011\uffcd\032\113\001\002\000\012\011" +
    "\uffc8\014\uffd7\015\uffd7\032\112\001\002\000\010\011\uffcc" +
    "\012\uffbe\032\111\001\002\000\014\011\uffce\012\uffbd\014" +
    "\uffd8\015\uffd8\032\110\001\002\000\024\011\uffd3\012\uffd3" +
    "\014\uffd3\015\uffd3\032\uffd3\033\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\001\002\000\020\011\uffb5\012\uffb5\032\uffb5\033\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\001\002\000\020\011\uffdd\014" +
    "\uffdd\015\uffdd\032\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002" +
    "\000\014\011\uffcf\032\uffcf\036\uffcf\037\uffcf\040\uffcf\001" +
    "\002\000\020\011\uffdb\014\uffdb\015\uffdb\032\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\001\002\000\022\004\072\005\056\006" +
    "\053\007\067\013\066\015\073\027\055\031\075\001\002" +
    "\000\004\032\117\001\002\000\020\011\uffb4\012\uffb4\032" +
    "\uffb4\033\uffb4\036\uffb4\037\uffb4\040\uffb4\001\002\000\020" +
    "\011\uffb3\012\uffb3\032\uffb3\033\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\001\002\000\020\011\uffc0\012\uffc0\032\uffc0\033\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\001\002\000\014\004\142\005" +
    "\056\013\123\015\122\031\144\001\002\000\012\004\142" +
    "\013\123\015\140\031\141\001\002\000\020\011\uffd5\014" +
    "\uffd5\015\uffd5\032\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002" +
    "\000\024\011\uffd1\012\uffd1\014\uffd1\015\uffd1\032\uffd1\033" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\001\002\000\020\011\uffda" +
    "\014\uffda\015\uffda\032\uffda\036\uffda\037\uffda\040\uffda\001" +
    "\002\000\014\004\072\005\056\013\123\015\073\031\134" +
    "\001\002\000\020\011\uffd6\014\uffd6\015\uffd6\032\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\001\002\000\010\014\uffd8\015\uffd8" +
    "\032\110\001\002\000\010\014\uffd7\015\uffd7\032\136\001" +
    "\002\000\010\014\uffd9\015\uffd9\032\114\001\002\000\014" +
    "\004\072\005\056\013\123\015\073\031\134\001\002\000" +
    "\010\014\uffd7\015\uffd7\032\112\001\002\000\020\011\uffde" +
    "\014\uffde\015\uffde\032\uffde\036\uffde\037\uffde\040\uffde\001" +
    "\002\000\024\011\uffd2\012\uffd2\014\uffd2\015\uffd2\032\uffd2" +
    "\033\uffd2\036\uffd2\037\uffd2\040\uffd2\001\002\000\012\004" +
    "\142\013\123\015\140\031\141\001\002\000\012\004\142" +
    "\013\123\015\140\031\141\001\002\000\024\011\uffd4\012" +
    "\uffd4\014\uffd4\015\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\001\002\000\004\032\110\001\002\000\014\004" +
    "\142\005\056\013\123\015\122\031\144\001\002\000\004" +
    "\032\114\001\002\000\024\004\072\005\056\006\053\007" +
    "\067\013\066\015\073\027\055\031\075\032\150\001\002" +
    "\000\006\032\uffa0\040\uffa0\001\002\000\024\011\uffa3\012" +
    "\uffa3\014\uffa3\015\uffa3\032\uffa3\033\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\001\002\000\014\004\uffe0\005\uffe0\013\uffe0\015" +
    "\uffe0\031\uffe0\001\002\000\014\004\uffe1\005\uffe1\013\uffe1" +
    "\015\uffe1\031\uffe1\001\002\000\014\004\072\005\056\013" +
    "\123\015\073\031\134\001\002\000\020\011\uffd8\014\uffd8" +
    "\015\uffd8\032\uffd8\036\uffd8\037\uffd8\040\uffd8\001\002\000" +
    "\020\011\uffd7\014\uffd7\015\uffd7\032\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\001\002\000\020\011\uffdf\014\151\015\152\032" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\001\002\000\020\011\uffd9" +
    "\014\uffd9\015\uffd9\032\uffd9\036\uffd9\037\uffd9\040\uffd9\001" +
    "\002\000\014\004\142\007\067\013\160\015\140\031\167" +
    "\001\002\000\020\011\uffb8\012\uffb8\032\uffb8\033\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\001\002\000\020\011\uffb6\012\uffb6" +
    "\032\uffb6\033\uffb6\036\uffb6\037\uffb6\040\uffb6\001\002\000" +
    "\022\004\072\005\056\006\053\007\067\013\066\015\073" +
    "\027\055\031\075\001\002\000\016\011\uffc9\012\uffba\032" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002\000\010\011\uffc7" +
    "\012\uffbc\032\166\001\002\000\020\011\uffbf\012\uffbf\032" +
    "\uffbf\033\uffbf\036\uffbf\037\uffbf\040\uffbf\001\002\000\014" +
    "\004\142\007\067\013\160\015\140\031\167\001\002\000" +
    "\004\032\111\001\002\000\014\004\072\007\067\013\173" +
    "\015\140\031\200\001\002\000\020\011\uffc1\012\uffc1\032" +
    "\uffc1\033\uffc1\036\uffc1\037\uffc1\040\uffc1\001\002\000\014" +
    "\004\072\007\067\013\160\015\140\031\163\001\002\000" +
    "\020\011\uffbd\012\uffbd\032\uffbd\033\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\001\002\000\020\011\uffb9\012\uffb9\032\uffb9\033" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\001\002\000\020\011\uffbe" +
    "\012\uffbe\032\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\001" +
    "\002\000\020\011\uffbc\012\uffbc\032\uffbc\033\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\001\002\000\022\004\072\005\056\006" +
    "\053\007\067\013\066\015\073\027\055\031\075\001\002" +
    "\000\020\011\uffbb\012\uffbb\032\uffbb\033\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\001\002\000\020\011\uffba\012\uffba\032\uffba" +
    "\033\uffba\036\uffba\037\uffba\040\uffba\001\002\000\006\036" +
    "\uffc2\040\uffc2\001\002\000\006\036\206\040\205\001\002" +
    "\000\022\004\072\005\056\006\053\007\067\013\066\015" +
    "\073\027\055\031\075\001\002\000\004\037\uffc4\001\002" +
    "\000\006\036\uffc3\040\uffc3\001\002\000\004\032\211\001" +
    "\002\000\014\011\uffc5\032\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\001\002\000\004\033\213\001\002\000\016\004\uffee\010" +
    "\uffee\017\uffee\022\uffee\026\uffee\030\uffee\001\002\000\016" +
    "\004\uffb1\010\uffb1\017\uffb1\022\uffb1\026\uffb1\030\uffb1\001" +
    "\002\000\016\004\032\010\033\017\026\022\022\026\040" +
    "\030\034\001\002\000\020\004\032\010\033\017\026\022" +
    "\022\026\040\030\034\034\uffed\001\002\000\022\004\ufff8" +
    "\010\ufff8\017\ufff8\022\ufff8\024\ufff8\026\ufff8\030\ufff8\034" +
    "\ufff8\001\002\000\004\034\221\001\002\000\022\004\uffa7" +
    "\010\uffa7\017\uffa7\022\uffa7\024\uffa7\026\uffa7\030\uffa7\034" +
    "\uffa7\001\002\000\014\004\uff94\007\uff94\013\uff94\015\uff94" +
    "\031\uff94\001\002\000\014\004\uffa6\007\uffa6\013\uffa6\015" +
    "\uffa6\031\uffa6\001\002\000\014\004\072\007\067\013\173" +
    "\015\140\031\200\001\002\000\010\012\171\033\uffb2\037" +
    "\uffb2\001\002\000\004\037\227\001\002\000\004\004\uff94" +
    "\001\002\000\004\004\233\001\002\000\004\004\uffa4\001" +
    "\002\000\004\032\uffa5\001\002\000\004\016\234\001\002" +
    "\000\022\004\072\005\056\006\053\007\067\013\066\015" +
    "\073\027\055\031\075\001\002\000\006\032\uffe2\037\uffe2" +
    "\001\002\000\022\004\072\005\056\006\053\007\067\013" +
    "\066\015\073\027\055\031\075\001\002\000\024\011\uffa2" +
    "\012\uffa2\014\uffa2\015\uffa2\032\uffa2\033\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\001\002\000\006\032\uffa1\040\uffa1\001\002" +
    "\000\022\004\ufff1\010\ufff1\017\ufff1\022\ufff1\024\ufff1\026" +
    "\ufff1\030\ufff1\034\ufff1\001\002\000\022\004\072\005\056" +
    "\006\053\007\067\013\066\015\073\027\055\031\075\001" +
    "\002\000\004\032\244\001\002\000\004\037\uff9f\001\002" +
    "\000\004\004\250\001\002\000\006\034\uffe8\037\uffe8\001" +
    "\002\000\006\034\254\037\253\001\002\000\004\041\251" +
    "\001\002\000\004\004\252\001\002\000\006\034\uffe7\037" +
    "\uffe7\001\002\000\004\004\250\001\002\000\004\004\255" +
    "\001\002\000\004\037\uffea\001\002\000\006\034\uffe9\037" +
    "\uffe9\001\002\000\004\004\261\001\002\000\004\037\uffec" +
    "\001\002\000\010\025\046\040\257\041\uff94\001\002\000" +
    "\004\034\uffed\001\002\000\022\004\072\005\056\006\053" +
    "\007\067\013\066\015\073\027\055\031\075\001\002\000" +
    "\004\034\uff95\001\002\000\004\037\266\001\002\000\004" +
    "\034\uff96\001\002\000\004\034\270\001\002\000\004\023" +
    "\uff9e\001\002\000\004\033\272\001\002\000\016\004\uffee" +
    "\010\uffee\017\uffee\022\uffee\026\uffee\030\uffee\001\002\000" +
    "\016\004\uffb1\010\uffb1\017\uffb1\022\uffb1\026\uffb1\030\uffb1" +
    "\001\002\000\016\004\032\010\033\017\026\022\022\026" +
    "\040\030\034\001\002\000\020\004\032\010\033\017\026" +
    "\022\022\026\040\030\034\034\uffed\001\002\000\004\034" +
    "\277\001\002\000\026\004\uffac\010\uffac\017\uffac\020\uff94" +
    "\021\uffac\022\uffac\024\uffac\026\uffac\030\uffac\034\uffac\001" +
    "\002\000\024\004\uffb0\010\uffb0\017\uffb0\021\uff94\022\uffb0" +
    "\024\uffb0\026\uffb0\030\uffb0\034\uffb0\001\002\000\006\020" +
    "\uffae\021\uffae\001\002\000\004\020\303\001\002\000\014" +
    "\004\uffb0\007\uffb0\013\uffb0\015\uffb0\031\uffb0\001\002\000" +
    "\014\004\072\007\067\013\173\015\140\031\200\001\002" +
    "\000\004\033\306\001\002\000\016\004\uffee\010\uffee\017" +
    "\uffee\022\uffee\026\uffee\030\uffee\001\002\000\016\004\uffb1" +
    "\010\uffb1\017\uffb1\022\uffb1\026\uffb1\030\uffb1\001\002\000" +
    "\016\004\032\010\033\017\026\022\022\026\040\030\034" +
    "\001\002\000\020\004\032\010\033\017\026\022\022\026" +
    "\040\030\034\034\uffed\001\002\000\004\034\313\001\002" +
    "\000\026\004\uffac\010\uffac\017\uffac\020\uff94\021\uffac\022" +
    "\uffac\024\uffac\026\uffac\030\uffac\034\uffac\001\002\000\024" +
    "\004\uffad\010\uffad\017\uffad\021\uffad\022\uffad\024\uffad\026" +
    "\uffad\030\uffad\034\uffad\001\002\000\022\004\uffaf\010\uffaf" +
    "\017\uffaf\022\uffaf\024\uffaf\026\uffaf\030\uffaf\034\uffaf\001" +
    "\002\000\022\004\uffaa\010\uffaa\017\uffaa\022\uffaa\024\uffaa" +
    "\026\uffaa\030\uffaa\034\uffaa\001\002\000\004\021\320\001" +
    "\002\000\004\033\321\001\002\000\016\004\uffee\010\uffee" +
    "\017\uffee\022\uffee\026\uffee\030\uffee\001\002\000\016\004" +
    "\uffb0\010\uffb0\017\uffb0\022\uffb0\026\uffb0\030\uffb0\001\002" +
    "\000\016\004\032\010\033\017\026\022\022\026\040\030" +
    "\034\001\002\000\020\004\032\010\033\017\026\022\022" +
    "\026\040\030\034\034\uffed\001\002\000\004\034\326\001" +
    "\002\000\022\004\uffab\010\uffab\017\uffab\022\uffab\024\uffab" +
    "\026\uffab\030\uffab\034\uffab\001\002\000\022\004\uffef\010" +
    "\uffef\017\uffef\022\uffef\024\uffef\026\uffef\030\uffef\034\uffef" +
    "\001\002\000\022\004\ufff5\010\ufff5\017\ufff5\022\ufff5\024" +
    "\ufff5\026\ufff5\030\ufff5\034\ufff5\001\002\000\014\004\072" +
    "\007\067\013\173\015\140\031\200\001\002\000\014\004" +
    "\uffa9\007\uffa9\013\uffa9\015\uffa9\031\uffa9\001\002\000\004" +
    "\033\334\001\002\000\016\004\uffee\010\uffee\017\uffee\022" +
    "\uffee\026\uffee\030\uffee\001\002\000\016\004\uffb1\010\uffb1" +
    "\017\uffb1\022\uffb1\026\uffb1\030\uffb1\001\002\000\016\004" +
    "\032\010\033\017\026\022\022\026\040\030\034\001\002" +
    "\000\020\004\032\010\033\017\026\022\022\026\040\030" +
    "\034\034\uffed\001\002\000\004\034\341\001\002\000\022" +
    "\004\uffa8\010\uffa8\017\uffa8\022\uffa8\024\uffa8\026\uffa8\030" +
    "\uffa8\034\uffa8\001\002\000\022\004\ufff6\010\ufff6\017\ufff6" +
    "\022\ufff6\024\ufff6\026\ufff6\030\ufff6\034\ufff6\001\002\000" +
    "\022\004\ufff0\010\ufff0\017\ufff0\022\ufff0\024\ufff0\026\ufff0" +
    "\030\ufff0\034\ufff0\001\002\000\004\002\ufffe\001\002\000" +
    "\004\031\ufffb\001\002\000\004\031\351\001\002\000\004" +
    "\032\361\001\002\000\006\032\uff9c\040\355\001\002\000" +
    "\006\004\352\032\uff9b\001\002\000\004\041\353\001\002" +
    "\000\004\004\354\001\002\000\006\032\uff99\040\uff99\001" +
    "\002\000\004\004\356\001\002\000\004\041\357\001\002" +
    "\000\004\004\360\001\002\000\006\032\uff9a\040\uff9a\001" +
    "\002\000\004\041\362\001\002\000\004\004\363\001\002" +
    "\000\004\033\uff9d\001\002\000\004\031\365\001\002\000" +
    "\004\032\366\001\002\000\004\033\367\001\002\000\020" +
    "\004\uffee\010\uffee\017\uffee\022\uffee\026\uffee\030\uffee\034" +
    "\uffee\001\002\000\020\004\032\010\033\017\026\022\022" +
    "\026\040\030\034\034\uff94\001\002\000\004\034\uffed\001" +
    "\002\000\020\004\032\010\033\017\026\022\022\026\040" +
    "\030\034\034\ufffa\001\002\000\004\034\ufff9\001\002\000" +
    "\004\034\375\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\006\002\004\003\003\001\001\000\012\005" +
    "\006\050\011\051\010\052\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\006\050\343\051\010\052\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\014\001\001\000" +
    "\034\007\027\010\030\013\020\014\034\023\035\024\015" +
    "\037\023\046\016\047\017\055\026\057\024\060\036\061" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\330\066\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\017\173\021\175\030\176\031\224\032\200\034" +
    "\270\057\174\060\036\001\001\000\006\056\261\066\263" +
    "\001\001\000\030\010\216\013\020\014\034\023\035\024" +
    "\015\037\023\046\016\047\017\057\024\060\036\061\022" +
    "\001\001\000\002\001\001\000\006\015\044\066\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\041\043\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\044\066\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\016\061\017\076\020\067\021" +
    "\075\022\057\026\073\027\070\030\053\031\063\032\056" +
    "\057\060\060\036\064\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\016\061\017\076\020\067\021\075\022\202" +
    "\026\073\027\070\030\053\031\063\032\056\057\060\060" +
    "\036\065\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\136\021\161\032\163\057\160\060\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\152" +
    "\001\001\000\002\001\001\000\012\016\125\017\124\057" +
    "\123\060\036\001\001\000\002\001\001\000\032\016\102" +
    "\017\106\020\103\021\105\022\101\026\104\027\070\030" +
    "\077\031\063\032\100\057\060\060\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\061\017\076\020" +
    "\067\021\075\022\115\026\073\027\070\030\053\031\063" +
    "\032\056\057\060\060\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\125\017\124\001\001\000\004\017\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\132\017\130\026\131\027\070\057\127\060\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\132\017\130\026\134\027" +
    "\070\057\127\060\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\124\001\001\000" +
    "\004\017\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\144\017\142\001\001\000\002\001\001\000" +
    "\032\016\061\017\076\020\067\021\075\022\146\026\073" +
    "\027\070\030\053\031\063\032\056\057\060\060\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\156\017\153\026\154\027" +
    "\155\057\127\060\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\152\001\001\000\002\001\001\000" +
    "\006\017\136\021\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\061\017\106\020\067\021\105\022" +
    "\101\026\073\027\070\030\164\031\063\032\100\057\060" +
    "\060\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\142\021\167\001\001\000\002" +
    "\001\001\000\020\017\173\021\175\030\176\031\171\032" +
    "\200\057\174\060\036\001\001\000\002\001\001\000\014" +
    "\017\136\021\161\032\201\057\160\060\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\061\017\106\020\067\021\105\022" +
    "\101\026\073\027\070\030\077\031\063\032\100\057\060" +
    "\060\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\016\061\017\076" +
    "\020\067\021\075\022\206\026\073\027\070\030\053\031" +
    "\063\032\056\057\060\060\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\213\001\001\000\004\036\214" +
    "\001\001\000\032\007\215\010\030\013\020\014\034\023" +
    "\035\024\015\037\023\046\016\047\017\057\024\060\036" +
    "\061\022\001\001\000\032\010\216\012\217\013\020\014" +
    "\034\023\035\024\015\037\023\046\016\047\017\057\024" +
    "\060\036\061\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\223\066\222\001\001" +
    "\000\002\001\001\000\022\017\173\021\175\030\176\031" +
    "\224\032\200\034\225\057\174\060\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\227\066\230\001" +
    "\001\000\004\023\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\061\017\076\020" +
    "\067\021\075\022\234\026\073\027\070\030\053\031\063" +
    "\032\056\057\060\060\036\001\001\000\002\001\001\000" +
    "\032\016\061\017\076\020\067\021\075\022\237\026\073" +
    "\027\070\030\053\031\063\032\056\057\060\060\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\016\061\017\076\020\067\021\075\022\242\026" +
    "\073\027\070\030\053\031\063\032\056\057\060\060\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\062" +
    "\246\063\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\257\014\034\001\001\000" +
    "\002\001\001\000\006\015\044\066\046\001\001\000\004" +
    "\012\266\001\001\000\032\016\061\017\076\020\067\021" +
    "\075\022\264\026\073\027\070\030\053\031\063\032\056" +
    "\057\060\060\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\272\001\001\000\004\036" +
    "\273\001\001\000\032\007\274\010\030\013\020\014\034" +
    "\023\035\024\015\037\023\046\016\047\017\057\024\060" +
    "\036\061\022\001\001\000\032\010\216\012\275\013\020" +
    "\014\034\023\035\024\015\037\023\046\016\047\017\057" +
    "\024\060\036\061\022\001\001\000\002\001\001\000\010" +
    "\033\301\040\277\066\300\001\001\000\012\033\316\035" +
    "\315\041\314\066\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\303\001\001\000\022\017\173\021" +
    "\175\030\176\031\224\032\200\034\304\057\174\060\036" +
    "\001\001\000\002\001\001\000\004\011\306\001\001\000" +
    "\004\036\307\001\001\000\032\007\310\010\030\013\020" +
    "\014\034\023\035\024\015\037\023\046\016\047\017\057" +
    "\024\060\036\061\022\001\001\000\032\010\216\012\311" +
    "\013\020\014\034\023\035\024\015\037\023\046\016\047" +
    "\017\057\024\060\036\061\022\001\001\000\002\001\001" +
    "\000\010\033\301\040\313\066\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\321\001\001\000\004\035" +
    "\322\001\001\000\032\007\323\010\030\013\020\014\034" +
    "\023\035\024\015\037\023\046\016\047\017\057\024\060" +
    "\036\061\022\001\001\000\032\010\216\012\324\013\020" +
    "\014\034\023\035\024\015\037\023\046\016\047\017\057" +
    "\024\060\036\061\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\173\021\175\030\176\031\224\032\200\034\332\057\174" +
    "\060\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\334\001\001\000\004\036\335\001\001\000\032" +
    "\007\336\010\030\013\020\014\034\023\035\024\015\037" +
    "\023\046\016\047\017\057\024\060\036\061\022\001\001" +
    "\000\032\010\216\012\337\013\020\014\034\023\035\024" +
    "\015\037\023\046\016\047\017\057\024\060\036\061\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\363" +
    "\001\001\000\006\053\346\054\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\367" +
    "\001\001\000\036\006\370\007\371\010\030\013\020\014" +
    "\034\023\035\024\015\037\023\046\016\047\017\057\024" +
    "\060\036\061\022\066\372\001\001\000\004\012\373\001" +
    "\001\000\030\010\216\013\020\014\034\023\035\024\015" +
    "\037\023\046\016\047\017\057\024\060\036\061\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private BackTables backTables;
  private Lexico lexico;
  private GeneratorC3A c3a_g;
  private GeneratorAssembler assembler;
  private String filename;
  private String filenamePath;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(Lexico lexico, ComplexSymbolFactory sf){
    super(lexico, sf);
    this.lexico = lexico;
    this.symbolsTable = new SymbolsTable();
    this.backTables = new BackTables(symbolsTable);
    this.c3a_g = new GeneratorC3A();
    this.assembler = new GeneratorAssembler(symbolsTable, backTables, c3a_g, "Example");
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  public Parser(Lexico lexico, ComplexSymbolFactory sf, String filename){
      super(lexico, sf);
      this.lexico = lexico;
      this.filename = filename;
      this.symbolsTable = new SymbolsTable(filename);
      this.backTables = new BackTables(symbolsTable, filename);
      this.c3a_g = new GeneratorC3A(filename);
      this.assembler = new GeneratorAssembler(symbolsTable, backTables, c3a_g, filename);
      this.labelTrueStack = new Stack<String>();
      this.labelFalseStack = new Stack<String>();
      filenamePath = filename;
      int pos = filenamePath.lastIndexOf(".");
      if (pos > 0) {
          filenamePath = filenamePath.substring(0, pos);
      }
    }

  private void closeErrorFiles(){
    SymTabError.closeFile();
    CompilerError.closeFiles();
  }

  public void syntax_error(Symbol s) {
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      Lexico.closeFile((s.left + 1), (s.right + 1));

      ComplexSymbol complexSymbol = (ComplexSymbol) s; 

      throw new CompilerError(complexSymbol, expected_names, true, filenamePath);
    } catch (Exception e) {
		};
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      Lexico.closeFile((s.left + 1), (s.right + 1));

      ComplexSymbol complexSymbol = (ComplexSymbol) s; 

      throw new CompilerError(complexSymbol, expected_names, false, filenamePath);
    } catch (Exception e) {
      closeErrorFiles();
		};
  }

  private void initTypes() {
    try{
      //init TUPLE type
      Type tuple_type = new Type(Tipo.dtype, TipoSubyacente.TS_TUPLE, 0);
      symbolsTable.add("tuple", tuple_type);

      //init NUMBER type
      Type number_type = new Type(Tipo.dtype, TipoSubyacente.TS_NUMBER, 16);
      symbolsTable.add("number", number_type);

      // init String type
      Type str_type = new Type(Tipo.dtype, TipoSubyacente.TS_STRING, 16);
      symbolsTable.add("string", str_type);

      //init BOOLEAN type
      Type bool_type = new Type(Tipo.dtype,TipoSubyacente.TS_BOOLEAN, 16);
      symbolsTable.add("boolean",bool_type);

      //init VOID type
      Type void_type = new Type(Tipo.dtype, TipoSubyacente.TS_NULL, 0);
      symbolsTable.add("void", void_type);
    }catch (SymTabError e){
      closeErrorFiles();
    }
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Start start_val = (Start)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DECLARE_FUNCTIONS 
            {
              Start RESULT =null;
		
                            // close SymbolsTableData.txt file
                              symbolsTable.closeSymbolsTableFiles();
                              backTables.guardarTablasBack();

                              c3a_g.guardarC3Dir();
                              assembler.generateAssembler();

                              closeErrorFiles();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              Init RESULT =null;
		
                              initTypes();
                              RESULT = new Init();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_FUNCTIONS ::= DEFINE_FUNCTION DECLARE_FUNCTIONS 
            {
              DeclareFunctions RESULT =null;
		
                              RESULT = new DeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_FUNCTIONS ::= MAIN_S 
            {
              DeclareFunctions RESULT =null;
		
                              RESULT = new DeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN_S ::= FUNC MAIN M_MAIN lparen rparen lbrace BLOCK_IN MAIN_INSTRUCTIONS BLOCK_OUT rbrace 
            {
              MainS RESULT =null;
		
                              c3a_g.generateC3aInstr(
                                Code.rtn,
                                null,
                                null,
                                "PROC_main"
                              );

                              RESULT = new MainS();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_S",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // M_MAIN ::= 
            {
              MainLabel RESULT =null;
		

                              String backId = backTables.addMain();
                              Type fun_type = new Type(backId, Tipo.dfun, null);
                              symbolsTable.add("main", fun_type);

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                "main"
                              );

                              c3a_g.generateC3aInstr(
                                Code.pmb,
                                null,
                                null,
                                backId
                              );

                              RESULT = new MainLabel();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              MainInstructions RESULT =null;
		
                              RESULT = new MainInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN_INSTRUCTIONS ::= EMPTY 
            {
              MainInstructions RESULT =null;
		
                              RESULT = new MainInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              Instructions RESULT =null;
		
                              RESULT = new Instructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              Instructions RESULT =null;
		
                              RESULT = new Instructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= DECLARATIONS semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= TUPLE_DECLARATION semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= INSTRUCTION_FOR 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= OPERATOR_ASSIG semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= INSTRUCTION_OUT semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= CALL_FUNCTION semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK_IN ::= 
            {
              BlockIn RESULT =null;
		
                              symbolsTable.enterBlock();
                              RESULT = new BlockIn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IN",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOCK_OUT ::= 
            {
              BlockOut RESULT =null;
		
                              try{
                                symbolsTable.leaveBlock();
                                RESULT = new BlockOut();
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_OUT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS ::= id comma DECLARATIONS 
            {
              Declarations RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location declarationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Declarations declarations = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type = declarations.getType();
                                String backId;

                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String value = declarations.getValue();
                                  backId = backTables.addStringVariable(var_id, type.getSize(), value);
                                }else{
                                  backId = backTables.addVariable(var_id, type.getTipoSubyacente(), type.getSize(), false);
                                }

                                type.setIdBack(backId);

                                symbolsTable.add(var_id, type);

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  declarations.getVarId(),
                                  null,
                                  backId
                                );

                                  RESULT = declarations;

                              }catch(SymTabError e){
                                String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS ::= DECLARATION 
            {
              Declarations RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Declarations declaration = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = declaration;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TUPLE_DECLARATION ::= struct lbrace FIELD_LIST rbrace id 
            {
              TupleDeclaration RESULT =null;
		Location field_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location field_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FieldList field_list = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Type type = symbolsTable.get("tuple");
                            type.setSize(field_list.getSize());
                            type.setTupleTypes(field_list.getTypes());
                            symbolsTable.add(var_id, type);
                            RESULT = new TupleDeclaration(var_id, field_list, field_list.getSize());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_DECLARATION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FIELD_LIST ::= FIELD_LIST semicolon TUPLE_FIELD 
            {
              FieldList RESULT =null;
		Location field_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location field_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FieldList field_list = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fieldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fieldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TupleField field = (TupleField)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            field_list.addField(field);
                            RESULT = field_list;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FIELD_LIST ::= TUPLE_FIELD 
            {
              FieldList RESULT =null;
		Location fieldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fieldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TupleField field = (TupleField)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            ArrayList<TupleField> tupleFields = new ArrayList<>();
                            tupleFields.add(field);
                            RESULT = new FieldList(tupleFields);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TUPLE_FIELD ::= id two_points id 
            {
              TupleField RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Type type = symbolsTable.get(type_id);
                            if(type == null || type.getTipo() != Tipo.dtype){
                              String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                              String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                              String message = "Invalid type" + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            String backId = backTables.addVariable(id_var, type.getTipoSubyacente(), type.getSize(), false);
                            type.setIdBack(backId);

                            symbolsTable.add(id_var, type);

                            RESULT = new TupleField(id_var, type);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_FIELD",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARATION ::= id CONSTANT two_points id op_assig VALUE 
            {
              Declarations RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Const constant = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {

                                boolean isConst = constant != null ? constant.getIsConst() : false;

                                Type type = symbolsTable.get(type_id);

                                if(type == null || type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_STRING){
                                    String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                    String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                    String message = "DECLARATION: Invalid subjacent type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                if(value.getTipo() == Tipo.dnull && type.getTipoSubyacente() != value.getTipoSubyacente()){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                if(value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type var_type;

                                if(isConst){
                                  var_type = new Type(Tipo.dconst, type_id, value.getValue());
                                }
                                else{
                                  var_type = new Type(Tipo.dvar, type_id);
                                }

                                int size = type.getSize();
                                if(value.getIsString()){
                                  size = value.getStringSize();
                                }

                                String var_id;
                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String str_value = (String) value.getValue();
                                  var_id = backTables.addStringVariable(id_var, type.getSize(), str_value);
                                }else{
                                  var_id = backTables.addVariable(id_var, type.getTipoSubyacente(), type.getSize(), false);
                                }

                                var_type.setIdBack(var_id);

                                String val_id = value.getVarId();
                                symbolsTable.add(id_var, var_type);

                                Declarations symDcls;
                                if(value.getIsString()){
                                  symDcls = new Declarations(val_id, var_type, (String) value.getValue());
                                }else{
                                  symDcls = new Declarations(val_id, var_type);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_STRING){
                                  c3a_g.generateC3aInstr(
                                    Code.copy,
                                    val_id,
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = symDcls;
                              }catch(SymTabError e){
                                String from = id_varxleft.getLine() + ":" + id_varxleft.getColumn();
                                String to = id_varxright.getLine() + ":" + id_varxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATION ::= id CONSTANT two_points id op_assig TUPLE_VALUE 
            {
              Declarations RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tuple_valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tuple_valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TupleValues tuple_value = (TupleValues)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Type type = symbolsTable.get(type_id);

                            if(type == null || type.getTipo() != Tipo.dtype){
                              String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                              String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                              String message = "Invalid type" + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            if(type.getTipoSubyacente() != TipoSubyacente.TS_TUPLE){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = "DECLARATION: Invalid subjacent type" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            //COMPROBAMOS QUE LA CANTIDAD DE VALORES COINCIDA CON LA CANTIDAD DE VARIABLES DE LA TUPLA
                            if(type.getTupleTypes().size() != tuple_value.getValues().size()){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = "TUPLE_DECLARATION: Invalid number of values" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }

                            //COMPROBAMOS QUE LOS TIPOS DE LOS VALUES SEAN COMPATIBLES CON LOS TIPOS DE LA TUPLA
                            for (int i = 0; i < tuple_value.getValues().size(); i++){
                                if(type.getTupleTypes().get(i).getTipoSubyacente() != tuple_value.getValues().get(i).getTipoSubyacente()){
                                    String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                    String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                    String message = "TUPLE_DECLARATION: Invalid subjacentType of value" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }
                            }

                            for (int i = 0; i < tuple_value.getValues().size(); i++){
                                var value = tuple_value.getValues().get(i);
                                var varType = type.getTupleTypes().get(i);
                                    c3a_g.generateC3aInstr(
                                           Code.copy,
                                           value.getVarId(),
                                           null,
                                           varType.getBackendId()
                                   );
                            }

                            backTables.addVariable(id_var, type.getTipoSubyacente(), type.getSize(), false);

                            RESULT = new Declarations();

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONSTANT ::= constant 
            {
              Const RESULT =null;
		
                              RESULT = new Const(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONSTANT ::= EMPTY 
            {
              Const RESULT =null;
		
                              RESULT = new Const(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERATOR_ASSIG ::= id op_assig VALUE 
            {
              Assignation RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                   Type varType = symbolsTable.get(var_id);
                                   String type_id = varType.getTypeName();

                                   if (varType.getTipo() == Tipo.dconst) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "Cant assign value to constant" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                   }

                                   //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                   if (value.getTipo() == Tipo.dnull && varType.getTipoSubyacente() == value.getTipoSubyacente()) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "Value and type must have same subjacent type" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                   }

                                   if (value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "ValueType and type_id must be the same type" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                   }

                                   c3a_g.generateC3aInstr(
                                           Code.copy,
                                           value.getVarId(),
                                           null,
                                           varType.getBackendId()
                                   );

                                   RESULT = new Assignation();
                              } catch (SymTabError e) {
                                  String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                  String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                  String message = e.getMessage() + " from " + from + " to " + to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARITH_OP ::= op_arithmetical_b 
            {
              ArithmeticOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARITH_OP ::= op_arithmetical_c 
            {
              ArithmeticOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARITHMETICAL_OPERATION ::= ARITHMETICAL_VALUE ARITH_OP ARITHMETICAL_VALUE 
            {
              ArithmeticOperation RESULT =null;
		Location arith_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location arith_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArithmeticValue arith_val1 = (ArithmeticValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperator op = (ArithmeticOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location arith_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticValue arith_val2 = (ArithmeticValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                ArithmeticOperation sym;
                                boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                                Code op_code;

                                switch(op.getOperator()){
                                  case "+" :
                                    op_code = Code.add;
                                    break;
                                  case "-" :
                                    op_code = Code.sub;
                                    break;
                                  case "*" :
                                    op_code = Code.prod;
                                    break;
                                  case "/" :
                                    op_code = Code.div;
                                    break;
                                  case "%" :
                                    op_code = Code.mod;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid arithmetic operator from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Integer value = null;
                                if(allConst) {
                                  Integer val1 = (Integer) arith_val1.getValue();
                                  Integer val2 = (Integer) arith_val2.getValue();

                                  switch(op.getOperator()){
                                    case "+" :
                                      value = val1 + val2;
                                      break;
                                    case "-" :
                                      value = val1 - val2;
                                      break;
                                    case "*" :
                                      value = val1 * val2;
                                      break;
                                    case "/" :
                                      if(val2 == 0){
                                        String from = arith_val2xleft.getLine() + ":" + arith_val2xleft.getColumn();
                                        String to = arith_val2xright.getLine() + ":" + arith_val2xright.getColumn();
                                        String message = "Can not divide by zero (0)" + " from "+from+" to "+to;
                                        throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                      }
                                      value = val1 / val2;
                                      break;
                                    case "%" :
                                      value = val1 % val2;
                                      break;
                                  }
                                }

                                Type type_number = symbolsTable.get("number");

                                String var_id = backTables.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  arith_val1.getVarId(),
                                  arith_val2.getVarId(),
                                  var_id
                                );

                                if(allConst){
                                  sym = new ArithmeticOperation(var_id, value);
                                }
                                else{
                                  sym = new ArithmeticOperation(var_id);
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARITHMETICAL_OPERATION ::= op_arithmetical_b lparen ARITHMETICAL_OPERATION rparen 
            {
              ArithmeticOperation RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                ArithmeticOperation sym = arith_op;
                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backTables.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  if(arith_op.getIsConst()){
                                    Integer value = - arith_op.getValue().intValue();
                                    sym = new ArithmeticOperation(arith_op.getVarId(), value);
                                  }else{
                                    sym = new ArithmeticOperation(var_id);
                                  }

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    arith_op.getVarId(),
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARITHMETICAL_OPERATION ::= lparen ARITHMETICAL_OPERATION rparen 
            {
              ArithmeticOperation RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = arith_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NUMBER_VALUE ::= number 
            {
              NumericValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value = Integer.valueOf(n_val);
                              RESULT = new NumericValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NUMBER_VALUE ::= lparen NUMBER_VALUE rparen 
            {
              NumericValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = n_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NUMBER_VALUE ::= op_arithmetical_b NUMBER_VALUE 
            {
              NumericValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              NumericValue sym = n_val;
                              if(op.equals("-")){
                                Integer value = - n_val.getValue().intValue();
                                sym = new NumericValue(value);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARITHMETICAL_VALUE ::= NUMBER_VALUE 
            {
              ArithmeticValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Integer value = n_val.getValue();

                              Type type_number = symbolsTable.get("number");

                              String var_id = backTables.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new ArithmeticValue(var_id, value);
                            }catch(SymTabError e){
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARITHMETICAL_VALUE ::= ID_VALUE 
            {
              ArithmeticValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Tipo main_var_type = id_val.getTipo();

                              if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              Type var_dtype = symbolsTable.get(id_val.getTypeName());

                              if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "ARITHMETICAL_VALUE: Invalid subjacent type" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              ArithmeticValue sym;
                              String var_id = id_val.getId();

                              if(main_var_type == Tipo.dconst){
                                Integer value = (Integer) id_val.getValue();
                                sym = new ArithmeticValue(var_id, value);
                              }else{
                                sym = new ArithmeticValue(var_id);
                              }

                              RESULT = sym;
                            }catch(SymTabError e){
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARITHMETICAL_VALUE ::= ARITHMETICAL_OPERATION 
            {
              ArithmeticValue RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            ArithmeticValue sym;
                            if(arith_op.getIsConst()){
                              sym = new ArithmeticValue(arith_op.getVarId(), arith_op.getValue());
                            }else{
                              sym = new ArithmeticValue(arith_op.getVarId());
                            }

                            RESULT = sym;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARITHMETICAL_VALUE ::= CALL_FUNCTION 
            {
              ArithmeticValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              String var_id = backTables.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              RESULT = new ArithmeticValue(var_id);
                            }catch(SymTabError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARITHMETICAL_VALUE ::= op_arithmetical_b CALL_FUNCTION 
            {
              ArithmeticValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              String var_id = backTables.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              if(op.equals("-")){
                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = new ArithmeticValue(var_id);
                            }catch(SymTabError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_VALUE ::= id 
            {
              Identifier RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type id_type = symbolsTable.get(id_val);
                                String var_id = id_type.getBackendId();
                                Identifier sym = new Identifier(var_id, id_type.getTipo(), id_type.getTypeName());
                                if(id_type.getTipo() == Tipo.dconst){
                                  sym = new Identifier(var_id, id_type.getTipo(), id_type.getTypeName(), id_type.getValue());
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID_VALUE ::= lparen ID_VALUE rparen 
            {
              Identifier RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = id_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID_VALUE ::= op_logical_not ID_VALUE 
            {
              Identifier RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{

                                Identifier sym;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backTables.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  id_val.getId(),
                                  null,
                                  var_id
                                );

                                if(id_val.getTipo() == Tipo.dconst){
                                  Boolean value = !((Boolean) id_val.getValue()).booleanValue();
                                  sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                }else{
                                  sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName());
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID_VALUE ::= op_arithmetical_b ID_VALUE 
            {
              Identifier RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                Identifier sym = id_val;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backTables.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    id_val.getId(),
                                    null,
                                    var_id
                                  );

                                  if(id_val.getTipo() == Tipo.dconst){
                                    Integer value = -((Integer) id_val.getValue()).intValue();
                                    sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                  }else{
                                    sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName());
                                  }
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRING_VALUE ::= string 
            {
              StringValue RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String string_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new StringValue(string_val);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRING_VALUE ::= lparen STRING_VALUE rparen 
            {
              StringValue RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringValue string_val = (StringValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = string_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= ID_VALUE 
            {
              Value RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;

                              String var_id = id_val.getId();

                              if(id_val.getTipo() == Tipo.dconst){
                                sym = new Value(var_id, id_val.getTipo(), id_val.getTypeName(), id_val.getValue());
                              }
                              else {
                                sym = new Value(var_id, id_val.getTipo(), id_val.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE ::= STRING_VALUE 
            {
              Value RESULT =null;
		Location str_valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location str_valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StringValue str_value = (StringValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String value = str_value.getString().replace("\"", "");
                                Type type_string = symbolsTable.get("string");

                                if (value.length() > 1000){
                                  String from = str_valuexleft.getLine() + ":" + str_valuexleft.getColumn();
                                  String to = str_valuexright.getLine() + ":" + str_valuexright.getColumn();
                                  String message = "String must be shorter than 1000 characters " + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                // string size in bytes
                                int stringSize = value.length() * type_string.getSize();

                                Value sym = new Value(value, stringSize);

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUE ::= BOOLEAN_VALUE 
            {
              Value RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_bool = symbolsTable.get("boolean");

                                String var_id = backTables.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, TipoSubyacente.TS_BOOLEAN, value);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALUE ::= NUMBER_VALUE 
            {
              Value RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Integer value = n_val.getValue();

                                Type type_number = symbolsTable.get("number");

                                String var_id = backTables.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  Integer.toString(value),
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, TipoSubyacente.TS_NUMBER, value);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALUE ::= VALUE_COMPARISON 
            {
              Value RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String id = comp_val.getVarId();

                              if(comp_val.getIsConst()){
                                Boolean value = comp_val.getValue();
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN, value);
                              }else{
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              Value RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Value sym;

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backTables.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN, value);
                                }else{
                                  sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN);
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALUE ::= ARITHMETICAL_OPERATION 
            {
              Value RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new Value(var_id, TipoSubyacente.TS_NUMBER, arith_op.getValue());
                              }else{
                                sym = new Value(var_id, TipoSubyacente.TS_NUMBER);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALUE ::= BOOLEAN_OPERATION 
            {
              Value RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN, bool_op.getValue());
                              }else{
                                sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALUE ::= CALL_FUNCTION 
            {
              Value RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                  String from = call_fnxleft.getLine() + ":" +call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Function call : "+call_fn.getFunctionId() + " does not return any value" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String var_id = backTables.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new Value(var_id, Tipo.dfun, fn_type.getTypeName());
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALUE ::= READ lparen rparen 
            {
              Value RESULT =null;
		
                              try{
                                Type number_type = symbolsTable.get("number");
                                String var_id = backTables.addTempVar(number_type.getSize(), number_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.read,
                                  null,
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, number_type.getTipoSubyacente());
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TUPLE_VALUE ::= lbracket TUPLE_VALUES rbracket 
            {
              TupleValues RESULT =null;
		Location tuple_valuesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tuple_valuesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TupleValues tuple_values = (TupleValues)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            RESULT = tuple_values;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_VALUE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TUPLE_VALUES ::= TUPLE_VALUES comma VALUE 
            {
              TupleValues RESULT =null;
		Location valuesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location valuesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TupleValues values = (TupleValues)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            values.addValue(value);
                            RESULT = values;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_VALUES",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TUPLE_VALUES ::= VALUE 
            {
              TupleValues RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = new TupleValues(new ArrayList<>(List.of(value)));
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_VALUES",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BOOLEAN_OPERATION ::= BOOLEAN_OP_VALUE op_logical BOOLEAN_OP_VALUE 
            {
              BooleanOperator RESULT =null;
		Location bool_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bool_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		BooleanOperationValue bool_val1 = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bool_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperationValue bool_val2 = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                BooleanOperator sym;
                                Code op_code;

                                switch(op){
                                  case "&&":
                                    op_code = Code.and;
                                    break;
                                  case "||":
                                    op_code = Code.or;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid boolean operator" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                boolean allConst = bool_val1.getIsConst() && bool_val2.getIsConst();
                                Boolean value = null;

                                if(allConst){
                                  Boolean val1 = (Boolean) bool_val1.getValue();
                                  Boolean val2 = (Boolean) bool_val2.getValue();
                                  switch(op){
                                  case "&&":
                                    value = val1 && val2;
                                    break;
                                  case "||":
                                    value = val1 || val2;
                                    break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backTables.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                String val1_id = bool_val1.getVarId();
                                String val2_id = bool_val2.getVarId();
                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1_id,
                                  val2_id,
                                  var_id
                                );

                                if(allConst){
                                  sym = new BooleanOperator(var_id, value);
                                }else{
                                  sym = new BooleanOperator(var_id);
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BOOLEAN_OPERATION ::= lparen BOOLEAN_OPERATION rparen 
            {
              BooleanOperator RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOOLEAN_OPERATION ::= op_logical_not lparen BOOLEAN_OPERATION rparen 
            {
              BooleanOperator RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                BooleanOperator sym;
                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backTables.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  bool_op.getVarId(),
                                  null,
                                  var_id
                                );

                                if(bool_op.getIsConst()){
                                  Boolean value = ! bool_op.getValue().booleanValue();
                                  sym = new BooleanOperator(bool_op.getVarId(), value);
                                }else{
                                  sym = new BooleanOperator(var_id);
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOOLEAN_OP_VALUE ::= BOOLEAN_VALUE 
            {
              BooleanOperationValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_boolean = symbolsTable.get("boolean");

                                String var_id = backTables.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id, value);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BOOLEAN_OP_VALUE ::= ID_VALUE 
            {
              BooleanOperationValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Tipo main_var_type = id_val.getTipo();
                                if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type var_dtype = symbolsTable.get(id_val.getTypeName());

                                if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "BOOLEAN_OP_VALUE: Invalid subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                BooleanOperationValue sym;
                                String var_id = id_val.getId();

                                if(main_var_type == Tipo.dconst){
                                  Boolean value = (Boolean) id_val.getValue();
                                  sym = new BooleanOperationValue(var_id, value);
                                }else{
                                  sym = new BooleanOperationValue(var_id);
                                }

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BOOLEAN_OP_VALUE ::= BOOLEAN_OPERATION 
            {
              BooleanOperationValue RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              BooleanOperationValue sym;
                              if(bool_op.getIsConst()){
                                sym = new BooleanOperationValue(bool_op.getVarId(), bool_op.getValue());
                              }else{
                                sym = new BooleanOperationValue(bool_op.getVarId());
                              }
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BOOLEAN_OP_VALUE ::= VALUE_COMPARISON 
            {
              BooleanOperationValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              BooleanOperationValue sym;
                              String id = new String(comp_val.getVarId());
                              if(comp_val.getIsConst()){
                                sym = new BooleanOperationValue(id, comp_val.getValue());
                              }else{
                                sym = new BooleanOperationValue(id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BOOLEAN_OP_VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              BooleanOperationValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backTables.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                BooleanOperationValue sym;
                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new BooleanOperationValue(var_id, value);
                                }else{
                                  sym = new BooleanOperationValue(var_id);
                                }
                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BOOLEAN_OP_VALUE ::= CALL_FUNCTION 
            {
              BooleanOperationValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_BOOLEAN + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String var_id = backTables.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BOOLEAN_OP_VALUE ::= op_logical_not CALL_FUNCTION 
            {
              BooleanOperationValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String var_id = backTables.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BOOLEAN_VALUE ::= bool 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              RESULT = new BooleanValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BOOLEAN_VALUE ::= op_logical_not BOOLEAN_VALUE 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = ! bool_val.getValue().booleanValue();
                              RESULT = new BooleanValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BOOLEAN_VALUE ::= lparen BOOLEAN_VALUE rparen 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              ValuesComparison RESULT =null;
		Location val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Value val1 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value val2 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                ValuesComparison sym;

                                Tipo type1 = val1.getTipo();
                                TipoSubyacente subType1;

                                if(val1.getTipo() == Tipo.dnull){
                                  subType1 = val1.getTipoSubyacente();
                                }else{
                                  if(type1 != Tipo.dvar && type1 != Tipo.dconst && type1 != Tipo.darg && type1 != Tipo.dfun) {
                                    String from = val1xleft.getLine() + ":" + val1xleft.getColumn();
                                    String to = val1xright.getLine() + ":" + val1xright.getColumn();
                                    String message = "Value 1 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type dtype_type = symbolsTable.get(val1.getTypeName());
                                  subType1 = dtype_type.getTipoSubyacente();
                                }
                                // SAME FOR VALUE2
                                Tipo type2 = val2.getTipo();
                                TipoSubyacente subType2;

                                if(val2.getTipo() == Tipo.dnull){
                                  subType2 = val2.getTipoSubyacente();
                                }else{
                                  if(type2 != Tipo.dvar && type2 != Tipo.dconst && type2 != Tipo.darg && type2 != Tipo.dfun) {
                                    String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                    String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                    String message = "Value 2 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type dtype_type = symbolsTable.get(val2.getTypeName());
                                  subType2 = dtype_type.getTipoSubyacente();
                                }

                                //Check same subtype
                                if(subType1 != subType2) {
                                  String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                  String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                  String message = "Value 1 subtype is different from value 2" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Code op_code = Code.EQ;
                                switch(op){
                                  case "==":
                                    op_code = Code.EQ;
                                    break;
                                  case "!=":
                                    op_code = Code.NE;
                                    break;
                                  case "<":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.LT;
                                    break;
                                  case "<=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.LE;
                                    break;
                                  case ">":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.GT;
                                    break;
                                  case ">=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                    }
                                    op_code = Code.GE;
                                    break;
                                }

                                boolean allConst = val1.getIsConst() && val2.getIsConst();

                                Boolean val = null;
                                if(allConst){
                                  switch(op){
                                    case "==":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = ((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                      }
                                      break;
                                    case "!=":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = !((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                      }
                                      break;

                                    // only integer operators
                                    case "<":
                                      val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                      break;
                                    case "<=":
                                      val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                      break;
                                    case ">":
                                      val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                      break;
                                    case ">=":
                                      val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                      break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backTables.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                if(allConst){
                                  sym = new ValuesComparison(var_id, val);
                                }else{
                                  sym = new ValuesComparison(var_id);
                                }

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1.getVarId(),
                                  val2.getVarId(),
                                  var_id
                                );

                                RESULT = sym;
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALUE_COMPARISON ::= lparen VALUE_COMPARISON rparen 
            {
              ValuesComparison RESULT =null;
		Location cmp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cmp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ValuesComparison cmp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = cmp_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COND ::= BOOLEAN_OP_VALUE 
            {
              Condition RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperationValue bool_val = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String var_id = bool_val.getVarId();

                                String true_label = backTables.addEtiq();
                                String false_label = backTables.addEtiq();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);


                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new Condition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COND_T ::= 
            {
              CondTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new CondTrue();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COND_F ::= 
            {
              CondFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new CondFalse();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCTION_IF ::= IF COND lbrace BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbrace INSTRUCT_ELIF INSTRUCT_ELSE 
            {
              InstructionIf RESULT =null;
		
                              RESULT = new InstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // M_END ::= EMPTY 
            {
              End RESULT =null;
		
                              String label = backTables.addEtiq();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new End(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCT_ELIF ::= M_END ELIF COND_F COND lbrace BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbrace INSTRUCT_ELIF 
            {
              ElseIf RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		End mend = (End)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new ElseIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCT_ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCT_ELIF ::= 
            {
              ElseIf RESULT =null;
		
                              RESULT = new ElseIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCT_ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCT_ELSE ::= M_END ELSE lbrace BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbrace 
            {
              Else RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		End mend = (End)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new Else();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCT_ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCT_ELSE ::= COND_F 
            {
              Else RESULT =null;
		
                              RESULT = new Else();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCT_ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // M_WHILE ::= EMPTY 
            {
              WhileLabel RESULT =null;
		
                              String label = backTables.addEtiq();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new WhileLabel(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCTION_WHILE ::= WHILE M_WHILE COND lbrace BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbrace 
            {
              InstructionWhile RESULT =null;
		Location mwhilexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mwhilexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		WhileLabel mwhile = (WhileLabel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new InstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCTION_FOR ::= FOR lparen FOR_BODY rparen lbrace BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbrace 
            {
              InstructionFor RESULT =null;
		Location forBodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location forBodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		ForBody forBody = (ForBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String postInstrLabel = forBody.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                postInstrLabel
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );
                              RESULT = new InstructionFor();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_FOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LABEL_FOR ::= EMPTY 
            {
              ForLabel RESULT =null;
		
                              String label = backTables.addEtiq();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new ForLabel(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LABEL_FOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FOR_BODY ::= DECLARATION semicolon LABEL_FOR COND semicolon LABEL_POST_FOR OPERATOR_ASSIG 
            {
              ForBody RESULT =null;
		Location labelForxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location labelForxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ForLabel labelFor = (ForLabel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location labelPostForxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location labelPostForxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		LabelPostFor labelPostFor = (LabelPostFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    String iniForLabel = labelFor.getLabel();
                                    c3a_g.generateC3aInstr(
                                      Code.go_to,
                                      null,
                                      null,
                                      iniForLabel
                                    );

                                    RESULT = new ForBody(labelPostFor.getLabel());
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_BODY",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LABEL_POST_FOR ::= EMPTY 
            {
              LabelPostFor RESULT =null;
		
                              String label = backTables.addEtiq();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new LabelPostFor(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LABEL_POST_FOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CALL_FUNCTION ::= id lparen rparen 
            {
              CallFunction RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // Check if function and has params
                                int num_params = symbolsTable.getNumParams(fun_id);
                                if(num_params > 0 ){
                                  String from = lpxleft.getLine() + ":" + lpxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + num_params + " parameters" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String backId = fun_type.getBackendId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  0 + "",
                                  null,
                                  backId
                                );

                                RESULT = new CallFunction(fun_id, backId);
                              }catch(SymTabError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CALL_FUNCTION ::= CALL_BODY rparen 
            {
              CallFunction RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CallBody body = (CallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                int body_params = body.getNumParams();
                                String fun_id = body.getFunId();
                                int fun_params = symbolsTable.getNumParams(fun_id);

                                if(fun_params != body_params){
                                  String from = bodyxleft.getLine() + ":" + bodyxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + fun_params + " parameters" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String fun_backId = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  fun_params + "",
                                  null,
                                  fun_backId
                                );



                                RESULT = new CallFunction(fun_id, fun_backId);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CALL_BODY ::= CALL_BODY comma VALUE 
            {
              CallBody RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		CallBody body = (CallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String fun_id = body.getFunId();
                                int num_params = body.getNumParams();
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param "+ num_params + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, num_params);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if (paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                String fun_back_id = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new CallBody(fun_id, fun_back_id, num_params+1);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CALL_BODY ::= id lparen VALUE 
            {
              CallBody RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param 0" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, 0);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if(paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String fun_back_id = fun_type.getBackendId();

                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new CallBody(fun_id, fun_back_id, 0+1);
                              }catch(SymTabError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCTION_OUT ::= PRINT lparen VALUE rparen 
            {
              InstructionOut RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                String var_id = value.getVarId();
                                TipoSubyacente subtype;

                                if(value.getTipo() == Tipo.dnull){
                                  subtype = value.getTipoSubyacente();
                                }else{
                                  Type var_type = symbolsTable.get(value.getTypeName());
                                  subtype = var_type.getTipoSubyacente();
                                }

                                if (value.getTipo() == Tipo.dnull && value.getTipoSubyacente() == TipoSubyacente.TS_STRING) {
                                  var_id = backTables.addTemporalStringVariable(value.getStringSize(), (String) value.getValue());
                                  c3a_g.generateC3aInstr(
                                    Code.print,
                                    subtype.toString(),
                                    (String) value.getValue(),
                                    var_id
                                  );
                                } else {
                                  c3a_g.generateC3aInstr(
                                    Code.print,
                                    subtype.toString(),
                                    null,
                                    var_id
                                  );
                                }
                                RESULT = new InstructionOut();
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DEFINE_FUNCTION ::= FUNCTION_INIT lbrace BLOCK_IN FUNCTION_INSTRUCTIONS FUNCTION_RETURN BLOCK_OUT rbrace 
            {
              DefineFunction RESULT =null;
		Location fun_initxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location fun_initxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		FunctionInit fun_init = (FunctionInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location fun_retxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_retxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FunctionReturn fun_ret = (FunctionReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              //check if fun type and return type are the same
                              if(fun_init.getTipoSubyacente() != fun_ret.getTipoSubyacente()) {
                                String from = fun_retxleft.getLine() + ":" + fun_retxleft.getColumn();
                                String to = fun_retxright.getLine() + ":" + fun_retxright.getColumn();
                                String message = "Invalid return type. Expected : "+fun_init.getTipoSubyacente()+", but got: "+fun_ret.getTipoSubyacente() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }

                              // no return value
                              if(fun_init.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  null,
                                  null,
                                  fun_init.getFunId()
                                );
                              }
                              // return value
                              else{

                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  fun_ret.getVarId(),
                                  null,
                                  fun_init.getFunId()
                                );
                              }

                              RESULT = new DefineFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCTION_INIT ::= FUNC id FUNCTION_PARAMS rparen two_points id 
            {
              FunctionInit RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location fun_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fun_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		FunctionParams fun_params = (FunctionParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // check return type
                                Type return_fun_type = symbolsTable.get(type_id);
                                if(return_fun_type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Function declaration : invalid type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }
                                if(return_fun_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid return type : "+type_id+". Valid return types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                TipoSubyacente subType = return_fun_type.getTipoSubyacente();
                                ArrayList<Parameter> params = fun_params.getParams();
                                String backId = backTables.addProcedure(fun_id, params.size(), 0, subType);

                                Type fun_type = new Type(backId, Tipo.dfun, type_id);

                                symbolsTable.add(fun_id, fun_type);

                                // add params if it has
                                for(Parameter param : params){
                                  Type param_type = param.getType();
                                  TipoSubyacente param_subType = symbolsTable.get(param.getType().getTypeName()).getTipoSubyacente();
                                  String param_backId = backTables.addVariable(param.getVarId(), param_subType, param.getSize(), true);
                                  param_type.setIdBack(param_backId);
                                  symbolsTable.addParam(fun_id, param_backId, param.getVarId(), param_type);
                                }

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  backId
                                );

                                c3a_g.generateC3aInstr(
                                  Code.pmb,
                                  null,
                                  null,
                                  backId
                                );

                                RESULT = new FunctionInit(backId, subType);
                              }catch(SymTabError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INIT",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCTION_PARAMS ::= FUNCTION_W_PARAMS 
            {
              FunctionParams RESULT =null;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunctionWithParams params = (FunctionWithParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new FunctionParams(params.getParams());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION_PARAMS ::= lparen 
            {
              FunctionParams RESULT =null;
		
                              RESULT = new FunctionParams();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION_W_PARAMS ::= FUNCTION_W_PARAMS comma id two_points id 
            {
              FunctionWithParams RESULT =null;
		Location prev_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location prev_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		FunctionWithParams prev_params = (FunctionWithParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Parameter param = new Parameter(id, param_type, type_type.getSize());

                                RESULT = new FunctionWithParams(param, prev_params);
                              }catch(SymTabError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION_W_PARAMS ::= lparen id two_points id 
            {
              FunctionWithParams RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Parameter param = new Parameter(id, param_type, type_type.getSize());

                                RESULT = new FunctionWithParams(param);
                              }catch(SymTabError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCTION_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              FunctionInstructions RESULT =null;
		
                              RESULT = new FunctionInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCTION_INSTRUCTIONS ::= 
            {
              FunctionInstructions RESULT =null;
		
                              RESULT = new FunctionInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCTION_RETURN ::= RETURN VALUE semicolon 
            {
              FunctionReturn RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                // is literall
                                TipoSubyacente subType = null;
                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }

                                // is variable
                                if(value.getTipo() != Tipo.dnull){
                                  Type type_type = symbolsTable.get(value.getTypeName());
                                  subType = type_type.getTipoSubyacente();
                                }

                                RESULT = new FunctionReturn(value.getVarId(), subType);
                              }catch(SymTabError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC, filenamePath);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCTION_RETURN ::= EMPTY 
            {
              FunctionReturn RESULT =null;
		
                              RESULT = new FunctionReturn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EMPTY ::= 
            {
              Empty RESULT =null;
		 RESULT = new Empty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
