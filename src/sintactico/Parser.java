
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import backend.BackTables;
import c3a.GeneratorC3A;
import c3a.InstructionC3A.Code;
import errores.CompilerError;
import errores.SymbolsTableError;
import generatorAssembler.GeneratorAssembler;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import lexico.Lexico;
import symbols.*;
import symbolsTable.SymbolsTable;
import symbolsTable.Type;
import symbolsTable.Type.Tipo;
import symbolsTable.Type.TipoSubyacente;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\050\004\000\002\050\003\000\002\005\014" +
    "\000\002\004\002\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\011\002\000\002\012\002\000\002\013\005\000" +
    "\002\013\003\000\002\062\007\000\002\063\005\000\002" +
    "\063\003\000\002\064\005\000\002\014\010\000\002\061" +
    "\005\000\002\015\003\000\002\015\003\000\002\023\005" +
    "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
    "\002\026\006\000\002\026\005\000\002\016\003\000\002" +
    "\016\005\000\002\016\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\004" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\020\003\000\002\020\005\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\022\003\000\002\030\005\000\002\030\005\000\002" +
    "\030\006\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\004\000\002\031\003" +
    "\000\002\031\004\000\002\021\003\000\002\021\004\000" +
    "\002\021\005\000\002\032\007\000\002\032\005\000\002" +
    "\034\003\000\002\036\002\000\002\035\002\000\002\037" +
    "\014\000\002\033\003\000\002\040\015\000\002\040\002" +
    "\000\002\041\012\000\002\041\003\000\002\042\003\000" +
    "\002\046\013\000\002\047\014\000\002\044\003\000\002" +
    "\043\011\000\002\045\003\000\002\057\005\000\002\057" +
    "\004\000\002\060\005\000\002\060\005\000\002\024\006" +
    "\000\002\051\011\000\002\052\010\000\002\053\003\000" +
    "\002\053\003\000\002\054\007\000\002\054\006\000\002" +
    "\055\003\000\002\055\002\000\002\056\005\000\002\056" +
    "\003\000\002\065\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\023\uffff\001\002\000\004\023\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\004\343\041\342\001\002\000\004\023\007\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\033\014\001\002\000\022\004\uffee\010\uffee\017" +
    "\uffee\022\uffee\024\uffee\026\uffee\030\uffee\034\uffee\001\002" +
    "\000\022\004\031\010\032\017\030\022\040\024\uff99\026" +
    "\037\030\035\034\uff99\001\002\000\004\035\340\001\002" +
    "\000\022\004\ufff3\010\ufff3\017\ufff3\022\ufff3\024\ufff3\026" +
    "\ufff3\030\ufff3\034\ufff3\001\002\000\022\004\ufff2\010\ufff2" +
    "\017\ufff2\022\ufff2\024\ufff2\026\ufff2\030\ufff2\034\ufff2\001" +
    "\002\000\004\035\337\001\002\000\004\035\336\001\002" +
    "\000\022\004\ufff4\010\ufff4\017\ufff4\022\ufff4\024\ufff4\026" +
    "\ufff4\030\ufff4\034\ufff4\001\002\000\004\035\335\001\002" +
    "\000\022\004\031\010\032\017\030\022\040\024\uff9a\026" +
    "\037\030\035\034\uff9a\001\002\000\006\024\327\034\uff96" +
    "\001\002\000\022\004\ufff7\010\ufff7\017\ufff7\022\ufff7\024" +
    "\ufff7\026\ufff7\030\ufff7\034\ufff7\001\002\000\014\004\044" +
    "\007\045\013\046\015\043\031\055\001\002\000\014\016" +
    "\242\025\214\031\136\036\265\037\uff96\001\002\000\004" +
    "\033\253\001\002\000\004\035\uffeb\001\002\000\004\035" +
    "\252\001\002\000\004\031\247\001\002\000\006\032\245" +
    "\036\244\001\002\000\004\031\207\001\002\000\014\004" +
    "\uff96\007\uff96\013\uff96\015\uff96\031\uff96\001\002\000\014" +
    "\004\044\007\045\013\046\015\043\031\055\001\002\000" +
    "\014\004\uffab\007\uffab\013\uffab\015\uffab\031\uffab\001\002" +
    "\000\012\004\131\013\113\015\043\031\130\001\002\000" +
    "\024\011\uffd4\012\uffd4\014\uffd4\015\uffd4\031\136\032\uffd4" +
    "\033\uffd4\035\uffd4\036\uffd4\001\002\000\016\011\uffb9\012" +
    "\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\001\002\000\014" +
    "\004\044\007\045\013\155\015\043\031\160\001\002\000" +
    "\010\012\166\033\uffb4\035\uffb4\001\002\000\016\011\uffbf" +
    "\012\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\001\002\000" +
    "\016\011\uffbb\012\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb" +
    "\001\002\000\004\033\177\001\002\000\016\011\uffc0\012" +
    "\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0\001\002\000\016" +
    "\011\uffbe\012\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\001" +
    "\002\000\022\004\074\005\061\006\057\007\045\013\071" +
    "\015\076\027\062\031\077\001\002\000\016\011\uffbd\012" +
    "\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd\001\002\000\012" +
    "\011\uffd0\032\uffd0\035\uffd0\036\uffd0\001\002\000\010\011" +
    "\uffc7\012\uffbe\032\176\001\002\000\016\011\uffdc\014\uffdc" +
    "\015\uffdc\032\uffdc\035\uffdc\036\uffdc\001\002\000\004\031" +
    "\174\001\002\000\010\011\uffca\012\uffbd\032\173\001\002" +
    "\000\004\011\170\001\002\000\020\011\uffc6\012\uffbb\014" +
    "\uffd6\015\uffd6\032\uffc6\035\uffc6\036\uffc6\001\002\000\016" +
    "\011\uffcb\014\uffd9\015\uffd9\032\uffcb\035\uffcb\036\uffcb\001" +
    "\002\000\004\012\166\001\002\000\012\011\uffc4\032\uffc4" +
    "\035\uffc4\036\uffc4\001\002\000\014\004\044\007\045\013" +
    "\155\015\043\031\160\001\002\000\012\011\uffcd\032\uffcd" +
    "\035\uffcd\036\uffcd\001\002\000\006\014\146\015\147\001" +
    "\002\000\024\011\uffd4\012\uffd4\014\uffd4\015\uffd4\031\136" +
    "\032\uffd4\035\uffd4\036\uffd4\040\135\001\002\000\016\011" +
    "\uffc8\014\uffd7\015\uffd7\032\uffc8\035\uffc8\036\uffc8\001\002" +
    "\000\014\004\044\005\061\013\113\015\112\031\117\001" +
    "\002\000\022\004\074\005\061\006\057\007\045\013\071" +
    "\015\076\027\062\031\077\001\002\000\010\011\uffcc\012" +
    "\uffc0\032\103\001\002\000\014\011\uffce\012\uffbf\014\uffd8" +
    "\015\uffd8\032\102\001\002\000\022\011\uffd3\012\uffd3\014" +
    "\uffd3\015\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\001\002" +
    "\000\016\011\uffb7\012\uffb7\032\uffb7\033\uffb7\035\uffb7\036" +
    "\uffb7\001\002\000\012\011\uffcb\014\uffd9\015\uffd9\032\111" +
    "\001\002\000\006\011\uffcd\032\110\001\002\000\012\011" +
    "\uffc8\014\uffd7\015\uffd7\032\107\001\002\000\016\011\uffdd" +
    "\014\uffdd\015\uffdd\032\uffdd\035\uffdd\036\uffdd\001\002\000" +
    "\012\011\uffcf\032\uffcf\035\uffcf\036\uffcf\001\002\000\016" +
    "\011\uffdb\014\uffdb\015\uffdb\032\uffdb\035\uffdb\036\uffdb\001" +
    "\002\000\014\004\131\005\061\013\113\015\112\031\133" +
    "\001\002\000\012\004\131\013\113\015\043\031\130\001" +
    "\002\000\016\011\uffd5\014\uffd5\015\uffd5\032\uffd5\035\uffd5" +
    "\036\uffd5\001\002\000\022\011\uffd1\012\uffd1\014\uffd1\015" +
    "\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\001\002\000\016" +
    "\011\uffda\014\uffda\015\uffda\032\uffda\035\uffda\036\uffda\001" +
    "\002\000\014\004\044\005\061\013\113\015\076\031\124" +
    "\001\002\000\016\011\uffd6\014\uffd6\015\uffd6\032\uffd6\035" +
    "\uffd6\036\uffd6\001\002\000\010\014\uffd8\015\uffd8\032\102" +
    "\001\002\000\010\014\uffd7\015\uffd7\032\126\001\002\000" +
    "\010\014\uffd9\015\uffd9\032\111\001\002\000\014\004\044" +
    "\005\061\013\113\015\076\031\124\001\002\000\010\014" +
    "\uffd7\015\uffd7\032\107\001\002\000\016\011\uffde\014\uffde" +
    "\015\uffde\032\uffde\035\uffde\036\uffde\001\002\000\022\011" +
    "\uffd2\012\uffd2\014\uffd2\015\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\001\002\000\012\004\131\013\113\015\043\031" +
    "\130\001\002\000\022\011\uffd4\012\uffd4\014\uffd4\015\uffd4" +
    "\032\uffd4\033\uffd4\035\uffd4\036\uffd4\001\002\000\004\032" +
    "\102\001\002\000\014\004\131\005\061\013\113\015\112" +
    "\031\133\001\002\000\004\032\111\001\002\000\022\004" +
    "\074\005\061\006\057\007\045\013\071\015\076\027\062" +
    "\031\077\001\002\000\024\004\074\005\061\006\057\007" +
    "\045\013\071\015\076\027\062\031\077\032\142\001\002" +
    "\000\014\011\uffc7\012\uffbe\032\uffc7\035\uffc7\036\uffc7\001" +
    "\002\000\014\011\uffca\012\uffbd\032\uffca\035\uffca\036\uffca" +
    "\001\002\000\006\032\uffa2\036\uffa2\001\002\000\022\011" +
    "\uffa5\012\uffa5\014\uffa5\015\uffa5\032\uffa5\033\uffa5\035\uffa5" +
    "\036\uffa5\001\002\000\014\011\uffcc\012\uffc0\032\uffcc\035" +
    "\uffcc\036\uffcc\001\002\000\020\011\uffce\012\uffbf\014\uffd8" +
    "\015\uffd8\032\uffce\035\uffce\036\uffce\001\002\000\012\011" +
    "\uffe5\032\uffe5\035\uffe5\036\uffe5\001\002\000\014\004\uffe0" +
    "\005\uffe0\013\uffe0\015\uffe0\031\uffe0\001\002\000\014\004" +
    "\uffe1\005\uffe1\013\uffe1\015\uffe1\031\uffe1\001\002\000\014" +
    "\004\044\005\061\013\113\015\076\031\124\001\002\000" +
    "\016\011\uffd8\014\uffd8\015\uffd8\032\uffd8\035\uffd8\036\uffd8" +
    "\001\002\000\016\011\uffd7\014\uffd7\015\uffd7\032\uffd7\035" +
    "\uffd7\036\uffd7\001\002\000\016\011\uffdf\014\146\015\147" +
    "\032\uffdf\035\uffdf\036\uffdf\001\002\000\016\011\uffd9\014" +
    "\uffd9\015\uffd9\032\uffd9\035\uffd9\036\uffd9\001\002\000\014" +
    "\004\131\007\045\013\155\015\043\031\164\001\002\000" +
    "\016\011\uffba\012\uffba\032\uffba\033\uffba\035\uffba\036\uffba" +
    "\001\002\000\016\011\uffb8\012\uffb8\032\uffb8\033\uffb8\035" +
    "\uffb8\036\uffb8\001\002\000\022\004\074\005\061\006\057" +
    "\007\045\013\071\015\076\027\062\031\077\001\002\000" +
    "\014\011\uffc9\012\uffbc\032\uffc9\035\uffc9\036\uffc9\001\002" +
    "\000\010\011\uffc7\012\uffbe\032\163\001\002\000\016\011" +
    "\uffc1\012\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\001\002" +
    "\000\014\004\131\007\045\013\155\015\043\031\164\001" +
    "\002\000\004\032\103\001\002\000\014\004\044\007\045" +
    "\013\046\015\043\031\055\001\002\000\016\011\uffc3\012" +
    "\uffc3\032\uffc3\033\uffc3\035\uffc3\036\uffc3\001\002\000\022" +
    "\004\074\005\061\006\057\007\045\013\071\015\076\027" +
    "\062\031\077\001\002\000\004\032\172\001\002\000\016" +
    "\011\uffb6\012\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6\001" +
    "\002\000\016\011\uffb5\012\uffb5\032\uffb5\033\uffb5\035\uffb5" +
    "\036\uffb5\001\002\000\004\032\175\001\002\000\012\011" +
    "\uffc5\032\uffc5\035\uffc5\036\uffc5\001\002\000\016\011\uffc2" +
    "\012\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\001\002\000" +
    "\016\004\uffee\010\uffee\017\uffee\022\uffee\026\uffee\030\uffee" +
    "\001\002\000\016\004\uffb3\010\uffb3\017\uffb3\022\uffb3\026" +
    "\uffb3\030\uffb3\001\002\000\016\004\031\010\032\017\030" +
    "\022\040\026\037\030\035\001\002\000\020\004\031\010" +
    "\032\017\030\022\040\026\037\030\035\034\uffed\001\002" +
    "\000\022\004\ufff8\010\ufff8\017\ufff8\022\ufff8\024\ufff8\026" +
    "\ufff8\030\ufff8\034\ufff8\001\002\000\004\034\205\001\002" +
    "\000\022\004\uffaa\010\uffaa\017\uffaa\022\uffaa\024\uffaa\026" +
    "\uffaa\030\uffaa\034\uffaa\001\002\000\016\011\uffbc\012\uffbc" +
    "\032\uffbc\033\uffbc\035\uffbc\036\uffbc\001\002\000\004\004" +
    "\212\001\002\000\004\035\231\001\002\000\004\032\222" +
    "\001\002\000\006\025\214\037\uff96\001\002\000\004\037" +
    "\216\001\002\000\004\037\uffe4\001\002\000\004\037\uffe3" +
    "\001\002\000\004\004\217\001\002\000\004\016\220\001" +
    "\002\000\022\004\074\005\061\006\057\007\045\013\071" +
    "\015\076\027\062\031\077\001\002\000\004\035\uffe6\001" +
    "\002\000\004\033\223\001\002\000\016\004\uffee\010\uffee" +
    "\017\uffee\022\uffee\026\uffee\030\uffee\001\002\000\016\004" +
    "\uffb3\010\uffb3\017\uffb3\022\uffb3\026\uffb3\030\uffb3\001\002" +
    "\000\016\004\031\010\032\017\030\022\040\026\037\030" +
    "\035\001\002\000\020\004\031\010\032\017\030\022\040" +
    "\026\037\030\035\034\uffed\001\002\000\004\034\230\001" +
    "\002\000\022\004\uffa9\010\uffa9\017\uffa9\022\uffa9\024\uffa9" +
    "\026\uffa9\030\uffa9\034\uffa9\001\002\000\014\004\uff96\007" +
    "\uff96\013\uff96\015\uff96\031\uff96\001\002\000\014\004\uffa8" +
    "\007\uffa8\013\uffa8\015\uffa8\031\uffa8\001\002\000\014\004" +
    "\044\007\045\013\046\015\043\031\055\001\002\000\004" +
    "\035\235\001\002\000\004\004\uff96\001\002\000\004\004" +
    "\241\001\002\000\004\004\uffa6\001\002\000\004\032\uffa7" +
    "\001\002\000\004\016\242\001\002\000\022\004\074\005" +
    "\061\006\057\007\045\013\071\015\076\027\062\031\077" +
    "\001\002\000\006\032\uffe2\035\uffe2\001\002\000\022\004" +
    "\074\005\061\006\057\007\045\013\071\015\076\027\062" +
    "\031\077\001\002\000\022\011\uffa4\012\uffa4\014\uffa4\015" +
    "\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4\001\002\000\006" +
    "\032\uffa3\036\uffa3\001\002\000\022\004\074\005\061\006" +
    "\057\007\045\013\071\015\076\027\062\031\077\001\002" +
    "\000\004\032\251\001\002\000\004\035\uffa1\001\002\000" +
    "\022\004\ufff1\010\ufff1\017\ufff1\022\ufff1\024\ufff1\026\ufff1" +
    "\030\ufff1\034\ufff1\001\002\000\004\004\256\001\002\000" +
    "\006\034\uffe8\035\uffe8\001\002\000\006\034\262\035\261" +
    "\001\002\000\004\037\257\001\002\000\004\004\260\001" +
    "\002\000\006\034\uffe7\035\uffe7\001\002\000\004\004\256" +
    "\001\002\000\004\004\263\001\002\000\004\035\uffea\001" +
    "\002\000\006\034\uffe9\035\uffe9\001\002\000\004\004\267" +
    "\001\002\000\004\035\uffec\001\002\000\010\025\214\036" +
    "\265\037\uff96\001\002\000\004\033\271\001\002\000\016" +
    "\004\uffee\010\uffee\017\uffee\022\uffee\026\uffee\030\uffee\001" +
    "\002\000\016\004\uffb3\010\uffb3\017\uffb3\022\uffb3\026\uffb3" +
    "\030\uffb3\001\002\000\016\004\031\010\032\017\030\022" +
    "\040\026\037\030\035\001\002\000\020\004\031\010\032" +
    "\017\030\022\040\026\037\030\035\034\uffed\001\002\000" +
    "\004\034\276\001\002\000\026\004\uffae\010\uffae\017\uffae" +
    "\020\uff96\021\uffae\022\uffae\024\uffae\026\uffae\030\uffae\034" +
    "\uffae\001\002\000\024\004\uffb2\010\uffb2\017\uffb2\021\uff96" +
    "\022\uffb2\024\uffb2\026\uffb2\030\uffb2\034\uffb2\001\002\000" +
    "\006\020\uffb0\021\uffb0\001\002\000\004\020\302\001\002" +
    "\000\014\004\uffb2\007\uffb2\013\uffb2\015\uffb2\031\uffb2\001" +
    "\002\000\014\004\044\007\045\013\046\015\043\031\055" +
    "\001\002\000\004\033\305\001\002\000\016\004\uffee\010" +
    "\uffee\017\uffee\022\uffee\026\uffee\030\uffee\001\002\000\016" +
    "\004\uffb3\010\uffb3\017\uffb3\022\uffb3\026\uffb3\030\uffb3\001" +
    "\002\000\016\004\031\010\032\017\030\022\040\026\037" +
    "\030\035\001\002\000\020\004\031\010\032\017\030\022" +
    "\040\026\037\030\035\034\uffed\001\002\000\004\034\312" +
    "\001\002\000\026\004\uffae\010\uffae\017\uffae\020\uff96\021" +
    "\uffae\022\uffae\024\uffae\026\uffae\030\uffae\034\uffae\001\002" +
    "\000\024\004\uffaf\010\uffaf\017\uffaf\021\uffaf\022\uffaf\024" +
    "\uffaf\026\uffaf\030\uffaf\034\uffaf\001\002\000\022\004\uffb1" +
    "\010\uffb1\017\uffb1\022\uffb1\024\uffb1\026\uffb1\030\uffb1\034" +
    "\uffb1\001\002\000\022\004\uffac\010\uffac\017\uffac\022\uffac" +
    "\024\uffac\026\uffac\030\uffac\034\uffac\001\002\000\004\021" +
    "\317\001\002\000\004\033\320\001\002\000\016\004\uffee" +
    "\010\uffee\017\uffee\022\uffee\026\uffee\030\uffee\001\002\000" +
    "\016\004\uffb2\010\uffb2\017\uffb2\022\uffb2\026\uffb2\030\uffb2" +
    "\001\002\000\016\004\031\010\032\017\030\022\040\026" +
    "\037\030\035\001\002\000\020\004\031\010\032\017\030" +
    "\022\040\026\037\030\035\034\uffed\001\002\000\004\034" +
    "\325\001\002\000\022\004\uffad\010\uffad\017\uffad\022\uffad" +
    "\024\uffad\026\uffad\030\uffad\034\uffad\001\002\000\004\034" +
    "\uffed\001\002\000\022\004\074\005\061\006\057\007\045" +
    "\013\071\015\076\027\062\031\077\001\002\000\004\034" +
    "\uff97\001\002\000\004\035\332\001\002\000\004\034\uff98" +
    "\001\002\000\004\034\334\001\002\000\004\023\uffa0\001" +
    "\002\000\022\004\uffef\010\uffef\017\uffef\022\uffef\024\uffef" +
    "\026\uffef\030\uffef\034\uffef\001\002\000\022\004\ufff5\010" +
    "\ufff5\017\ufff5\022\ufff5\024\ufff5\026\ufff5\030\ufff5\034\ufff5" +
    "\001\002\000\022\004\ufff6\010\ufff6\017\ufff6\022\ufff6\024" +
    "\ufff6\026\ufff6\030\ufff6\034\ufff6\001\002\000\022\004\ufff0" +
    "\010\ufff0\017\ufff0\022\ufff0\024\ufff0\026\ufff0\030\ufff0\034" +
    "\ufff0\001\002\000\004\002\ufffe\001\002\000\004\031\ufffb" +
    "\001\002\000\004\031\346\001\002\000\004\032\356\001" +
    "\002\000\006\032\uff9e\036\352\001\002\000\006\004\347" +
    "\032\uff9d\001\002\000\004\037\350\001\002\000\004\004" +
    "\351\001\002\000\006\032\uff9b\036\uff9b\001\002\000\004" +
    "\004\353\001\002\000\004\037\354\001\002\000\004\004" +
    "\355\001\002\000\006\032\uff9c\036\uff9c\001\002\000\004" +
    "\037\357\001\002\000\004\004\360\001\002\000\004\033" +
    "\uff9f\001\002\000\004\031\362\001\002\000\004\032\363" +
    "\001\002\000\004\033\364\001\002\000\020\004\uffee\010" +
    "\uffee\017\uffee\022\uffee\026\uffee\030\uffee\034\uffee\001\002" +
    "\000\020\004\031\010\032\017\030\022\040\026\037\030" +
    "\035\034\uff96\001\002\000\004\034\uffed\001\002\000\020" +
    "\004\031\010\032\017\030\022\040\026\037\030\035\034" +
    "\ufffa\001\002\000\004\034\ufff9\001\002\000\004\034\372" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\002\004\003\003\001\001\000\012\005" +
    "\010\050\011\051\007\052\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\010\050" +
    "\340\051\007\052\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\014\001\001\000" +
    "\034\007\024\010\026\013\020\014\032\023\033\024\015" +
    "\037\022\046\016\047\017\055\025\057\023\060\035\062" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\202\013\020\014\032" +
    "\023\033\024\015\037\022\046\016\047\017\057\023\060" +
    "\035\062\021\001\001\000\006\056\325\065\327\001\001" +
    "\000\002\001\001\000\022\017\047\021\052\030\053\031" +
    "\046\032\055\034\267\057\050\060\035\001\001\000\006" +
    "\015\212\065\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\040\065\041\001\001\000" +
    "\022\017\047\021\052\030\053\031\046\032\055\034\051" +
    "\057\050\060\035\001\001\000\002\001\001\000\004\017" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\126\021\156\032\205\057\155\060\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\016" +
    "\065\017\100\020\071\021\077\022\063\026\074\027\072" +
    "\030\057\031\066\032\062\057\064\060\035\061\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\126\021\156\032" +
    "\160\057\155\060\035\001\001\000\002\001\001\000\004" +
    "\025\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\115\017\114\057\113\060\035\001\001\000\034" +
    "\016\103\017\100\020\104\021\077\022\063\026\105\027" +
    "\072\030\057\031\066\032\062\057\064\060\035\061\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\115\017\114\001\001\000\004" +
    "\017\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\122\017\120\026\121\027\072" +
    "\057\117\060\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\122" +
    "\017\120\026\124\027\072\057\117\060\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\133\017\131\001\001\000\002\001\001\000\034" +
    "\016\065\017\143\020\071\021\142\022\144\026\074\027" +
    "\072\030\136\031\066\032\137\057\064\060\035\061\067" +
    "\001\001\000\034\016\065\017\143\020\071\021\142\022" +
    "\140\026\074\027\072\030\136\031\066\032\137\057\064" +
    "\060\035\061\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\153\017\150\026\151\027\152" +
    "\057\117\060\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\147\001\001\000\002\001\001\000\006" +
    "\017\126\021\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\016\065\017\100\020\071\021\077\022\063" +
    "\026\074\027\072\030\161\031\066\032\062\057\064\060" +
    "\035\061\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\131\021\164\001\001\000" +
    "\002\001\001\000\020\017\047\021\052\030\053\031\166" +
    "\032\055\057\050\060\035\001\001\000\002\001\001\000" +
    "\034\016\065\017\143\020\071\021\142\022\170\026\074" +
    "\027\072\030\136\031\066\032\137\057\064\060\035\061" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\177\001\001\000\004\036\200\001\001" +
    "\000\032\007\201\010\026\013\020\014\032\023\033\024" +
    "\015\037\022\046\016\047\017\057\023\060\035\062\021" +
    "\001\001\000\032\010\202\012\203\013\020\014\032\023" +
    "\033\024\015\037\022\046\016\047\017\057\023\060\035" +
    "\062\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\207\043\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\212\065\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\016\065\017\143\020\071\021\142\022\220\026\074" +
    "\027\072\030\136\031\066\032\137\057\064\060\035\061" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\223\001\001\000\004\036\224\001\001\000\032\007" +
    "\225\010\026\013\020\014\032\023\033\024\015\037\022" +
    "\046\016\047\017\057\023\060\035\062\021\001\001\000" +
    "\032\010\202\012\226\013\020\014\032\023\033\024\015" +
    "\037\022\046\016\047\017\057\023\060\035\062\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\232" +
    "\065\231\001\001\000\002\001\001\000\022\017\047\021" +
    "\052\030\053\031\046\032\055\034\233\057\050\060\035" +
    "\001\001\000\002\001\001\000\006\045\235\065\236\001" +
    "\001\000\004\023\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\016\065\017\143\020" +
    "\071\021\142\022\242\026\074\027\072\030\136\031\066" +
    "\032\137\057\064\060\035\061\067\001\001\000\002\001" +
    "\001\000\034\016\065\017\143\020\071\021\142\022\245" +
    "\026\074\027\072\030\136\031\066\032\137\057\064\060" +
    "\035\061\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\016\065\017\143\020\071\021\142\022\247\026" +
    "\074\027\072\030\136\031\066\032\137\057\064\060\035" +
    "\061\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\254\064\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\265\014\032\001\001\000\002\001\001\000\006\015\212" +
    "\065\214\001\001\000\002\001\001\000\004\011\271\001" +
    "\001\000\004\036\272\001\001\000\032\007\273\010\026" +
    "\013\020\014\032\023\033\024\015\037\022\046\016\047" +
    "\017\057\023\060\035\062\021\001\001\000\032\010\202" +
    "\012\274\013\020\014\032\023\033\024\015\037\022\046" +
    "\016\047\017\057\023\060\035\062\021\001\001\000\002" +
    "\001\001\000\010\033\300\040\276\065\277\001\001\000" +
    "\012\033\315\035\314\041\313\065\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\302\001\001\000" +
    "\022\017\047\021\052\030\053\031\046\032\055\034\303" +
    "\057\050\060\035\001\001\000\002\001\001\000\004\011" +
    "\305\001\001\000\004\036\306\001\001\000\032\007\307" +
    "\010\026\013\020\014\032\023\033\024\015\037\022\046" +
    "\016\047\017\057\023\060\035\062\021\001\001\000\032" +
    "\010\202\012\310\013\020\014\032\023\033\024\015\037" +
    "\022\046\016\047\017\057\023\060\035\062\021\001\001" +
    "\000\002\001\001\000\010\033\300\040\312\065\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\320\001" +
    "\001\000\004\035\321\001\001\000\032\007\322\010\026" +
    "\013\020\014\032\023\033\024\015\037\022\046\016\047" +
    "\017\057\023\060\035\062\021\001\001\000\032\010\202" +
    "\012\323\013\020\014\032\023\033\024\015\037\022\046" +
    "\016\047\017\057\023\060\035\062\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\332\001\001\000" +
    "\034\016\065\017\143\020\071\021\142\022\330\026\074" +
    "\027\072\030\136\031\066\032\137\057\064\060\035\061" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\360\001\001\000\006\053" +
    "\343\054\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\364\001\001\000\036\006" +
    "\365\007\366\010\026\013\020\014\032\023\033\024\015" +
    "\037\022\046\016\047\017\057\023\060\035\062\021\065" +
    "\367\001\001\000\004\012\370\001\001\000\030\010\202" +
    "\013\020\014\032\023\033\024\015\037\022\046\016\047" +
    "\017\057\023\060\035\062\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private BackTables backend;
  private Lexico lexico;
  private GeneratorC3A c3a_g;
  private GeneratorAssembler assembler;
  private String filename;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(Lexico lexico, ComplexSymbolFactory sf){
    super(lexico, sf);
    this.lexico = lexico;
    this.symbolsTable = new SymbolsTable();
    this.backend = new BackTables(symbolsTable);
    this.c3a_g = new GeneratorC3A();
    this.assembler = new GeneratorAssembler(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }
  public Parser(Lexico lexico, ComplexSymbolFactory sf, String filename){
      super(lexico, sf);
      this.lexico = lexico;
      this.filename = filename;
      this.symbolsTable = new SymbolsTable(filename);
      this.backend = new BackTables(symbolsTable, filename);
      this.c3a_g = new GeneratorC3A(filename);
      this.assembler = new GeneratorAssembler(symbolsTable, backend, c3a_g, filename);
      this.labelTrueStack = new Stack<String>();
      this.labelFalseStack = new Stack<String>();

    }

  private void closeErrorFiles(){
    SymbolsTableError.closeFile();
    CompilerError.closeFiles();
  }

  public void syntax_error(Symbol s) {
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      ComplexSymbol complexSymbol = (ComplexSymbol) s; 

      throw new CompilerError(complexSymbol, expected_names, true);
    } catch (Exception e) {
		};
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      lexico.closeTokensFile((s.left+1), (s.right+1));

      ComplexSymbol complexSymbol = (ComplexSymbol) s; 

      throw new CompilerError(complexSymbol, expected_names, false);
    } catch (Exception e) {
      closeErrorFiles();
		};
  }

  private void initTypes() {
    try{
      //init TUPLE type
      Type tuple_type = new Type(Tipo.dtype, List.of(), 32);
      symbolsTable.add("tuple", tuple_type);

      //init NUMBER type
      Type number_type = new Type(Tipo.dtype, TipoSubyacente.TS_NUMBER, 16);
      symbolsTable.add("number", number_type);

      // init String type
      Type str_type = new Type(Tipo.dtype, TipoSubyacente.TS_STRING, 16);
      symbolsTable.add("string", str_type);

      //init BOOLEAN type
      Type bool_type = new Type(Tipo.dtype,TipoSubyacente.TS_BOOLEAN, 16);
      symbolsTable.add("boolean",bool_type);

      //init VOID type
      Type void_type = new Type(Tipo.dtype, TipoSubyacente.TS_NULL, 0);
      symbolsTable.add("void", void_type);
    }catch (SymbolsTableError e){
      closeErrorFiles();
    }
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Start start_val = (Start)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DECLARE_FUNCTIONS 
            {
              Start RESULT =null;
		
                            // close SymbolsTableData.txt file
                              symbolsTable.closeSymbolsTableFiles();
                              backend.storeTables();

                              c3a_g.savec3aInFile();
                              assembler.generateAssembler();

                              closeErrorFiles();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              Init RESULT =null;
		
                              initTypes();
                              RESULT = new Init();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_FUNCTIONS ::= DEFINE_FUNCTION DECLARE_FUNCTIONS 
            {
              DeclareFunctions RESULT =null;
		
                              RESULT = new DeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_FUNCTIONS ::= MAIN 
            {
              DeclareFunctions RESULT =null;
		
                              RESULT = new DeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= inst_function inst_main M_MAIN lparen rparen lbracket BLOCK_IN MAIN_INSTRUCTIONS BLOCK_OUT rbracket 
            {
              MainS RESULT =null;
		
                              c3a_g.generateC3aInstr(
                                Code.rtn,
                                null,
                                null,
                                "PROC_main"
                              );

                              RESULT = new MainS();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // M_MAIN ::= 
            {
              MainLabel RESULT =null;
		

                              String backId = backend.addMain();
                              Type fun_type = new Type(backId, Tipo.dfun, null);
                              symbolsTable.add("main", fun_type);

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                "main"
                              );

                              c3a_g.generateC3aInstr(
                                Code.pmb,
                                null,
                                null,
                                backId
                              );

                              RESULT = new MainLabel();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              MainInstructions RESULT =null;
		
                              RESULT = new MainInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN_INSTRUCTIONS ::= EMPTY 
            {
              MainInstructions RESULT =null;
		
                              RESULT = new MainInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              Instructions RESULT =null;
		
                              RESULT = new Instructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              Instructions RESULT =null;
		
                              RESULT = new Instructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= DECLARATIONS semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= TUPLE_DECLARATION semicolon 
            {
              Instruction RESULT =null;
		
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= INSTRUCTION_FOR 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= OPERATOR_ASSIG semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= INSTRUCTION_OUT semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= CALL_FUNCTION semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK_IN ::= 
            {
              BlockIn RESULT =null;
		
                              symbolsTable.enterBlock();
                              RESULT = new BlockIn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IN",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOCK_OUT ::= 
            {
              BlockOut RESULT =null;
		
                              try{
                                symbolsTable.leaveBlock();
                                RESULT = new BlockOut();
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_OUT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS ::= id comma DECLARATIONS 
            {
              Declarations RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location declarationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Declarations declarations = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type = declarations.getType();
                                String backId;

                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String value = declarations.getValue();
                                  backId = backend.addStrVar(var_id, type.getSize(), value);
                                }else{
                                  backId = backend.addVar(var_id, type.getSize(), type.getTipoSubyacente(), false);
                                }

                                type.setBackendId(backId);

                                symbolsTable.add(var_id, type);

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  declarations.getVarId(),
                                  null,
                                  backId
                                );

                                  RESULT = declarations;

                              }catch(SymbolsTableError e){
                                String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS ::= DECLARATION 
            {
              Declarations RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Declarations declaration = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = declaration;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TUPLE_DECLARATION ::= struct lbracket FIELD_LIST rbracket id 
            {
              TupleDeclaration RESULT =null;
		
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FIELD_LIST ::= FIELD_LIST semicolon TUPLE_FIELD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FIELD_LIST ::= TUPLE_FIELD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TUPLE_FIELD ::= id two_points id 
            {
              Object RESULT =null;
		Location identificadorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identificadorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_FIELD",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARATION ::= id CONSTANT two_points id op_assig VALUE 
            {
              Declarations RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Const constant = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {

                                boolean isConst = constant != null ? constant.getIsConst() : false;

                                Type type = symbolsTable.get(type_id);

                                if(type == null || type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_STRING ){
                                    String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                    String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                    String message = "DECLARATION: Invalid subjacent type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                if(value.getTipo() == Tipo.dnull && type.getTipoSubyacente() != value.getTipoSubyacente()){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                if(value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type var_type;

                                if(isConst){
                                  var_type = new Type(Tipo.dconst, type_id, value.getValue());
                                }
                                else{
                                  var_type = new Type(Tipo.dvar, type_id);
                                }

                                int size = type.getSize();
                                if(value.getIsString()){
                                  size = value.getStringSize();
                                }

                                String var_id;
                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String str_value = (String) value.getValue();
                                  var_id = backend.addStrVar(id_var, type.getSize(), str_value);
                                }else{
                                  var_id = backend.addVar(id_var, type.getSize(), type.getTipoSubyacente(), false);
                                }

                                var_type.setBackendId(var_id);

                                String val_id = value.getVarId();
                                symbolsTable.add(id_var, var_type);

                                Declarations symDcls;
                                if(value.getIsString()){
                                  symDcls = new Declarations(val_id, var_type, (String) value.getValue());
                                }else{
                                  symDcls = new Declarations(val_id, var_type);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_STRING){
                                  c3a_g.generateC3aInstr(
                                    Code.copy,
                                    val_id,
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = symDcls;
                              }catch(SymbolsTableError e){
                                String from = id_varxleft.getLine() + ":" + id_varxleft.getColumn();
                                String to = id_varxright.getLine() + ":" + id_varxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TUPLE_ACCESS ::= id dot VALUE 
            {
              Object RESULT =null;
		Location tuplexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tuplexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String tuple = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            System.out.println("Identificador: " + tuple + " | Posicion: " + value.getValue());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_ACCESS",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONSTANT ::= constant 
            {
              Const RESULT =null;
		
                              RESULT = new Const(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONSTANT ::= EMPTY 
            {
              Const RESULT =null;
		
                              RESULT = new Const(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERATOR_ASSIG ::= id op_assig VALUE 
            {
              Assignation RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                   Type varType = symbolsTable.get(var_id);
                                   String type_id = varType.getTypeName();

                                   if (varType.getTipo() == Tipo.dconst) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "Cant assign value to constant" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                   }

                                   //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                   if (value.getTipo() == Tipo.dnull && varType.getTipoSubyacente() == value.getTipoSubyacente()) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "Value and type must have same subjacent type" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                   }

                                   if (value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "ValueType and type_id must be the same type" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                   }

                                   c3a_g.generateC3aInstr(
                                           Code.copy,
                                           value.getVarId(),
                                           null,
                                           varType.getBackendId()
                                   );

                                   RESULT = new Assignation();
                              } catch (SymbolsTableError e) {
                                  String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                  String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                  String message = e.getMessage() + " from " + from + " to " + to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARITH_OP ::= op_arithmetical_b 
            {
              ArithmeticOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARITH_OP ::= op_arithmetical_c 
            {
              ArithmeticOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARITHMETICAL_OPERATION ::= ARITHMETICAL_VALUE ARITH_OP ARITHMETICAL_VALUE 
            {
              ArithmeticOperation RESULT =null;
		Location arith_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location arith_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArithmeticValue arith_val1 = (ArithmeticValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperator op = (ArithmeticOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location arith_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticValue arith_val2 = (ArithmeticValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                ArithmeticOperation sym;
                                boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                                Code op_code;

                                switch(op.getOperator()){
                                  case "+" :
                                    op_code = Code.add;
                                    break;
                                  case "-" :
                                    op_code = Code.sub;
                                    break;
                                  case "*" :
                                    op_code = Code.prod;
                                    break;
                                  case "/" :
                                    op_code = Code.div;
                                    break;
                                  case "%" :
                                    op_code = Code.mod;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid arithmetic operator from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Integer value = null;
                                if(allConst) {
                                  Integer val1 = (Integer) arith_val1.getValue();
                                  Integer val2 = (Integer) arith_val2.getValue();

                                  switch(op.getOperator()){
                                    case "+" :
                                      value = val1 + val2;
                                      break;
                                    case "-" :
                                      value = val1 - val2;
                                      break;
                                    case "*" :
                                      value = val1 * val2;
                                      break;
                                    case "/" :
                                      if(val2 == 0){
                                        String from = arith_val2xleft.getLine() + ":" + arith_val2xleft.getColumn();
                                        String to = arith_val2xright.getLine() + ":" + arith_val2xright.getColumn();
                                        String message = "Can not divide by zero (0)" + " from "+from+" to "+to;
                                        throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                      }
                                      value = val1 / val2;
                                      break;
                                    case "%" :
                                      value = val1 % val2;
                                      break;
                                  }
                                }

                                Type type_number = symbolsTable.get("number");

                                String var_id = backend.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  arith_val1.getVarId(),
                                  arith_val2.getVarId(),
                                  var_id
                                );

                                if(allConst){
                                  sym = new ArithmeticOperation(var_id, value);
                                }
                                else{
                                  sym = new ArithmeticOperation(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARITHMETICAL_OPERATION ::= op_arithmetical_b lparen ARITHMETICAL_OPERATION rparen 
            {
              ArithmeticOperation RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                ArithmeticOperation sym = arith_op;
                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  if(arith_op.getIsConst()){
                                    Integer value = - arith_op.getValue().intValue();
                                    sym = new ArithmeticOperation(arith_op.getVarId(), value);
                                  }else{
                                    sym = new ArithmeticOperation(var_id);
                                  }

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    arith_op.getVarId(),
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARITHMETICAL_OPERATION ::= lparen ARITHMETICAL_OPERATION rparen 
            {
              ArithmeticOperation RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = arith_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NUMBER_VALUE ::= number 
            {
              NumericValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value = Integer.valueOf(n_val);
                              RESULT = new NumericValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NUMBER_VALUE ::= lparen NUMBER_VALUE rparen 
            {
              NumericValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = n_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NUMBER_VALUE ::= op_arithmetical_b NUMBER_VALUE 
            {
              NumericValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              NumericValue sym = n_val;
                              if(op.equals("-")){
                                Integer value = - n_val.getValue().intValue();
                                sym = new NumericValue(value);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARITHMETICAL_VALUE ::= NUMBER_VALUE 
            {
              ArithmeticValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Integer value = n_val.getValue();

                              Type type_number = symbolsTable.get("number");

                              String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new ArithmeticValue(var_id, value);
                            }catch(SymbolsTableError e){
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARITHMETICAL_VALUE ::= ID_VALUE 
            {
              ArithmeticValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Tipo main_var_type = id_val.getTipo();

                              if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              Type var_dtype = symbolsTable.get(id_val.getTypeName());

                              if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "ARITHMETICAL_VALUE: Invalid subjacent type" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              ArithmeticValue sym;
                              String var_id = id_val.getId();

                              if(main_var_type == Tipo.dconst){
                                Integer value = (Integer) id_val.getValue();
                                sym = new ArithmeticValue(var_id, value);
                              }else{
                                sym = new ArithmeticValue(var_id);
                              }

                              RESULT = sym;
                            }catch(SymbolsTableError e){
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARITHMETICAL_VALUE ::= ARITHMETICAL_OPERATION 
            {
              ArithmeticValue RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            ArithmeticValue sym;
                            if(arith_op.getIsConst()){
                              sym = new ArithmeticValue(arith_op.getVarId(), arith_op.getValue());
                            }else{
                              sym = new ArithmeticValue(arith_op.getVarId());
                            }

                            RESULT = sym;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARITHMETICAL_VALUE ::= CALL_FUNCTION 
            {
              ArithmeticValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              RESULT = new ArithmeticValue(var_id);
                            }catch(SymbolsTableError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARITHMETICAL_VALUE ::= op_arithmetical_b CALL_FUNCTION 
            {
              ArithmeticValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              if(op.equals("-")){
                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = new ArithmeticValue(var_id);
                            }catch(SymbolsTableError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_VALUE ::= id 
            {
              Identifier RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type id_type = symbolsTable.get(id_val);
                                String var_id = id_type.getBackendId();
                                Identifier sym = new Identifier(var_id, id_type.getTipo(), id_type.getTypeName());
                                if(id_type.getTipo() == Tipo.dconst){
                                  sym = new Identifier(var_id, id_type.getTipo(), id_type.getTypeName(), id_type.getValue());
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID_VALUE ::= lparen ID_VALUE rparen 
            {
              Identifier RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = id_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID_VALUE ::= op_logical_not ID_VALUE 
            {
              Identifier RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{

                                Identifier sym;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  id_val.getId(),
                                  null,
                                  var_id
                                );

                                if(id_val.getTipo() == Tipo.dconst){
                                  Boolean value = !((Boolean) id_val.getValue()).booleanValue();
                                  sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                }else{
                                  sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName());
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID_VALUE ::= op_arithmetical_b ID_VALUE 
            {
              Identifier RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                Identifier sym = id_val;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    id_val.getId(),
                                    null,
                                    var_id
                                  );

                                  if(id_val.getTipo() == Tipo.dconst){
                                    Integer value = -((Integer) id_val.getValue()).intValue();
                                    sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                  }else{
                                    sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName());
                                  }
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRING_VALUE ::= string 
            {
              StringValue RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String string_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new StringValue(string_val);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRING_VALUE ::= lparen STRING_VALUE rparen 
            {
              StringValue RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringValue string_val = (StringValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = string_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= ID_VALUE 
            {
              Value RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;

                              String var_id = id_val.getId();

                              if(id_val.getTipo() == Tipo.dconst){
                                sym = new Value(var_id, id_val.getTipo(), id_val.getTypeName(), id_val.getValue());
                              }
                              else {
                                sym = new Value(var_id, id_val.getTipo(), id_val.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE ::= STRING_VALUE 
            {
              Value RESULT =null;
		Location str_valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location str_valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StringValue str_value = (StringValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String value = str_value.getString().replace("\"", "");
                                Type type_string = symbolsTable.get("string");

                                if (value.length() > 1000){
                                  String from = str_valuexleft.getLine() + ":" + str_valuexleft.getColumn();
                                  String to = str_valuexright.getLine() + ":" + str_valuexright.getColumn();
                                  String message = "String must be shorter than 1000 characters " + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                // string size in bytes
                                int stringSize = value.length() * type_string.getSize();

                                Value sym = new Value(value, stringSize);

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUE ::= BOOLEAN_VALUE 
            {
              Value RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_bool = symbolsTable.get("boolean");

                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, TipoSubyacente.TS_BOOLEAN, value);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALUE ::= NUMBER_VALUE 
            {
              Value RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Integer value = n_val.getValue();

                                Type type_number = symbolsTable.get("number");

                                String var_id = backend.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  Integer.toString(value),
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, TipoSubyacente.TS_NUMBER, value);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALUE ::= VALUE_COMPARISON 
            {
              Value RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String id = comp_val.getVarId();

                              if(comp_val.getIsConst()){
                                Boolean value = comp_val.getValue();
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN, value);
                              }else{
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              Value RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Value sym;

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN, value);
                                }else{
                                  sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALUE ::= ARITHMETICAL_OPERATION 
            {
              Value RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new Value(var_id, TipoSubyacente.TS_NUMBER, arith_op.getValue());
                              }else{
                                sym = new Value(var_id, TipoSubyacente.TS_NUMBER);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALUE ::= BOOLEAN_OPERATION 
            {
              Value RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN, bool_op.getValue());
                              }else{
                                sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALUE ::= CALL_FUNCTION 
            {
              Value RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                  String from = call_fnxleft.getLine() + ":" +call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Function call : "+call_fn.getFunctionId() + " does not return any value" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new Value(var_id, Tipo.dfun, fn_type.getTypeName());
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALUE ::= instr_read lparen rparen 
            {
              Value RESULT =null;
		
                              try{
                                Type number_type = symbolsTable.get("number");
                                String var_id = backend.addTempVar(number_type.getSize(), number_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.read,
                                  null,
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, number_type.getTipoSubyacente());
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALUE ::= TUPLE_ACCESS 
            {
              Value RESULT =null;
		

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BOOLEAN_OPERATION ::= BOOLEAN_OP_VALUE op_logical BOOLEAN_OP_VALUE 
            {
              BooleanOperator RESULT =null;
		Location bool_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bool_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		BooleanOperationValue bool_val1 = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bool_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperationValue bool_val2 = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                BooleanOperator sym;
                                Code op_code;

                                switch(op){
                                  case "&&":
                                    op_code = Code.and;
                                    break;
                                  case "||":
                                    op_code = Code.or;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid boolean operator" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                boolean allConst = bool_val1.getIsConst() && bool_val2.getIsConst();
                                Boolean value = null;

                                if(allConst){
                                  Boolean val1 = (Boolean) bool_val1.getValue();
                                  Boolean val2 = (Boolean) bool_val2.getValue();
                                  switch(op){
                                  case "&&":
                                    value = val1 && val2;
                                    break;
                                  case "||":
                                    value = val1 || val2;
                                    break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                String val1_id = bool_val1.getVarId();
                                String val2_id = bool_val2.getVarId();
                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1_id,
                                  val2_id,
                                  var_id
                                );

                                if(allConst){
                                  sym = new BooleanOperator(var_id, value);
                                }else{
                                  sym = new BooleanOperator(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOOLEAN_OPERATION ::= lparen BOOLEAN_OPERATION rparen 
            {
              BooleanOperator RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BOOLEAN_OPERATION ::= op_logical_not lparen BOOLEAN_OPERATION rparen 
            {
              BooleanOperator RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                BooleanOperator sym;
                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  bool_op.getVarId(),
                                  null,
                                  var_id
                                );

                                if(bool_op.getIsConst()){
                                  Boolean value = ! bool_op.getValue().booleanValue();
                                  sym = new BooleanOperator(bool_op.getVarId(), value);
                                }else{
                                  sym = new BooleanOperator(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BOOLEAN_OP_VALUE ::= BOOLEAN_VALUE 
            {
              BooleanOperationValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_boolean = symbolsTable.get("boolean");

                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id, value);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOOLEAN_OP_VALUE ::= ID_VALUE 
            {
              BooleanOperationValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Tipo main_var_type = id_val.getTipo();
                                if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type var_dtype = symbolsTable.get(id_val.getTypeName());

                                if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "BOOLEAN_OP_VALUE: Invalid subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                BooleanOperationValue sym;
                                String var_id = id_val.getId();

                                if(main_var_type == Tipo.dconst){
                                  Boolean value = (Boolean) id_val.getValue();
                                  sym = new BooleanOperationValue(var_id, value);
                                }else{
                                  sym = new BooleanOperationValue(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOOLEAN_OP_VALUE ::= BOOLEAN_OPERATION 
            {
              BooleanOperationValue RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              BooleanOperationValue sym;
                              if(bool_op.getIsConst()){
                                sym = new BooleanOperationValue(bool_op.getVarId(), bool_op.getValue());
                              }else{
                                sym = new BooleanOperationValue(bool_op.getVarId());
                              }
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BOOLEAN_OP_VALUE ::= VALUE_COMPARISON 
            {
              BooleanOperationValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              BooleanOperationValue sym;
                              String id = new String(comp_val.getVarId());
                              if(comp_val.getIsConst()){
                                sym = new BooleanOperationValue(id, comp_val.getValue());
                              }else{
                                sym = new BooleanOperationValue(id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BOOLEAN_OP_VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              BooleanOperationValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                BooleanOperationValue sym;
                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new BooleanOperationValue(var_id, value);
                                }else{
                                  sym = new BooleanOperationValue(var_id);
                                }
                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BOOLEAN_OP_VALUE ::= CALL_FUNCTION 
            {
              BooleanOperationValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_BOOLEAN + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BOOLEAN_OP_VALUE ::= op_logical_not CALL_FUNCTION 
            {
              BooleanOperationValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BOOLEAN_VALUE ::= bool 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              RESULT = new BooleanValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BOOLEAN_VALUE ::= op_logical_not BOOLEAN_VALUE 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = ! bool_val.getValue().booleanValue();
                              RESULT = new BooleanValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BOOLEAN_VALUE ::= lparen BOOLEAN_VALUE rparen 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              ValuesComparison RESULT =null;
		Location val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Value val1 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value val2 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                ValuesComparison sym;

                                Tipo type1 = val1.getTipo();
                                TipoSubyacente subType1;

                                if(val1.getTipo() == Tipo.dnull){
                                  subType1 = val1.getTipoSubyacente();
                                }else{
                                  if(type1 != Tipo.dvar && type1 != Tipo.dconst && type1 != Tipo.darg && type1 != Tipo.dfun) {
                                    String from = val1xleft.getLine() + ":" + val1xleft.getColumn();
                                    String to = val1xright.getLine() + ":" + val1xright.getColumn();
                                    String message = "Value 1 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type dtype_type = symbolsTable.get(val1.getTypeName());
                                  subType1 = dtype_type.getTipoSubyacente();
                                }
                                // SAME FOR VALUE2
                                Tipo type2 = val2.getTipo();
                                TipoSubyacente subType2;

                                if(val2.getTipo() == Tipo.dnull){
                                  subType2 = val2.getTipoSubyacente();
                                }else{
                                  if(type2 != Tipo.dvar && type2 != Tipo.dconst && type2 != Tipo.darg && type2 != Tipo.dfun) {
                                    String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                    String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                    String message = "Value 2 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type dtype_type = symbolsTable.get(val2.getTypeName());
                                  subType2 = dtype_type.getTipoSubyacente();
                                }

                                //Check same subtype
                                if(subType1 != subType2) {
                                  String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                  String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                  String message = "Value 1 subtype is different from value 2" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Code op_code = Code.EQ;
                                switch(op){
                                  case "==":
                                    op_code = Code.EQ;
                                    break;
                                  case "!=":
                                    op_code = Code.NE;
                                    break;
                                  case "<":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.LT;
                                    break;
                                  case "<=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.LE;
                                    break;
                                  case ">":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.GT;
                                    break;
                                  case ">=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.GE;
                                    break;
                                }

                                boolean allConst = val1.getIsConst() && val2.getIsConst();

                                Boolean val = null;
                                if(allConst){
                                  switch(op){
                                    case "==":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = ((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                      }
                                      break;
                                    case "!=":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = !((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                      }
                                      break;

                                    // only integer operators
                                    case "<":
                                      val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                      break;
                                    case "<=":
                                      val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                      break;
                                    case ">":
                                      val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                      break;
                                    case ">=":
                                      val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                      break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                if(allConst){
                                  sym = new ValuesComparison(var_id, val);
                                }else{
                                  sym = new ValuesComparison(var_id);
                                }

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1.getVarId(),
                                  val2.getVarId(),
                                  var_id
                                );

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALUE_COMPARISON ::= lparen VALUE_COMPARISON rparen 
            {
              ValuesComparison RESULT =null;
		Location cmp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cmp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ValuesComparison cmp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = cmp_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= BOOLEAN_OP_VALUE 
            {
              Condition RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperationValue bool_val = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String var_id = bool_val.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);


                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new Condition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COND_T ::= 
            {
              ConditionTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new ConditionTrue();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COND_F ::= 
            {
              ConditionFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new ConditionFalse();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCTION_IF ::= inst_if COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF ELSE 
            {
              InstructionIf RESULT =null;
		
                              RESULT = new InstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // M_END ::= EMPTY 
            {
              End RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new End(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELIF ::= M_END inst_elif COND_F COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF 
            {
              ElseIf RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		End mend = (End)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new ElseIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELIF ::= 
            {
              ElseIf RESULT =null;
		
                              RESULT = new ElseIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE ::= M_END inst_else lbracket BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbracket 
            {
              Else RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		End mend = (End)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new Else();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE ::= COND_F 
            {
              Else RESULT =null;
		
                              RESULT = new Else();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // M_WHILE ::= EMPTY 
            {
              WhileLabel RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new WhileLabel(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCTION_WHILE ::= inst_while M_WHILE COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              InstructionWhile RESULT =null;
		Location mwhilexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mwhilexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		WhileLabel mwhile = (WhileLabel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new InstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCTION_FOR ::= inst_for lparen FOR_BODY rparen lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              InstructionFor RESULT =null;
		Location forBodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location forBodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		ForBody forBody = (ForBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String postInstrLabel = forBody.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                postInstrLabel
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );
                              RESULT = new InstructionFor();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_FOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LABEL_FOR ::= EMPTY 
            {
              ForLabel RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new ForLabel(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LABEL_FOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR_BODY ::= DECLARATION semicolon LABEL_FOR COND semicolon LABEL_POST_FOR OPERATOR_ASSIG 
            {
              ForBody RESULT =null;
		Location labelForxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location labelForxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ForLabel labelFor = (ForLabel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location labelPostForxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location labelPostForxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		LabelPostFor labelPostFor = (LabelPostFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    String iniForLabel = labelFor.getLabel();
                                    c3a_g.generateC3aInstr(
                                      Code.go_to,
                                      null,
                                      null,
                                      iniForLabel
                                    );

                                    RESULT = new ForBody(labelPostFor.getLabel());
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_BODY",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LABEL_POST_FOR ::= EMPTY 
            {
              LabelPostFor RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new LabelPostFor(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LABEL_POST_FOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CALL_FUNCTION ::= id lparen rparen 
            {
              CallFunction RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // Check if function and has params
                                int num_params = symbolsTable.getNumParams(fun_id);
                                if(num_params > 0 ){
                                  String from = lpxleft.getLine() + ":" + lpxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + num_params + " parameters" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String backId = fun_type.getBackendId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  0 + "",
                                  null,
                                  backId
                                );

                                RESULT = new CallFunction(fun_id, backId);
                              }catch(SymbolsTableError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CALL_FUNCTION ::= CALL_BODY rparen 
            {
              CallFunction RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CallBody body = (CallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                int body_params = body.getNumParams();
                                String fun_id = body.getFunId();
                                int fun_params = symbolsTable.getNumParams(fun_id);

                                if(fun_params != body_params){
                                  String from = bodyxleft.getLine() + ":" + bodyxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + fun_params + " parameters" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String fun_backId = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  fun_params + "",
                                  null,
                                  fun_backId
                                );



                                RESULT = new CallFunction(fun_id, fun_backId);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CALL_BODY ::= CALL_BODY comma VALUE 
            {
              CallBody RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		CallBody body = (CallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String fun_id = body.getFunId();
                                int num_params = body.getNumParams();
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param "+ num_params + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, num_params);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if (paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String fun_back_id = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new CallBody(fun_id, fun_back_id, num_params+1);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CALL_BODY ::= id lparen VALUE 
            {
              CallBody RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param 0" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, 0);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if(paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String fun_back_id = fun_type.getBackendId();

                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new CallBody(fun_id, fun_back_id, 0+1);
                              }catch(SymbolsTableError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCTION_OUT ::= instr_print lparen VALUE rparen 
            {
              InstructionOut RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                String var_id = value.getVarId();
                                TipoSubyacente subtype;

                                if(value.getTipo() == Tipo.dnull){
                                  subtype = value.getTipoSubyacente();
                                }else{
                                  Type var_type = symbolsTable.get(value.getTypeName());
                                  subtype = var_type.getTipoSubyacente();
                                }

                                if (value.getTipo() == Tipo.dnull && value.getTipoSubyacente() == TipoSubyacente.TS_STRING) {
                                  var_id = backend.addTempStrVar(value.getStringSize(), (String) value.getValue());
                                  c3a_g.generateC3aInstr(
                                    Code.print,
                                    subtype.toString(),
                                    (String) value.getValue(),
                                    var_id
                                  );
                                } else {
                                  c3a_g.generateC3aInstr(
                                    Code.print,
                                    subtype.toString(),
                                    null,
                                    var_id
                                  );
                                }
                                RESULT = new InstructionOut();
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DEFINE_FUNCTION ::= FUNCTION_INIT lbracket BLOCK_IN FUNCTION_INSTRUCTIONS FUNCTION_RETURN BLOCK_OUT rbracket 
            {
              DefineFunction RESULT =null;
		Location fun_initxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location fun_initxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		FunctionInit fun_init = (FunctionInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location fun_retxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_retxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FunctionReturn fun_ret = (FunctionReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              //check if fun type and return type are the same
                              if(fun_init.getTipoSubyacente() != fun_ret.getTipoSubyacente()) {
                                String from = fun_retxleft.getLine() + ":" + fun_retxleft.getColumn();
                                String to = fun_retxright.getLine() + ":" + fun_retxright.getColumn();
                                String message = "Invalid return type. Expected : "+fun_init.getTipoSubyacente()+", but got: "+fun_ret.getTipoSubyacente() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              // no return value
                              if(fun_init.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  null,
                                  null,
                                  fun_init.getFunId()
                                );
                              }
                              // return value
                              else{

                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  fun_ret.getVarId(),
                                  null,
                                  fun_init.getFunId()
                                );
                              }

                              RESULT = new DefineFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCTION_INIT ::= inst_function id FUNCTION_PARAMS rparen two_points id 
            {
              FunctionInit RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location fun_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fun_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		FunctionParams fun_params = (FunctionParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // check return type
                                Type return_fun_type = symbolsTable.get(type_id);
                                if(return_fun_type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Function declaration : invalid type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }
                                if(return_fun_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid return type : "+type_id+". Valid return types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                TipoSubyacente subType = return_fun_type.getTipoSubyacente();
                                ArrayList<Parameter> params = fun_params.getParams();
                                String backId = backend.addProc(fun_id, params.size(), 0, subType);

                                Type fun_type = new Type(backId, Tipo.dfun, type_id);

                                symbolsTable.add(fun_id, fun_type);

                                // add params if it has
                                for(Parameter param : params){
                                  Type param_type = param.getType();
                                  TipoSubyacente param_subType = symbolsTable.get(param.getType().getTypeName()).getTipoSubyacente();
                                  String param_backId = backend.addVar(param.getVarId(), param.getSize(), param_subType, true);
                                  param_type.setBackendId(param_backId);
                                  symbolsTable.addParam(fun_id, param_backId, param.getVarId(), param_type);
                                }

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  backId
                                );

                                c3a_g.generateC3aInstr(
                                  Code.pmb,
                                  null,
                                  null,
                                  backId
                                );

                                RESULT = new FunctionInit(backId, subType);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INIT",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCTION_PARAMS ::= FUNCTION_W_PARAMS 
            {
              FunctionParams RESULT =null;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunctionWithParams params = (FunctionWithParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new FunctionParams(params.getParams());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCTION_PARAMS ::= lparen 
            {
              FunctionParams RESULT =null;
		
                              RESULT = new FunctionParams();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCTION_W_PARAMS ::= FUNCTION_W_PARAMS comma id two_points id 
            {
              FunctionWithParams RESULT =null;
		Location prev_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location prev_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		FunctionWithParams prev_params = (FunctionWithParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Parameter param = new Parameter(id, param_type, type_type.getSize());

                                RESULT = new FunctionWithParams(param, prev_params);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION_W_PARAMS ::= lparen id two_points id 
            {
              FunctionWithParams RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Parameter param = new Parameter(id, param_type, type_type.getSize());

                                RESULT = new FunctionWithParams(param);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              FunctionInstructions RESULT =null;
		
                              RESULT = new FunctionInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION_INSTRUCTIONS ::= 
            {
              FunctionInstructions RESULT =null;
		
                              RESULT = new FunctionInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCTION_RETURN ::= inst_return VALUE semicolon 
            {
              FunctionReturn RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                // is literall
                                TipoSubyacente subType = null;
                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }

                                // is variable
                                if(value.getTipo() != Tipo.dnull){
                                  Type type_type = symbolsTable.get(value.getTypeName());
                                  subType = type_type.getTipoSubyacente();
                                }

                                RESULT = new FunctionReturn(value.getVarId(), subType);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCTION_RETURN ::= EMPTY 
            {
              FunctionReturn RESULT =null;
		
                              RESULT = new FunctionReturn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EMPTY ::= 
            {
              Empty RESULT =null;
		 RESULT = new Empty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
