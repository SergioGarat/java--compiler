
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import backend.BackTables;
import c3a.GeneratorC3A;
import c3a.InstructionC3A.Code;
import errores.CompilerError;
import errores.SymbolsTableError;
import generatorAssembler.GeneratorAssembler;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import lexico.Lexico;
import symbols.*;
import symbolsTable.SymbolsTable;
import symbolsTable.Type;
import symbolsTable.Type.Tipo;
import symbolsTable.Type.TipoSubyacente;
import java.util.ArrayList;
import java.util.Stack;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\050\004\000\002\050\003\000\002\005\014" +
    "\000\002\004\002\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\011\002" +
    "\000\002\012\002\000\002\013\005\000\002\013\003\000" +
    "\002\014\010\000\002\014\010\000\002\062\007\000\002" +
    "\061\007\000\002\063\005\000\002\015\003\000\002\015" +
    "\003\000\002\023\005\000\002\025\003\000\002\025\003" +
    "\000\002\026\005\000\002\026\006\000\002\026\005\000" +
    "\002\016\003\000\002\016\005\000\002\016\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\017\003\000\002\017\005" +
    "\000\002\017\004\000\002\017\004\000\002\020\003\000" +
    "\002\020\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\005\000\002\022\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\006\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\031\003\000\002\031\004\000\002\021\003" +
    "\000\002\021\004\000\002\021\005\000\002\032\007\000" +
    "\002\032\005\000\002\034\003\000\002\036\002\000\002" +
    "\035\002\000\002\037\014\000\002\033\003\000\002\040" +
    "\015\000\002\040\002\000\002\041\012\000\002\041\003" +
    "\000\002\042\003\000\002\046\013\000\002\047\014\000" +
    "\002\044\003\000\002\043\011\000\002\045\003\000\002" +
    "\057\005\000\002\057\004\000\002\060\005\000\002\060" +
    "\005\000\002\024\006\000\002\051\011\000\002\052\010" +
    "\000\002\053\003\000\002\053\003\000\002\054\007\000" +
    "\002\054\006\000\002\055\003\000\002\055\002\000\002" +
    "\056\005\000\002\056\003\000\002\064\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\022\uffff\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\004\343\040\342\001\002\000\004\022\007\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\032\014\001\002\000\020\004\uffef\016\uffef\021" +
    "\uffef\023\uffef\025\uffef\027\uffef\033\uffef\001\002\000\020" +
    "\004\020\016\016\021\025\023\uff9b\025\035\027\024\033" +
    "\uff9b\001\002\000\014\004\110\007\054\012\163\014\126" +
    "\030\170\001\002\000\004\034\302\001\002\000\014\015" +
    "\247\024\202\030\132\035\277\036\uff98\001\002\000\020" +
    "\004\ufff3\016\ufff3\021\ufff3\023\ufff3\025\ufff3\027\ufff3\033" +
    "\ufff3\001\002\000\004\034\276\001\002\000\004\034\275" +
    "\001\002\000\004\030\272\001\002\000\014\004\uff98\007" +
    "\uff98\012\uff98\014\uff98\030\uff98\001\002\000\006\023\253" +
    "\033\uff98\001\002\000\020\004\020\016\016\021\025\023" +
    "\uff9c\025\035\027\024\033\uff9c\001\002\000\020\004\ufff7" +
    "\016\ufff7\021\ufff7\023\ufff7\025\ufff7\027\ufff7\033\ufff7\001" +
    "\002\000\004\034\251\001\002\000\004\034\uffec\001\002" +
    "\000\020\004\ufff4\016\ufff4\021\ufff4\023\ufff4\025\ufff4\027" +
    "\ufff4\033\ufff4\001\002\000\020\004\ufff5\016\ufff5\021\ufff5" +
    "\023\ufff5\025\ufff5\027\ufff5\033\ufff5\001\002\000\004\030" +
    "\175\001\002\000\006\031\040\035\037\001\002\000\022" +
    "\004\057\005\043\006\042\007\054\012\053\014\061\026" +
    "\044\030\062\001\002\000\022\010\uffa6\011\uffa6\013\uffa6" +
    "\014\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6\001\002\000" +
    "\014\010\uffc9\011\uffc0\031\uffc9\034\uffc9\035\uffc9\001\002" +
    "\000\012\010\uffd2\031\uffd2\034\uffd2\035\uffd2\001\002\000" +
    "\016\010\uffde\013\uffde\014\uffde\031\uffde\034\uffde\035\uffde" +
    "\001\002\000\004\030\173\001\002\000\014\010\uffcc\011" +
    "\uffbf\031\uffcc\034\uffcc\035\uffcc\001\002\000\006\031\uffa5" +
    "\035\uffa5\001\002\000\020\010\uffc8\011\uffbd\013\uffd8\014" +
    "\uffd8\031\uffc8\034\uffc8\035\uffc8\001\002\000\016\010\uffcd" +
    "\013\uffdb\014\uffdb\031\uffcd\034\uffcd\035\uffcd\001\002\000" +
    "\004\011\161\001\002\000\012\010\uffc6\031\uffc6\034\uffc6" +
    "\035\uffc6\001\002\000\014\004\110\007\054\012\150\014" +
    "\126\030\153\001\002\000\016\010\uffbb\011\uffbb\031\uffbb" +
    "\032\uffbb\034\uffbb\035\uffbb\001\002\000\012\010\uffcf\031" +
    "\uffcf\034\uffcf\035\uffcf\001\002\000\006\013\141\014\142" +
    "\001\002\000\024\010\uffd6\011\uffd6\013\uffd6\014\uffd6\030" +
    "\132\031\uffd6\034\uffd6\035\uffd6\037\137\001\002\000\016" +
    "\010\uffca\013\uffd9\014\uffd9\031\uffca\034\uffca\035\uffca\001" +
    "\002\000\014\004\110\005\043\012\111\014\107\030\115" +
    "\001\002\000\022\004\057\005\043\006\042\007\054\012" +
    "\053\014\061\026\044\030\062\001\002\000\014\010\uffce" +
    "\011\uffc2\031\uffce\034\uffce\035\uffce\001\002\000\020\010" +
    "\uffd0\011\uffc1\013\uffda\014\uffda\031\uffd0\034\uffd0\035\uffd0" +
    "\001\002\000\010\010\uffc9\011\uffc0\031\106\001\002\000" +
    "\010\010\uffcc\011\uffbf\031\105\001\002\000\004\010\102" +
    "\001\002\000\012\010\uffcd\013\uffdb\014\uffdb\031\101\001" +
    "\002\000\006\010\uffcf\031\100\001\002\000\012\010\uffca" +
    "\013\uffd9\014\uffd9\031\077\001\002\000\010\010\uffce\011" +
    "\uffc2\031\076\001\002\000\014\010\uffd0\011\uffc1\013\uffda" +
    "\014\uffda\031\075\001\002\000\022\010\uffd5\011\uffd5\013" +
    "\uffd5\014\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\001\002" +
    "\000\016\010\uffb9\011\uffb9\031\uffb9\032\uffb9\034\uffb9\035" +
    "\uffb9\001\002\000\016\010\uffdf\013\uffdf\014\uffdf\031\uffdf" +
    "\034\uffdf\035\uffdf\001\002\000\012\010\uffd1\031\uffd1\034" +
    "\uffd1\035\uffd1\001\002\000\016\010\uffdd\013\uffdd\014\uffdd" +
    "\031\uffdd\034\uffdd\035\uffdd\001\002\000\022\004\057\005" +
    "\043\006\042\007\054\012\053\014\061\026\044\030\062" +
    "\001\002\000\004\031\104\001\002\000\016\010\uffb8\011" +
    "\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\001\002\000\016" +
    "\010\uffb7\011\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\001" +
    "\002\000\016\010\uffc4\011\uffc4\031\uffc4\032\uffc4\034\uffc4" +
    "\035\uffc4\001\002\000\014\004\130\005\043\012\111\014" +
    "\107\030\135\001\002\000\024\010\uffd6\011\uffd6\013\uffd6" +
    "\014\uffd6\030\132\031\uffd6\032\uffd6\034\uffd6\035\uffd6\001" +
    "\002\000\012\004\130\012\111\014\126\030\127\001\002" +
    "\000\022\010\uffd3\011\uffd3\013\uffd3\014\uffd3\031\uffd3\032" +
    "\uffd3\034\uffd3\035\uffd3\001\002\000\016\010\uffd7\013\uffd7" +
    "\014\uffd7\031\uffd7\034\uffd7\035\uffd7\001\002\000\016\010" +
    "\uffdc\013\uffdc\014\uffdc\031\uffdc\034\uffdc\035\uffdc\001\002" +
    "\000\014\004\110\005\043\012\111\014\061\030\122\001" +
    "\002\000\010\013\uffda\014\uffda\031\075\001\002\000\016" +
    "\010\uffd8\013\uffd8\014\uffd8\031\uffd8\034\uffd8\035\uffd8\001" +
    "\002\000\010\013\uffd9\014\uffd9\031\124\001\002\000\010" +
    "\013\uffdb\014\uffdb\031\101\001\002\000\014\004\110\005" +
    "\043\012\111\014\061\030\122\001\002\000\010\013\uffd9" +
    "\014\uffd9\031\077\001\002\000\016\010\uffe0\013\uffe0\014" +
    "\uffe0\031\uffe0\034\uffe0\035\uffe0\001\002\000\022\010\uffd4" +
    "\011\uffd4\013\uffd4\014\uffd4\031\uffd4\032\uffd4\034\uffd4\035" +
    "\uffd4\001\002\000\012\004\130\012\111\014\126\030\127" +
    "\001\002\000\012\004\130\012\111\014\126\030\127\001" +
    "\002\000\022\010\uffd6\011\uffd6\013\uffd6\014\uffd6\031\uffd6" +
    "\032\uffd6\034\uffd6\035\uffd6\001\002\000\004\031\075\001" +
    "\002\000\024\004\057\005\043\006\042\007\054\012\053" +
    "\014\061\026\044\030\062\031\134\001\002\000\006\031" +
    "\uffa4\035\uffa4\001\002\000\022\010\uffa7\011\uffa7\013\uffa7" +
    "\014\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\001\002\000" +
    "\014\004\130\005\043\012\111\014\107\030\135\001\002" +
    "\000\004\031\101\001\002\000\022\004\057\005\043\006" +
    "\042\007\054\012\053\014\061\026\044\030\062\001\002" +
    "\000\012\010\uffe7\031\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\014\004\uffe2\005\uffe2\012\uffe2\014\uffe2\030\uffe2\001\002" +
    "\000\014\004\uffe3\005\uffe3\012\uffe3\014\uffe3\030\uffe3\001" +
    "\002\000\014\004\110\005\043\012\111\014\061\030\122" +
    "\001\002\000\016\010\uffda\013\uffda\014\uffda\031\uffda\034" +
    "\uffda\035\uffda\001\002\000\016\010\uffd9\013\uffd9\014\uffd9" +
    "\031\uffd9\034\uffd9\035\uffd9\001\002\000\016\010\uffe1\013" +
    "\141\014\142\031\uffe1\034\uffe1\035\uffe1\001\002\000\016" +
    "\010\uffdb\013\uffdb\014\uffdb\031\uffdb\034\uffdb\035\uffdb\001" +
    "\002\000\014\004\130\007\054\012\150\014\126\030\157" +
    "\001\002\000\016\010\uffbc\011\uffbc\031\uffbc\032\uffbc\034" +
    "\uffbc\035\uffbc\001\002\000\016\010\uffba\011\uffba\031\uffba" +
    "\032\uffba\034\uffba\035\uffba\001\002\000\022\004\057\005" +
    "\043\006\042\007\054\012\053\014\061\026\044\030\062" +
    "\001\002\000\014\010\uffcb\011\uffbe\031\uffcb\034\uffcb\035" +
    "\uffcb\001\002\000\010\010\uffc9\011\uffc0\031\156\001\002" +
    "\000\016\010\uffc3\011\uffc3\031\uffc3\032\uffc3\034\uffc3\035" +
    "\uffc3\001\002\000\014\004\130\007\054\012\150\014\126" +
    "\030\157\001\002\000\004\031\076\001\002\000\014\004" +
    "\110\007\054\012\163\014\126\030\170\001\002\000\016" +
    "\010\uffc5\011\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5\001" +
    "\002\000\014\004\110\007\054\012\150\014\126\030\153" +
    "\001\002\000\016\010\uffc1\011\uffc1\031\uffc1\032\uffc1\034" +
    "\uffc1\035\uffc1\001\002\000\016\010\uffbd\011\uffbd\031\uffbd" +
    "\032\uffbd\034\uffbd\035\uffbd\001\002\000\016\010\uffc2\011" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\001\002\000\016" +
    "\010\uffc0\011\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\001" +
    "\002\000\022\004\057\005\043\006\042\007\054\012\053" +
    "\014\061\026\044\030\062\001\002\000\016\010\uffbf\011" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\001\002\000\016" +
    "\010\uffbe\011\uffbe\031\uffbe\032\uffbe\034\uffbe\035\uffbe\001" +
    "\002\000\004\031\174\001\002\000\012\010\uffc7\031\uffc7" +
    "\034\uffc7\035\uffc7\001\002\000\004\004\200\001\002\000" +
    "\004\034\235\001\002\000\004\031\225\001\002\000\006" +
    "\024\202\036\uff98\001\002\000\004\036\204\001\002\000" +
    "\004\036\uffe6\001\002\000\004\036\uffe5\001\002\000\006" +
    "\004\207\030\206\001\002\000\004\015\216\001\002\000" +
    "\004\004\212\001\002\000\004\015\210\001\002\000\022" +
    "\004\057\005\043\006\042\007\054\012\053\014\061\026" +
    "\044\030\062\001\002\000\004\034\uffeb\001\002\000\004" +
    "\035\213\001\002\000\004\004\214\001\002\000\004\031" +
    "\215\001\002\000\004\015\uffe9\001\002\000\004\030\220" +
    "\001\002\000\004\034\uffea\001\002\000\022\004\057\005" +
    "\043\006\042\007\054\012\053\014\061\026\044\030\062" +
    "\001\002\000\004\035\222\001\002\000\022\004\057\005" +
    "\043\006\042\007\054\012\053\014\061\026\044\030\062" +
    "\001\002\000\004\031\224\001\002\000\004\034\uffe8\001" +
    "\002\000\004\032\226\001\002\000\014\004\uffef\016\uffef" +
    "\021\uffef\025\uffef\027\uffef\001\002\000\014\004\uffb5\016" +
    "\uffb5\021\uffb5\025\uffb5\027\uffb5\001\002\000\014\004\020" +
    "\016\016\021\025\025\035\027\024\001\002\000\016\004" +
    "\020\016\016\021\025\025\035\027\024\033\uffee\001\002" +
    "\000\020\004\ufff8\016\ufff8\021\ufff8\023\ufff8\025\ufff8\027" +
    "\ufff8\033\ufff8\001\002\000\004\033\234\001\002\000\020" +
    "\004\uffab\016\uffab\021\uffab\023\uffab\025\uffab\027\uffab\033" +
    "\uffab\001\002\000\014\004\uff98\007\uff98\012\uff98\014\uff98" +
    "\030\uff98\001\002\000\014\004\uffaa\007\uffaa\012\uffaa\014" +
    "\uffaa\030\uffaa\001\002\000\014\004\110\007\054\012\163" +
    "\014\126\030\170\001\002\000\010\011\161\032\uffb6\034" +
    "\uffb6\001\002\000\004\034\242\001\002\000\004\004\uff98" +
    "\001\002\000\004\004\246\001\002\000\004\004\uffa8\001" +
    "\002\000\004\031\uffa9\001\002\000\004\015\247\001\002" +
    "\000\022\004\057\005\043\006\042\007\054\012\053\014" +
    "\061\026\044\030\062\001\002\000\006\031\uffe4\034\uffe4" +
    "\001\002\000\020\004\ufff2\016\ufff2\021\ufff2\023\ufff2\025" +
    "\ufff2\027\ufff2\033\ufff2\001\002\000\004\033\uffee\001\002" +
    "\000\022\004\057\005\043\006\042\007\054\012\053\014" +
    "\061\026\044\030\062\001\002\000\004\033\uff99\001\002" +
    "\000\004\034\256\001\002\000\004\033\uff9a\001\002\000" +
    "\004\033\260\001\002\000\004\022\uffa2\001\002\000\014" +
    "\004\110\007\054\012\163\014\126\030\170\001\002\000" +
    "\014\004\uffad\007\uffad\012\uffad\014\uffad\030\uffad\001\002" +
    "\000\004\032\264\001\002\000\014\004\uffef\016\uffef\021" +
    "\uffef\025\uffef\027\uffef\001\002\000\014\004\uffb5\016\uffb5" +
    "\021\uffb5\025\uffb5\027\uffb5\001\002\000\014\004\020\016" +
    "\016\021\025\025\035\027\024\001\002\000\016\004\020" +
    "\016\016\021\025\025\035\027\024\033\uffee\001\002\000" +
    "\004\033\271\001\002\000\020\004\uffac\016\uffac\021\uffac" +
    "\023\uffac\025\uffac\027\uffac\033\uffac\001\002\000\022\004" +
    "\057\005\043\006\042\007\054\012\053\014\061\026\044" +
    "\030\062\001\002\000\004\031\274\001\002\000\004\034" +
    "\uffa3\001\002\000\020\004\ufff0\016\ufff0\021\ufff0\023\ufff0" +
    "\025\ufff0\027\ufff0\033\ufff0\001\002\000\020\004\ufff6\016" +
    "\ufff6\021\ufff6\023\ufff6\025\ufff6\027\ufff6\033\ufff6\001\002" +
    "\000\004\004\301\001\002\000\004\034\uffed\001\002\000" +
    "\010\024\202\035\277\036\uff98\001\002\000\020\004\ufff1" +
    "\016\ufff1\021\ufff1\023\ufff1\025\ufff1\027\ufff1\033\ufff1\001" +
    "\002\000\004\032\304\001\002\000\014\004\uffef\016\uffef" +
    "\021\uffef\025\uffef\027\uffef\001\002\000\014\004\uffb5\016" +
    "\uffb5\021\uffb5\025\uffb5\027\uffb5\001\002\000\014\004\020" +
    "\016\016\021\025\025\035\027\024\001\002\000\016\004" +
    "\020\016\016\021\025\025\035\027\024\033\uffee\001\002" +
    "\000\004\033\311\001\002\000\024\004\uffb0\016\uffb0\017" +
    "\uff98\020\uffb0\021\uffb0\023\uffb0\025\uffb0\027\uffb0\033\uffb0" +
    "\001\002\000\022\004\uffb4\016\uffb4\020\uff98\021\uffb4\023" +
    "\uffb4\025\uffb4\027\uffb4\033\uffb4\001\002\000\006\017\uffb2" +
    "\020\uffb2\001\002\000\004\017\315\001\002\000\014\004" +
    "\uffb4\007\uffb4\012\uffb4\014\uffb4\030\uffb4\001\002\000\014" +
    "\004\110\007\054\012\163\014\126\030\170\001\002\000" +
    "\004\032\320\001\002\000\014\004\uffef\016\uffef\021\uffef" +
    "\025\uffef\027\uffef\001\002\000\014\004\uffb5\016\uffb5\021" +
    "\uffb5\025\uffb5\027\uffb5\001\002\000\014\004\020\016\016" +
    "\021\025\025\035\027\024\001\002\000\016\004\020\016" +
    "\016\021\025\025\035\027\024\033\uffee\001\002\000\004" +
    "\033\325\001\002\000\024\004\uffb0\016\uffb0\017\uff98\020" +
    "\uffb0\021\uffb0\023\uffb0\025\uffb0\027\uffb0\033\uffb0\001\002" +
    "\000\022\004\uffb1\016\uffb1\020\uffb1\021\uffb1\023\uffb1\025" +
    "\uffb1\027\uffb1\033\uffb1\001\002\000\020\004\uffb3\016\uffb3" +
    "\021\uffb3\023\uffb3\025\uffb3\027\uffb3\033\uffb3\001\002\000" +
    "\020\004\uffae\016\uffae\021\uffae\023\uffae\025\uffae\027\uffae" +
    "\033\uffae\001\002\000\004\020\332\001\002\000\004\032" +
    "\333\001\002\000\014\004\uffef\016\uffef\021\uffef\025\uffef" +
    "\027\uffef\001\002\000\014\004\uffb4\016\uffb4\021\uffb4\025" +
    "\uffb4\027\uffb4\001\002\000\014\004\020\016\016\021\025" +
    "\025\035\027\024\001\002\000\016\004\020\016\016\021" +
    "\025\025\035\027\024\033\uffee\001\002\000\004\033\340" +
    "\001\002\000\020\004\uffaf\016\uffaf\021\uffaf\023\uffaf\025" +
    "\uffaf\027\uffaf\033\uffaf\001\002\000\004\002\ufffe\001\002" +
    "\000\004\030\ufffb\001\002\000\004\030\346\001\002\000" +
    "\004\031\356\001\002\000\006\031\uffa0\035\352\001\002" +
    "\000\006\004\347\031\uff9f\001\002\000\004\036\350\001" +
    "\002\000\004\004\351\001\002\000\006\031\uff9d\035\uff9d" +
    "\001\002\000\004\004\353\001\002\000\004\036\354\001" +
    "\002\000\004\004\355\001\002\000\006\031\uff9e\035\uff9e" +
    "\001\002\000\004\036\357\001\002\000\004\004\360\001" +
    "\002\000\004\032\uffa1\001\002\000\004\030\362\001\002" +
    "\000\004\031\363\001\002\000\004\032\364\001\002\000" +
    "\016\004\uffef\016\uffef\021\uffef\025\uffef\027\uffef\033\uffef" +
    "\001\002\000\016\004\020\016\016\021\025\025\035\027" +
    "\024\033\uff98\001\002\000\004\033\uffee\001\002\000\016" +
    "\004\020\016\016\021\025\025\035\027\024\033\ufffa\001" +
    "\002\000\004\033\ufff9\001\002\000\004\033\372\001\002" +
    "\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\002\004\003\003\001\001\000\012\005" +
    "\010\050\011\051\007\052\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\010\050" +
    "\340\051\007\052\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\014\001\001\000" +
    "\032\007\026\010\027\013\021\014\031\023\030\024\016" +
    "\037\033\046\032\047\020\055\025\057\022\060\035\001" +
    "\001\000\022\017\163\021\165\030\166\031\237\032\170" +
    "\034\302\057\164\060\035\001\001\000\002\001\001\000" +
    "\006\015\200\064\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\260\064\261\001\001\000\006\056\251\064\253\001\001" +
    "\000\026\010\231\013\021\014\031\023\030\024\016\037" +
    "\033\046\032\047\020\057\022\060\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\016\047\017\063\020\054\021\062\022\045\026" +
    "\057\027\055\030\040\031\050\032\044\057\046\060\035" +
    "\063\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\124" +
    "\021\151\032\153\057\150\060\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\113\017\111\057" +
    "\112\060\035\001\001\000\034\016\067\017\073\020\070" +
    "\021\072\022\066\026\071\027\055\030\064\031\050\032" +
    "\065\057\046\060\035\063\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\016\047\017\063\020\054\021" +
    "\062\022\102\026\057\027\055\030\040\031\050\032\044" +
    "\057\046\060\035\063\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\113\017\111\001\001\000\002\001\001\000\004\017" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\120\017\115\026\117\027\055\057" +
    "\116\060\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\120\017" +
    "\115\026\122\027\055\057\116\060\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\111\001\001\000\004\017\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\016\047\017\063\020\054\021" +
    "\062\022\132\026\057\027\055\030\040\031\050\032\044" +
    "\057\046\060\035\063\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\135\017\130\001\001\000\002" +
    "\001\001\000\034\016\047\017\063\020\054\021\062\022" +
    "\137\026\057\027\055\030\040\031\050\032\044\057\046" +
    "\060\035\063\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\146\017\143\026\144" +
    "\027\145\057\116\060\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\142\001\001\000\002\001\001" +
    "\000\006\017\124\021\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\016\047\017\073\020\054\021\072" +
    "\022\066\026\057\027\055\030\154\031\050\032\065\057" +
    "\046\060\035\063\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\130\021\157\001" +
    "\001\000\002\001\001\000\020\017\163\021\165\030\166" +
    "\031\161\032\170\057\164\060\035\001\001\000\002\001" +
    "\001\000\014\017\124\021\151\032\171\057\150\060\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\016\047\017\073\020\054" +
    "\021\072\022\066\026\057\027\055\030\064\031\050\032" +
    "\065\057\046\060\035\063\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\175\043\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\200\064\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\016\047\017\063\020\054\021\062\022\210" +
    "\026\057\027\055\030\040\031\050\032\044\057\046\060" +
    "\035\063\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\216\001\001\000\002\001\001\000\034\016\047" +
    "\017\063\020\054\021\062\022\220\026\057\027\055\030" +
    "\040\031\050\032\044\057\046\060\035\063\051\001\001" +
    "\000\002\001\001\000\034\016\047\017\063\020\054\021" +
    "\062\022\222\026\057\027\055\030\040\031\050\032\044" +
    "\057\046\060\035\063\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\226\001\001" +
    "\000\004\036\227\001\001\000\030\007\230\010\027\013" +
    "\021\014\031\023\030\024\016\037\033\046\032\047\020" +
    "\057\022\060\035\001\001\000\030\010\231\012\232\013" +
    "\021\014\031\023\030\024\016\037\033\046\032\047\020" +
    "\057\022\060\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\236\064\235\001\001" +
    "\000\002\001\001\000\022\017\163\021\165\030\166\031" +
    "\237\032\170\034\240\057\164\060\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\242\064\243\001" +
    "\001\000\004\023\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\016\047\017\063\020" +
    "\054\021\062\022\247\026\057\027\055\030\040\031\050" +
    "\032\044\057\046\060\035\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\256\001\001\000\034" +
    "\016\047\017\063\020\054\021\062\022\254\026\057\027" +
    "\055\030\040\031\050\032\044\057\046\060\035\063\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\163" +
    "\021\165\030\166\031\237\032\170\034\262\057\164\060" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\264\001\001\000\004\036\265\001\001\000\030\007" +
    "\266\010\027\013\021\014\031\023\030\024\016\037\033" +
    "\046\032\047\020\057\022\060\035\001\001\000\030\010" +
    "\231\012\267\013\021\014\031\023\030\024\016\037\033" +
    "\046\032\047\020\057\022\060\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\016\047\017\063\020\054" +
    "\021\062\022\272\026\057\027\055\030\040\031\050\032" +
    "\044\057\046\060\035\063\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\277\014\031\001\001\000\002\001\001\000\006" +
    "\015\200\064\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\304\001\001\000\004\036\305\001\001" +
    "\000\030\007\306\010\027\013\021\014\031\023\030\024" +
    "\016\037\033\046\032\047\020\057\022\060\035\001\001" +
    "\000\030\010\231\012\307\013\021\014\031\023\030\024" +
    "\016\037\033\046\032\047\020\057\022\060\035\001\001" +
    "\000\002\001\001\000\010\033\313\040\311\064\312\001" +
    "\001\000\012\033\330\035\327\041\326\064\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\315\001" +
    "\001\000\022\017\163\021\165\030\166\031\237\032\170" +
    "\034\316\057\164\060\035\001\001\000\002\001\001\000" +
    "\004\011\320\001\001\000\004\036\321\001\001\000\030" +
    "\007\322\010\027\013\021\014\031\023\030\024\016\037" +
    "\033\046\032\047\020\057\022\060\035\001\001\000\030" +
    "\010\231\012\323\013\021\014\031\023\030\024\016\037" +
    "\033\046\032\047\020\057\022\060\035\001\001\000\002" +
    "\001\001\000\010\033\313\040\325\064\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\333\001\001\000" +
    "\004\035\334\001\001\000\030\007\335\010\027\013\021" +
    "\014\031\023\030\024\016\037\033\046\032\047\020\057" +
    "\022\060\035\001\001\000\030\010\231\012\336\013\021" +
    "\014\031\023\030\024\016\037\033\046\032\047\020\057" +
    "\022\060\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\360\001\001\000\006\053" +
    "\343\054\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\364\001\001\000\034\006" +
    "\365\007\366\010\027\013\021\014\031\023\030\024\016" +
    "\037\033\046\032\047\020\057\022\060\035\064\367\001" +
    "\001\000\004\012\370\001\001\000\026\010\231\013\021" +
    "\014\031\023\030\024\016\037\033\046\032\047\020\057" +
    "\022\060\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private BackTables backend;
  private Lexico lexico;
  private GeneratorC3A c3a_g;
  private GeneratorAssembler assembler;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(Lexico lexico, ComplexSymbolFactory sf){
    super(lexico, sf);
    this.lexico = lexico;
    this.symbolsTable = new SymbolsTable();
    this.backend = new BackTables(symbolsTable);
    this.c3a_g = new GeneratorC3A();
    this.assembler = new GeneratorAssembler(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  private void closeErrorFiles(){
    SymbolsTableError.closeFile();
    CompilerError.closeFiles();
  }

  public void syntax_error(Symbol s) {
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      ComplexSymbol complexSymbol = (ComplexSymbol) s; 

      throw new CompilerError(complexSymbol, expected_names, true);
    } catch (Exception e) {
		};
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      ArrayList<String> expected_names = new ArrayList<String>();

      for(Integer i : expected){
        expected_names.add(symbl_name_from_id(i));
      }

      lexico.closeTokensFile((s.left+1), (s.right+1));

      ComplexSymbol complexSymbol = (ComplexSymbol) s; 

      throw new CompilerError(complexSymbol, expected_names, false);
    } catch (Exception e) {
      closeErrorFiles();
		};
  }

  private void initTypes() {
    try{
      //init NUMBER type
      Type number_type = new Type(Tipo.dtype, TipoSubyacente.TS_NUMBER, 16);
      symbolsTable.add("number", number_type);

      // init String type
      Type str_type = new Type(Tipo.dtype, TipoSubyacente.TS_STRING, 16);
      symbolsTable.add("string", str_type);

      //init BOOLEAN type
      Type bool_type = new Type(Tipo.dtype,TipoSubyacente.TS_BOOLEAN, 16);
      symbolsTable.add("boolean",bool_type);

      //init VOID type
      Type void_type = new Type(Tipo.dtype, TipoSubyacente.TS_NULL, 0);
      symbolsTable.add("void", void_type);
    }catch (SymbolsTableError e){
      closeErrorFiles();
    }
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Start start_val = (Start)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DECLARE_FUNCTIONS 
            {
              Start RESULT =null;
		
                            // close SymbolsTableData.txt file
                              symbolsTable.closeSymbolsTableFiles();
                              backend.storeTables();

                              c3a_g.savec3aInFile();
                              assembler.generateAssembler();

                              closeErrorFiles();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              Init RESULT =null;
		
                              initTypes();
                              RESULT = new Init();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_FUNCTIONS ::= DEFINE_FUNCTION DECLARE_FUNCTIONS 
            {
              DeclareFunctions RESULT =null;
		
                              RESULT = new DeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_FUNCTIONS ::= MAIN 
            {
              DeclareFunctions RESULT =null;
		
                              RESULT = new DeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= inst_function inst_main M_MAIN lparen rparen lbracket BLOCK_IN MAIN_INSTRUCTIONS BLOCK_OUT rbracket 
            {
              MainS RESULT =null;
		
                              c3a_g.generateC3aInstr(
                                Code.rtn,
                                null,
                                null,
                                "PROC_main"
                              );

                              RESULT = new MainS();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // M_MAIN ::= 
            {
              MainLabel RESULT =null;
		

                              String backId = backend.addMain();
                              Type fun_type = new Type(backId, Tipo.dfun, null);
                              symbolsTable.add("main", fun_type);

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                "main"
                              );

                              c3a_g.generateC3aInstr(
                                Code.pmb,
                                null,
                                null,
                                backId
                              );

                              RESULT = new MainLabel();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              MainInstructions RESULT =null;
		
                              RESULT = new MainInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN_INSTRUCTIONS ::= EMPTY 
            {
              MainInstructions RESULT =null;
		
                              RESULT = new MainInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              Instructions RESULT =null;
		
                              RESULT = new Instructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              Instructions RESULT =null;
		
                              RESULT = new Instructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= DECLARATIONS semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= INSTRUCTION_FOR 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= OPERATOR_ASSIG semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= INSTRUCTION_OUT semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= CALL_FUNCTION semicolon 
            {
              Instruction RESULT =null;
		
                              RESULT = new Instruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK_IN ::= 
            {
              BlockIn RESULT =null;
		
                              symbolsTable.enterBlock();
                              RESULT = new BlockIn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IN",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK_OUT ::= 
            {
              BlockOut RESULT =null;
		
                              try{
                                symbolsTable.leaveBlock();
                                RESULT = new BlockOut();
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_OUT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATIONS ::= id comma DECLARATIONS 
            {
              Declarations RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location declarationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Declarations declarations = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type = declarations.getType();
                                String backId;

                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String value = declarations.getValue();
                                  backId = backend.addStrVar(var_id, type.getSize(), value);
                                }else{
                                  backId = backend.addVar(var_id, type.getSize(), type.getTipoSubyacente(), false);
                                }

                                type.setBackendId(backId);

                                symbolsTable.add(var_id, type);

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  declarations.getVarId(),
                                  null,
                                  backId
                                );

                                  RESULT = declarations;

                              }catch(SymbolsTableError e){
                                String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS ::= DECLARATION 
            {
              Declarations RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Declarations declaration = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = declaration;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATION ::= id CONSTANT two_points id op_assig VALUE 
            {
              Declarations RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Const constant = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {

                                boolean isConst = constant != null ? constant.getIsConst() : false;

                                Type type = symbolsTable.get(type_id);

                                if(type == null || type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER
                                  && type.getTipoSubyacente() != TipoSubyacente.TS_STRING ){
                                    String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                    String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                    String message = "DECLARATION: Invalid subjacent type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                if(value.getTipo() == Tipo.dnull && type.getTipoSubyacente() != value.getTipoSubyacente()){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                if(value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Value and type must have same subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type var_type;

                                if(isConst){
                                  var_type = new Type(Tipo.dconst, type_id, value.getValue());
                                }
                                else{
                                  var_type = new Type(Tipo.dvar, type_id);
                                }

                                int size = type.getSize();
                                if(value.getIsString()){
                                  size = value.getStringSize();
                                }

                                String var_id;
                                if(type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String str_value = (String) value.getValue();
                                  var_id = backend.addStrVar(id_var, type.getSize(), str_value);
                                }else{
                                  var_id = backend.addVar(id_var, type.getSize(), type.getTipoSubyacente(), false);
                                }

                                var_type.setBackendId(var_id);

                                String val_id = value.getVarId();
                                symbolsTable.add(id_var, var_type);

                                Declarations symDcls;
                                if(value.getIsString()){
                                  symDcls = new Declarations(val_id, var_type, (String) value.getValue());
                                }else{
                                  symDcls = new Declarations(val_id, var_type);
                                }

                                if(type.getTipoSubyacente() != TipoSubyacente.TS_STRING){
                                  c3a_g.generateC3aInstr(
                                    Code.copy,
                                    val_id,
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = symDcls;
                              }catch(SymbolsTableError e){
                                String from = id_varxleft.getLine() + ":" + id_varxleft.getColumn();
                                String to = id_varxright.getLine() + ":" + id_varxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARATION ::= id CONSTANT two_points TUPLE_TYPE op_assig TUPLE_VALUE 
            {
              Declarations RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Const constant = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location tuple_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tuple_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object tuple_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TUPLE_TYPE ::= lparen id comma id rparen 
            {
              Object RESULT =null;
		Location type_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location type_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String type_1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location type_2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String type_2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                             Type type1 = symbolsTable.get(type_1);
                             Type type2 = symbolsTable.get(type_2);

                             System.out.println("Primer tipo: " + type1.getTipo() + " | Primer tipoSubyacente: " + type1.getTipoSubyacente());
                             System.out.println("Segundo tipo: " + type2.getTipo() + " | Segundo tipoSubyacente: " + type2.getTipoSubyacente());
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_TYPE",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TUPLE_VALUE ::= lparen VALUE comma VALUE rparen 
            {
              Object RESULT =null;
		Location value1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location value1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Value value1 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location value2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location value2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value value2 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              System.out.println("Primer valor: " + value1);
                              System.out.println("Segundo valor: " + value2);
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_VALUE",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TUPLE_ACCESS ::= id dot VALUE 
            {
              Object RESULT =null;
		Location tuplexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tuplexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String tuple = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            System.out.println("Identificador: " + tuple + " | Posicion: " + value.getValue());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLE_ACCESS",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONSTANT ::= constant 
            {
              Const RESULT =null;
		
                              RESULT = new Const(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONSTANT ::= EMPTY 
            {
              Const RESULT =null;
		
                              RESULT = new Const(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERATOR_ASSIG ::= id op_assig VALUE 
            {
              Assignation RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                   Type varType = symbolsTable.get(var_id);
                                   String type_id = varType.getTypeName();

                                   if (varType.getTipo() == Tipo.dconst) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "Cant assign value to constant" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                   }

                                   //IF LITERALL (type = null) CHECK SUBJACENT Tipo
                                   if (value.getTipo() == Tipo.dnull && varType.getTipoSubyacente() == value.getTipoSubyacente()) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "Value and type must have same subjacent type" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                   }

                                   if (value.getTipo() != Tipo.dnull && !value.getTypeName().equals(type_id)) {
                                       String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                       String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                       String message = "ValueType and type_id must be the same type" + " from " + from + " to " + to;
                                       throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                   }

                                   c3a_g.generateC3aInstr(
                                           Code.copy,
                                           value.getVarId(),
                                           null,
                                           varType.getBackendId()
                                   );

                                   RESULT = new Assignation();
                              } catch (SymbolsTableError e) {
                                  String from = var_idxleft.getLine() + ":" + var_idxleft.getColumn();
                                  String to = var_idxright.getLine() + ":" + var_idxright.getColumn();
                                  String message = e.getMessage() + " from " + from + " to " + to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARITH_OP ::= op_arithmetical_b 
            {
              ArithmeticOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARITH_OP ::= op_arithmetical_c 
            {
              ArithmeticOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARITHMETICAL_OPERATION ::= ARITHMETICAL_VALUE ARITH_OP ARITHMETICAL_VALUE 
            {
              ArithmeticOperation RESULT =null;
		Location arith_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location arith_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArithmeticValue arith_val1 = (ArithmeticValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperator op = (ArithmeticOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location arith_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticValue arith_val2 = (ArithmeticValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                ArithmeticOperation sym;
                                boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                                Code op_code;

                                switch(op.getOperator()){
                                  case "+" :
                                    op_code = Code.add;
                                    break;
                                  case "-" :
                                    op_code = Code.sub;
                                    break;
                                  case "*" :
                                    op_code = Code.prod;
                                    break;
                                  case "/" :
                                    op_code = Code.div;
                                    break;
                                  case "%" :
                                    op_code = Code.mod;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid arithmetic operator from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Integer value = null;
                                if(allConst) {
                                  Integer val1 = (Integer) arith_val1.getValue();
                                  Integer val2 = (Integer) arith_val2.getValue();

                                  switch(op.getOperator()){
                                    case "+" :
                                      value = val1 + val2;
                                      break;
                                    case "-" :
                                      value = val1 - val2;
                                      break;
                                    case "*" :
                                      value = val1 * val2;
                                      break;
                                    case "/" :
                                      if(val2 == 0){
                                        String from = arith_val2xleft.getLine() + ":" + arith_val2xleft.getColumn();
                                        String to = arith_val2xright.getLine() + ":" + arith_val2xright.getColumn();
                                        String message = "Can not divide by zero (0)" + " from "+from+" to "+to;
                                        throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                      }
                                      value = val1 / val2;
                                      break;
                                    case "%" :
                                      value = val1 % val2;
                                      break;
                                  }
                                }

                                Type type_number = symbolsTable.get("number");

                                String var_id = backend.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  arith_val1.getVarId(),
                                  arith_val2.getVarId(),
                                  var_id
                                );

                                if(allConst){
                                  sym = new ArithmeticOperation(var_id, value);
                                }
                                else{
                                  sym = new ArithmeticOperation(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARITHMETICAL_OPERATION ::= op_arithmetical_b lparen ARITHMETICAL_OPERATION rparen 
            {
              ArithmeticOperation RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                ArithmeticOperation sym = arith_op;
                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  if(arith_op.getIsConst()){
                                    Integer value = - arith_op.getValue().intValue();
                                    sym = new ArithmeticOperation(arith_op.getVarId(), value);
                                  }else{
                                    sym = new ArithmeticOperation(var_id);
                                  }

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    arith_op.getVarId(),
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARITHMETICAL_OPERATION ::= lparen ARITHMETICAL_OPERATION rparen 
            {
              ArithmeticOperation RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = arith_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NUMBER_VALUE ::= number 
            {
              NumericValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value = Integer.valueOf(n_val);
                              RESULT = new NumericValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NUMBER_VALUE ::= lparen NUMBER_VALUE rparen 
            {
              NumericValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = n_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NUMBER_VALUE ::= op_arithmetical_b NUMBER_VALUE 
            {
              NumericValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              NumericValue sym = n_val;
                              if(op.equals("-")){
                                Integer value = - n_val.getValue().intValue();
                                sym = new NumericValue(value);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARITHMETICAL_VALUE ::= NUMBER_VALUE 
            {
              ArithmeticValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Integer value = n_val.getValue();

                              Type type_number = symbolsTable.get("number");

                              String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new ArithmeticValue(var_id, value);
                            }catch(SymbolsTableError e){
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARITHMETICAL_VALUE ::= ID_VALUE 
            {
              ArithmeticValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Tipo main_var_type = id_val.getTipo();

                              if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              Type var_dtype = symbolsTable.get(id_val.getTypeName());

                              if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = "ARITHMETICAL_VALUE: Invalid subjacent type" + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              ArithmeticValue sym;
                              String var_id = id_val.getId();

                              if(main_var_type == Tipo.dconst){
                                Integer value = (Integer) id_val.getValue();
                                sym = new ArithmeticValue(var_id, value);
                              }else{
                                sym = new ArithmeticValue(var_id);
                              }

                              RESULT = sym;
                            }catch(SymbolsTableError e){
                              throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARITHMETICAL_VALUE ::= ARITHMETICAL_OPERATION 
            {
              ArithmeticValue RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            ArithmeticValue sym;
                            if(arith_op.getIsConst()){
                              sym = new ArithmeticValue(arith_op.getVarId(), arith_op.getValue());
                            }else{
                              sym = new ArithmeticValue(arith_op.getVarId());
                            }

                            RESULT = sym;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARITHMETICAL_VALUE ::= CALL_FUNCTION 
            {
              ArithmeticValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              RESULT = new ArithmeticValue(var_id);
                            }catch(SymbolsTableError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARITHMETICAL_VALUE ::= op_arithmetical_b CALL_FUNCTION 
            {
              ArithmeticValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                              if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return",
                                call_fn.getBackendId(),
                                var_id
                              );

                              if(op.equals("-")){
                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = new ArithmeticValue(var_id);
                            }catch(SymbolsTableError e){
                              String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                              String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                              String message = e.getMessage() + " from "+from+" to "+to;
                              throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ID_VALUE ::= id 
            {
              Identifier RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type id_type = symbolsTable.get(id_val);
                                String var_id = id_type.getBackendId();
                                Identifier sym = new Identifier(var_id, id_type.getTipo(), id_type.getTypeName());
                                if(id_type.getTipo() == Tipo.dconst){
                                  sym = new Identifier(var_id, id_type.getTipo(), id_type.getTypeName(), id_type.getValue());
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID_VALUE ::= lparen ID_VALUE rparen 
            {
              Identifier RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = id_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_VALUE ::= op_logical_not ID_VALUE 
            {
              Identifier RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{

                                Identifier sym;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  id_val.getId(),
                                  null,
                                  var_id
                                );

                                if(id_val.getTipo() == Tipo.dconst){
                                  Boolean value = !((Boolean) id_val.getValue()).booleanValue();
                                  sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                }else{
                                  sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName());
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID_VALUE ::= op_arithmetical_b ID_VALUE 
            {
              Identifier RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                Identifier sym = id_val;
                                // check if unary operator is type valid
                                TipoSubyacente subType = symbolsTable.get(id_val.getTypeName()).getTipoSubyacente();

                                if(subType != TipoSubyacente.TS_BOOLEAN) {
                                  String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                  String to = opxright.getLine() + ":" + opxright.getColumn();
                                  String message = "Invalid unary operator " + op + " for type " + subType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(type_number.getSize(),  type_number.getTipoSubyacente());

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    id_val.getId(),
                                    null,
                                    var_id
                                  );

                                  if(id_val.getTipo() == Tipo.dconst){
                                    Integer value = -((Integer) id_val.getValue()).intValue();
                                    sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName(), value);
                                  }else{
                                    sym = new Identifier(var_id, id_val.getTipo(), id_val.getTypeName());
                                  }
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRING_VALUE ::= string 
            {
              StringValue RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String string_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new StringValue(string_val);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRING_VALUE ::= lparen STRING_VALUE rparen 
            {
              StringValue RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StringValue string_val = (StringValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = string_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALUE ::= ID_VALUE 
            {
              Value RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;

                              String var_id = id_val.getId();

                              if(id_val.getTipo() == Tipo.dconst){
                                sym = new Value(var_id, id_val.getTipo(), id_val.getTypeName(), id_val.getValue());
                              }
                              else {
                                sym = new Value(var_id, id_val.getTipo(), id_val.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALUE ::= STRING_VALUE 
            {
              Value RESULT =null;
		Location str_valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location str_valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StringValue str_value = (StringValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String value = str_value.getString().replace("\"", "");
                                Type type_string = symbolsTable.get("string");

                                if (value.length() > 1000){
                                  String from = str_valuexleft.getLine() + ":" + str_valuexleft.getColumn();
                                  String to = str_valuexright.getLine() + ":" + str_valuexright.getColumn();
                                  String message = "String must be shorter than 1000 characters " + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                // string size in bytes
                                int stringSize = value.length() * type_string.getSize();

                                Value sym = new Value(value, stringSize);

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= BOOLEAN_VALUE 
            {
              Value RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_bool = symbolsTable.get("boolean");

                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, TipoSubyacente.TS_BOOLEAN, value);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE ::= NUMBER_VALUE 
            {
              Value RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		NumericValue n_val = (NumericValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Integer value = n_val.getValue();

                                Type type_number = symbolsTable.get("number");

                                String var_id = backend.addTempVar(type_number.getSize(), type_number.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  Integer.toString(value),
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, TipoSubyacente.TS_NUMBER, value);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUE ::= VALUE_COMPARISON 
            {
              Value RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String id = comp_val.getVarId();

                              if(comp_val.getIsConst()){
                                Boolean value = comp_val.getValue();
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN, value);
                              }else{
                                sym = new Value(id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              Value RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Value sym;

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN, value);
                                }else{
                                  sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALUE ::= ARITHMETICAL_OPERATION 
            {
              Value RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ArithmeticOperation arith_op = (ArithmeticOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new Value(var_id, TipoSubyacente.TS_NUMBER, arith_op.getValue());
                              }else{
                                sym = new Value(var_id, TipoSubyacente.TS_NUMBER);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALUE ::= BOOLEAN_OPERATION 
            {
              Value RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Value sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN, bool_op.getValue());
                              }else{
                                sym = new Value(var_id, TipoSubyacente.TS_BOOLEAN);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALUE ::= CALL_FUNCTION 
            {
              Value RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                  String from = call_fnxleft.getLine() + ":" +call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Function call : "+call_fn.getFunctionId() + " does not return any value" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new Value(var_id, Tipo.dfun, fn_type.getTypeName());
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALUE ::= instr_read lparen rparen 
            {
              Value RESULT =null;
		
                              try{
                                Type number_type = symbolsTable.get("number");
                                String var_id = backend.addTempVar(number_type.getSize(), number_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.read,
                                  null,
                                  null,
                                  var_id
                                );

                                RESULT = new Value(var_id, number_type.getTipoSubyacente());
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALUE ::= TUPLE_ACCESS 
            {
              Value RESULT =null;
		

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOOLEAN_OPERATION ::= BOOLEAN_OP_VALUE op_logical BOOLEAN_OP_VALUE 
            {
              BooleanOperator RESULT =null;
		Location bool_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bool_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		BooleanOperationValue bool_val1 = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bool_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperationValue bool_val2 = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                BooleanOperator sym;
                                Code op_code;

                                switch(op){
                                  case "&&":
                                    op_code = Code.and;
                                    break;
                                  case "||":
                                    op_code = Code.or;
                                    break;
                                  default :
                                    String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                    String to = opxright.getLine() + ":" + opxright.getColumn();
                                    String message = "Invalid boolean operator" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                boolean allConst = bool_val1.getIsConst() && bool_val2.getIsConst();
                                Boolean value = null;

                                if(allConst){
                                  Boolean val1 = (Boolean) bool_val1.getValue();
                                  Boolean val2 = (Boolean) bool_val2.getValue();
                                  switch(op){
                                  case "&&":
                                    value = val1 && val2;
                                    break;
                                  case "||":
                                    value = val1 || val2;
                                    break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                String val1_id = bool_val1.getVarId();
                                String val2_id = bool_val2.getVarId();
                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1_id,
                                  val2_id,
                                  var_id
                                );

                                if(allConst){
                                  sym = new BooleanOperator(var_id, value);
                                }else{
                                  sym = new BooleanOperator(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BOOLEAN_OPERATION ::= lparen BOOLEAN_OPERATION rparen 
            {
              BooleanOperator RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BOOLEAN_OPERATION ::= op_logical_not lparen BOOLEAN_OPERATION rparen 
            {
              BooleanOperator RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                BooleanOperator sym;
                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  bool_op.getVarId(),
                                  null,
                                  var_id
                                );

                                if(bool_op.getIsConst()){
                                  Boolean value = ! bool_op.getValue().booleanValue();
                                  sym = new BooleanOperator(bool_op.getVarId(), value);
                                }else{
                                  sym = new BooleanOperator(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOOLEAN_OP_VALUE ::= BOOLEAN_VALUE 
            {
              BooleanOperationValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_boolean = symbolsTable.get("boolean");

                                String var_id = backend.addTempVar(type_boolean.getSize(),  type_boolean.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id, value);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BOOLEAN_OP_VALUE ::= ID_VALUE 
            {
              BooleanOperationValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Identifier id_val = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Tipo main_var_type = id_val.getTipo();
                                if(main_var_type != Tipo.darg && main_var_type != Tipo.dconst && main_var_type != Tipo.dvar){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "Invalid arithmetic value type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type var_dtype = symbolsTable.get(id_val.getTypeName());

                                if(var_dtype.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = id_valxleft.getLine() + ":" + id_valxleft.getColumn();
                                  String to = id_valxright.getLine() + ":" + id_valxright.getColumn();
                                  String message = "BOOLEAN_OP_VALUE: Invalid subjacent type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                BooleanOperationValue sym;
                                String var_id = id_val.getId();

                                if(main_var_type == Tipo.dconst){
                                  Boolean value = (Boolean) id_val.getValue();
                                  sym = new BooleanOperationValue(var_id, value);
                                }else{
                                  sym = new BooleanOperationValue(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BOOLEAN_OP_VALUE ::= BOOLEAN_OPERATION 
            {
              BooleanOperationValue RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperator bool_op = (BooleanOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              BooleanOperationValue sym;
                              if(bool_op.getIsConst()){
                                sym = new BooleanOperationValue(bool_op.getVarId(), bool_op.getValue());
                              }else{
                                sym = new BooleanOperationValue(bool_op.getVarId());
                              }
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOOLEAN_OP_VALUE ::= VALUE_COMPARISON 
            {
              BooleanOperationValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              BooleanOperationValue sym;
                              String id = new String(comp_val.getVarId());
                              if(comp_val.getIsConst()){
                                sym = new BooleanOperationValue(id, comp_val.getValue());
                              }else{
                                sym = new BooleanOperationValue(id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOOLEAN_OP_VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              BooleanOperationValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ValuesComparison comp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                BooleanOperationValue sym;
                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new BooleanOperationValue(var_id, value);
                                }else{
                                  sym = new BooleanOperationValue(var_id);
                                }
                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BOOLEAN_OP_VALUE ::= CALL_FUNCTION 
            {
              BooleanOperationValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_BOOLEAN){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_BOOLEAN + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BOOLEAN_OP_VALUE ::= op_logical_not CALL_FUNCTION 
            {
              BooleanOperationValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		CallFunction call_fn = (CallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());

                                if(dfn_type.getTipoSubyacente() != TipoSubyacente.TS_NUMBER){
                                  String from = call_fnxleft.getLine() + ":" + call_fnxleft.getColumn();
                                  String to = call_fnxright.getLine() + ":" + call_fnxright.getColumn();
                                  String message = "Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getTipoSubyacente() +". Expected :"+TipoSubyacente.TS_NUMBER + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String var_id = backend.addTempVar(dfn_type.getSize(), dfn_type.getTipoSubyacente());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return",
                                  call_fn.getBackendId(),
                                  var_id
                                );

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );

                                RESULT = new BooleanOperationValue(var_id);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BOOLEAN_VALUE ::= bool 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              RESULT = new BooleanValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BOOLEAN_VALUE ::= op_logical_not BOOLEAN_VALUE 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = ! bool_val.getValue().booleanValue();
                              RESULT = new BooleanValue(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BOOLEAN_VALUE ::= lparen BOOLEAN_VALUE rparen 
            {
              BooleanValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		BooleanValue bool_val = (BooleanValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              ValuesComparison RESULT =null;
		Location val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Value val1 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value val2 = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                ValuesComparison sym;

                                Tipo type1 = val1.getTipo();
                                TipoSubyacente subType1;

                                if(val1.getTipo() == Tipo.dnull){
                                  subType1 = val1.getTipoSubyacente();
                                }else{
                                  if(type1 != Tipo.dvar && type1 != Tipo.dconst && type1 != Tipo.darg && type1 != Tipo.dfun) {
                                    String from = val1xleft.getLine() + ":" + val1xleft.getColumn();
                                    String to = val1xright.getLine() + ":" + val1xright.getColumn();
                                    String message = "Value 1 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type dtype_type = symbolsTable.get(val1.getTypeName());
                                  subType1 = dtype_type.getTipoSubyacente();
                                }
                                // SAME FOR VALUE2
                                Tipo type2 = val2.getTipo();
                                TipoSubyacente subType2;

                                if(val2.getTipo() == Tipo.dnull){
                                  subType2 = val2.getTipoSubyacente();
                                }else{
                                  if(type2 != Tipo.dvar && type2 != Tipo.dconst && type2 != Tipo.darg && type2 != Tipo.dfun) {
                                    String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                    String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                    String message = "Value 2 of comparison wrong type" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type dtype_type = symbolsTable.get(val2.getTypeName());
                                  subType2 = dtype_type.getTipoSubyacente();
                                }

                                //Check same subtype
                                if(subType1 != subType2) {
                                  String from = val2xleft.getLine() + ":" + val2xleft.getColumn();
                                  String to = val2xright.getLine() + ":" + val2xright.getColumn();
                                  String message = "Value 1 subtype is different from value 2" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Code op_code = Code.EQ;
                                switch(op){
                                  case "==":
                                    op_code = Code.EQ;
                                    break;
                                  case "!=":
                                    op_code = Code.NE;
                                    break;
                                  case "<":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.LT;
                                    break;
                                  case "<=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.LE;
                                    break;
                                  case ">":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.GT;
                                    break;
                                  case ">=":
                                    if(subType1 != TipoSubyacente.TS_NUMBER) {
                                      String from = opxleft.getLine() + ":" + opxleft.getColumn();
                                      String to = opxright.getLine() + ":" + opxright.getColumn();
                                      String message = "This operator ("+op+") only works with integer subtypes" + " from "+from+" to "+to;
                                      throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                    }
                                    op_code = Code.GE;
                                    break;
                                }

                                boolean allConst = val1.getIsConst() && val2.getIsConst();

                                Boolean val = null;
                                if(allConst){
                                  switch(op){
                                    case "==":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = ((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                      }
                                      break;
                                    case "!=":
                                      if(subType1 == TipoSubyacente.TS_NUMBER){
                                        val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                      }
                                      if(subType1 == TipoSubyacente.TS_STRING){
                                        val = !((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == TipoSubyacente.TS_BOOLEAN){
                                        val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                      }
                                      break;

                                    // only integer operators
                                    case "<":
                                      val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                      break;
                                    case "<=":
                                      val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                      break;
                                    case ">":
                                      val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                      break;
                                    case ">=":
                                      val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                      break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(type_bool.getSize(), type_bool.getTipoSubyacente());

                                if(allConst){
                                  sym = new ValuesComparison(var_id, val);
                                }else{
                                  sym = new ValuesComparison(var_id);
                                }

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1.getVarId(),
                                  val2.getVarId(),
                                  var_id
                                );

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALUE_COMPARISON ::= lparen VALUE_COMPARISON rparen 
            {
              ValuesComparison RESULT =null;
		Location cmp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cmp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ValuesComparison cmp_val = (ValuesComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = cmp_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= BOOLEAN_OP_VALUE 
            {
              Condition RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BooleanOperationValue bool_val = (BooleanOperationValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String var_id = bool_val.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);


                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new Condition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND_T ::= 
            {
              ConditionTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new ConditionTrue();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND_F ::= 
            {
              ConditionFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new ConditionFalse();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCTION_IF ::= inst_if COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF ELSE 
            {
              InstructionIf RESULT =null;
		
                              RESULT = new InstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // M_END ::= EMPTY 
            {
              End RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new End(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELIF ::= M_END inst_elif COND_F COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF 
            {
              ElseIf RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		End mend = (End)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new ElseIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELIF ::= 
            {
              ElseIf RESULT =null;
		
                              RESULT = new ElseIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSE ::= M_END inst_else lbracket BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbracket 
            {
              Else RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		End mend = (End)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new Else();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELSE ::= COND_F 
            {
              Else RESULT =null;
		
                              RESULT = new Else();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // M_WHILE ::= EMPTY 
            {
              WhileLabel RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new WhileLabel(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCTION_WHILE ::= inst_while M_WHILE COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              InstructionWhile RESULT =null;
		Location mwhilexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mwhilexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		WhileLabel mwhile = (WhileLabel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new InstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCTION_FOR ::= inst_for lparen FOR_BODY rparen lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              InstructionFor RESULT =null;
		Location forBodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location forBodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		ForBody forBody = (ForBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String postInstrLabel = forBody.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                postInstrLabel
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );
                              RESULT = new InstructionFor();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_FOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LABEL_FOR ::= EMPTY 
            {
              ForLabel RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new ForLabel(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LABEL_FOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR_BODY ::= DECLARATION semicolon LABEL_FOR COND semicolon LABEL_POST_FOR OPERATOR_ASSIG 
            {
              ForBody RESULT =null;
		Location labelForxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location labelForxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ForLabel labelFor = (ForLabel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location labelPostForxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location labelPostForxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		LabelPostFor labelPostFor = (LabelPostFor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    String iniForLabel = labelFor.getLabel();
                                    c3a_g.generateC3aInstr(
                                      Code.go_to,
                                      null,
                                      null,
                                      iniForLabel
                                    );

                                    RESULT = new ForBody(labelPostFor.getLabel());
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_BODY",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LABEL_POST_FOR ::= EMPTY 
            {
              LabelPostFor RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new LabelPostFor(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LABEL_POST_FOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CALL_FUNCTION ::= id lparen rparen 
            {
              CallFunction RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // Check if function and has params
                                int num_params = symbolsTable.getNumParams(fun_id);
                                if(num_params > 0 ){
                                  String from = lpxleft.getLine() + ":" + lpxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + num_params + " parameters" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String backId = fun_type.getBackendId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  0 + "",
                                  null,
                                  backId
                                );

                                RESULT = new CallFunction(fun_id, backId);
                              }catch(SymbolsTableError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CALL_FUNCTION ::= CALL_BODY rparen 
            {
              CallFunction RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CallBody body = (CallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                int body_params = body.getNumParams();
                                String fun_id = body.getFunId();
                                int fun_params = symbolsTable.getNumParams(fun_id);

                                if(fun_params != body_params){
                                  String from = bodyxleft.getLine() + ":" + bodyxleft.getColumn();
                                  String to = rpxright.getLine() + ":" + rpxright.getColumn();
                                  String message = "Missing parameters. Function " + fun_id + " has " + fun_params + " parameters" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String fun_backId = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  fun_params + "",
                                  null,
                                  fun_backId
                                );



                                RESULT = new CallFunction(fun_id, fun_backId);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CALL_BODY ::= CALL_BODY comma VALUE 
            {
              CallBody RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		CallBody body = (CallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String fun_id = body.getFunId();
                                int num_params = body.getNumParams();
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param "+ num_params + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, num_params);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if (paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                String fun_back_id = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new CallBody(fun_id, fun_back_id, num_params+1);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CALL_BODY ::= id lparen VALUE 
            {
              CallBody RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                TipoSubyacente subType;

                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }
                                else{
                                  if(value.getTipo() != Tipo.dvar && value.getTipo() != Tipo.dconst && value.getTipo() != Tipo.darg){
                                    String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                    String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                    String message = fun_id + ". Incorrect type for param 0" + " from "+from+" to "+to;
                                    throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getTipoSubyacente();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, 0);
                                TipoSubyacente paramSubType = symbolsTable.get(paramType.getTypeName()).getTipoSubyacente();

                                if(paramSubType != subType){
                                  String from = valuexleft.getLine() + ":" + valuexleft.getColumn();
                                  String to = valuexright.getLine() + ":" + valuexright.getColumn();
                                  String message = fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String fun_back_id = fun_type.getBackendId();

                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new CallBody(fun_id, fun_back_id, 0+1);
                              }catch(SymbolsTableError e){
                                String from = fun_idxleft.getLine() + ":" + fun_idxleft.getColumn();
                                String to = fun_idxright.getLine() + ":" + fun_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCTION_OUT ::= instr_print lparen VALUE rparen 
            {
              InstructionOut RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                String var_id = value.getVarId();
                                TipoSubyacente subtype;

                                if(value.getTipo() == Tipo.dnull){
                                  subtype = value.getTipoSubyacente();
                                }else{
                                  Type var_type = symbolsTable.get(value.getTypeName());
                                  subtype = var_type.getTipoSubyacente();
                                }

                                if (value.getTipo() == Tipo.dnull && value.getTipoSubyacente() == TipoSubyacente.TS_STRING) {
                                  var_id = backend.addTempStrVar(value.getStringSize(), (String) value.getValue());
                                  c3a_g.generateC3aInstr(
                                    Code.print,
                                    subtype.toString(),
                                    (String) value.getValue(),
                                    var_id
                                  );
                                } else {
                                  c3a_g.generateC3aInstr(
                                    Code.print,
                                    subtype.toString(),
                                    null,
                                    var_id
                                  );
                                }
                                RESULT = new InstructionOut();
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DEFINE_FUNCTION ::= FUNCTION_INIT lbracket BLOCK_IN FUNCTION_INSTRUCTIONS FUNCTION_RETURN BLOCK_OUT rbracket 
            {
              DefineFunction RESULT =null;
		Location fun_initxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location fun_initxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		FunctionInit fun_init = (FunctionInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location fun_retxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_retxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		FunctionReturn fun_ret = (FunctionReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              //check if fun type and return type are the same
                              if(fun_init.getTipoSubyacente() != fun_ret.getTipoSubyacente()) {
                                String from = fun_retxleft.getLine() + ":" + fun_retxleft.getColumn();
                                String to = fun_retxright.getLine() + ":" + fun_retxright.getColumn();
                                String message = "Invalid return type. Expected : "+fun_init.getTipoSubyacente()+", but got: "+fun_ret.getTipoSubyacente() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }

                              // no return value
                              if(fun_init.getTipoSubyacente() == TipoSubyacente.TS_NULL){
                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  null,
                                  null,
                                  fun_init.getFunId()
                                );
                              }
                              // return value
                              else{

                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  fun_ret.getVarId(),
                                  null,
                                  fun_init.getFunId()
                                );
                              }

                              RESULT = new DefineFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCTION_INIT ::= inst_function id FUNCTION_PARAMS rparen two_points id 
            {
              FunctionInit RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location fun_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fun_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		FunctionParams fun_params = (FunctionParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // check return type
                                Type return_fun_type = symbolsTable.get(type_id);
                                if(return_fun_type.getTipo() != Tipo.dtype){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Function declaration : invalid type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }
                                if(return_fun_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid return type : "+type_id+". Valid return types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                TipoSubyacente subType = return_fun_type.getTipoSubyacente();
                                ArrayList<Parameter> params = fun_params.getParams();
                                String backId = backend.addProc(fun_id, params.size(), 0, subType);

                                Type fun_type = new Type(backId, Tipo.dfun, type_id);

                                symbolsTable.add(fun_id, fun_type);

                                // add params if it has
                                for(Parameter param : params){
                                  Type param_type = param.getType();
                                  TipoSubyacente param_subType = symbolsTable.get(param.getType().getTypeName()).getTipoSubyacente();
                                  String param_backId = backend.addVar(param.getVarId(), param.getSize(), param_subType, true);
                                  param_type.setBackendId(param_backId);
                                  symbolsTable.addParam(fun_id, param_backId, param.getVarId(), param_type);
                                }

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  backId
                                );

                                c3a_g.generateC3aInstr(
                                  Code.pmb,
                                  null,
                                  null,
                                  backId
                                );

                                RESULT = new FunctionInit(backId, subType);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INIT",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCTION_PARAMS ::= FUNCTION_W_PARAMS 
            {
              FunctionParams RESULT =null;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunctionWithParams params = (FunctionWithParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new FunctionParams(params.getParams());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCTION_PARAMS ::= lparen 
            {
              FunctionParams RESULT =null;
		
                              RESULT = new FunctionParams();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCTION_W_PARAMS ::= FUNCTION_W_PARAMS comma id two_points id 
            {
              FunctionWithParams RESULT =null;
		Location prev_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location prev_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		FunctionWithParams prev_params = (FunctionWithParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Parameter param = new Parameter(id, param_type, type_type.getSize());

                                RESULT = new FunctionWithParams(param, prev_params);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCTION_W_PARAMS ::= lparen id two_points id 
            {
              FunctionWithParams RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getTipo() != Tipo.dtype){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }
                                if(type_type.getTipoSubyacente() == TipoSubyacente.TS_STRING){
                                  String from = idxleft.getLine() + ":" + idxleft.getColumn();
                                  String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                  String message = "Invalid param type : "+type_id+". Valid params types are : boolean or number" + " from "+from+" to "+to;
                                  throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                                }

                                Type param_type = new Type(Tipo.darg, type_id);

                                Parameter param = new Parameter(id, param_type, type_type.getSize());

                                RESULT = new FunctionWithParams(param);
                              }catch(SymbolsTableError e){
                                String from = type_idxleft.getLine() + ":" + type_idxleft.getColumn();
                                String to = type_idxright.getLine() + ":" + type_idxright.getColumn();
                                String message = e.getMessage() + " from "+from+" to "+to;
                                throw new CompilerError(message, CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCTION_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              FunctionInstructions RESULT =null;
		
                              RESULT = new FunctionInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION_INSTRUCTIONS ::= 
            {
              FunctionInstructions RESULT =null;
		
                              RESULT = new FunctionInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION_RETURN ::= inst_return VALUE semicolon 
            {
              FunctionReturn RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Value value = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                // is literall
                                TipoSubyacente subType = null;
                                if(value.getTipo() == Tipo.dnull){
                                  subType = value.getTipoSubyacente();
                                }

                                // is variable
                                if(value.getTipo() != Tipo.dnull){
                                  Type type_type = symbolsTable.get(value.getTypeName());
                                  subType = type_type.getTipoSubyacente();
                                }

                                RESULT = new FunctionReturn(value.getVarId(), subType);
                              }catch(SymbolsTableError e){
                                throw new CompilerError(e.getMessage(), CompilerError.ErrorType.SEMANTIC);
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION_RETURN ::= EMPTY 
            {
              FunctionReturn RESULT =null;
		
                              RESULT = new FunctionReturn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EMPTY ::= 
            {
              Empty RESULT =null;
		 RESULT = new Empty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
